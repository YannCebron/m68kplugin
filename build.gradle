/*
Copyright 2021 The Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

plugins {
  id 'java'
  id 'org.jetbrains.intellij' version '1.1.2'
  id "org.jetbrains.grammarkit" version '2021.1.3'
  id 'org.jetbrains.changelog' version '1.2.0'
}


group 'com.yanncebron'
version = "${version}"

repositories {
  mavenCentral()
}

dependencies {
  implementation group: 'org.commonmark', name: 'commonmark', version: '0.18.0'
  implementation group: 'org.commonmark', name: 'commonmark-ext-gfm-tables', version: '0.18.0'
  testImplementation group: 'junit', name: 'junit', version: '4.13.2'
}


apply plugin: 'java'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

def localSandboxDir = ".sandbox"

apply plugin: 'idea'
idea {
//    project {
//        jdkName = javaVersion
//        languageLevel = javaVersion
//    }
  module {
    generatedSourceDirs += file('gen')
//    excludeDirs.add(file(intellij.sandboxDirectory))   // todo not working
    excludeDirs += file(localSandboxDir)
  }
}

sourceSets {
  main {
    java.srcDirs 'src', 'gen'
    resources.srcDirs 'plugin-resources'
  }
  test {
    java.srcDir 'tests'
  }
}

intellij {
  version = intellij_platform_version
  sandboxDir = project.rootDir.canonicalPath + "/" + localSandboxDir
}


runIde {
  if (project.hasProperty("ideDir")) {
    ideDir = file(project.property("ideDir"))
    jbrVersion = project.property("ideJBR")
  }
  autoReloadPlugins = false
}

buildSearchableOptions {
  enabled = false
}

apply plugin: 'org.jetbrains.changelog'
patchPluginXml {
  untilBuild = ""
  changeNotes = provider { changelog.getLatest().toHTML() }
}


// Lexer generation ===========================================================
import org.jetbrains.grammarkit.tasks.GenerateLexer
apply plugin: 'org.jetbrains.grammarkit'

grammarKit {
  jflexRelease = '1.7.0-2'
}

task generateM68KLexer(type: GenerateLexer) {
  source = "src/grammar/_M68kLexer.flex"
  skeleton = "src/grammar/idea-flex.skeleton"
  targetDir = "gen/com/yanncebron/m68kplugin/lexer/"
  targetClass = "_M68kLexer"
  purgeOldFiles = true
}
//compileJava.dependsOn generateM68KLexer

// Plugin verification ===========================================================
import org.jetbrains.intellij.tasks.RunPluginVerifierTask.FailureLevel

runPluginVerifier {
  ideVersions = intellij_platform_verification_versions.split(',') as List
  failureLevel = [FailureLevel.COMPATIBILITY_PROBLEMS]
}

check.dependsOn verifyPlugin
