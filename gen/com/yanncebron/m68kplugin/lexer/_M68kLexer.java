/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * Copyright 2021 The Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.yanncebron.m68kplugin.lexer;

import com.intellij.psi.tree.IElementType;

import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.yanncebron.m68kplugin.lang.psi.M68kTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/yann/idea-ultimate/m68kplugin/src/grammar/_M68kLexer.flex</tt>
 */
public class _M68kLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AFTER_LABEL = 2;
  public static final int IN_INSTRUCTION = 4;
  public static final int AFTER_INSTRUCTION = 6;
  public static final int STRING_DIRECTIVE = 8;
  public static final int IN_OPERAND = 10;
  public static final int AFTER_OPERAND = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15232 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\13\21\1\72\1\73\4\21\1\74\3\21\1\75\2\21\1\76\1\77\7\21"+
    "\123\26\1\100\7\26\1\101\1\102\12\26\1\103\24\21\1\26\1\104\u0702\21");

  /* The ZZ_CMAP_Y table has 4416 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\10\1\13\1\14\4\0"+
    "\1\15\1\16\1\15\2\17\1\20\3\17\1\20\71\17\1\21\1\17\1\22\1\0\1\23\1\24\12"+
    "\0\1\16\5\0\1\25\1\26\1\27\1\30\2\17\1\31\11\17\1\32\21\17\1\22\1\33\24\17"+
    "\1\34\3\17\1\20\1\35\1\34\4\17\5\0\1\17\1\32\1\36\1\0\3\17\2\37\3\0\1\17\1"+
    "\37\7\17\1\34\1\40\1\41\14\17\1\42\1\23\1\34\1\43\1\40\1\44\2\0\6\17\1\0\1"+
    "\45\14\17\1\22\1\0\1\40\1\46\3\17\1\37\1\47\1\15\3\17\1\33\1\17\1\23\2\0\3"+
    "\17\1\50\10\0\2\17\1\25\1\51\2\0\1\52\1\17\1\53\1\22\11\17\1\42\1\17\1\25"+
    "\1\43\1\17\1\54\1\40\1\34\1\17\1\42\1\55\1\56\2\17\1\57\1\60\1\61\1\55\1\62"+
    "\1\63\1\64\1\54\1\40\1\22\1\0\1\65\1\66\1\56\2\17\1\57\1\67\1\21\1\66\1\70"+
    "\1\35\1\71\1\72\1\40\1\51\1\0\1\65\1\32\1\31\2\17\1\57\1\73\1\61\1\32\1\74"+
    "\1\50\1\0\1\54\1\40\1\0\1\35\1\65\1\55\1\56\2\17\1\57\1\73\1\61\1\55\1\70"+
    "\1\75\1\64\1\54\1\40\1\35\1\0\1\76\1\77\1\100\1\101\1\102\1\77\1\17\1\21\1"+
    "\77\1\103\1\104\1\0\1\72\1\40\2\0\1\42\1\25\1\57\2\17\1\57\1\17\1\61\1\25"+
    "\1\103\1\105\1\37\1\54\1\40\2\0\1\42\1\25\1\57\2\17\1\57\1\42\1\61\1\25\1"+
    "\103\1\105\1\27\1\54\1\40\1\106\1\0\1\65\1\25\1\57\4\17\1\107\1\25\1\110\1"+
    "\52\1\63\1\54\1\40\1\0\1\33\1\76\1\17\1\20\1\33\2\17\1\31\1\111\1\20\1\63"+
    "\1\112\1\17\1\72\1\40\1\113\1\0\1\34\6\17\1\37\1\20\1\16\1\40\1\114\4\0\1"+
    "\115\1\116\1\52\1\34\1\117\1\76\1\17\1\120\1\112\1\16\1\40\1\121\4\0\1\50"+
    "\3\0\1\40\1\114\2\0\1\17\1\34\3\17\1\23\1\34\1\17\1\22\2\17\1\34\3\17\1\23"+
    "\10\0\6\17\1\20\1\56\1\40\1\114\2\17\1\107\1\122\2\17\1\20\1\27\1\40\1\123"+
    "\4\17\1\32\1\16\5\17\1\124\51\17\1\100\1\20\1\100\5\17\1\100\4\17\1\100\1"+
    "\20\1\100\1\17\1\20\7\17\1\100\10\17\1\66\4\0\2\17\2\0\12\17\2\51\1\34\114"+
    "\17\1\55\2\17\1\34\2\17\1\37\11\17\1\77\1\17\1\50\1\17\1\25\1\125\1\0\2\17"+
    "\1\125\1\0\2\17\1\125\1\0\1\17\1\25\1\126\1\0\6\17\1\127\2\17\1\50\1\63\1"+
    "\130\1\40\1\114\4\0\1\40\1\114\13\17\1\0\5\17\1\37\10\17\1\51\1\0\3\17\1\20"+
    "\1\17\1\125\1\17\1\50\1\72\1\40\3\17\1\51\1\23\1\0\5\17\1\125\3\17\1\22\1"+
    "\40\1\114\4\0\3\17\1\125\7\17\1\20\1\34\1\17\1\23\1\0\1\40\1\114\1\40\1\114"+
    "\1\63\13\0\6\17\1\42\1\17\1\42\1\125\1\40\1\114\4\0\5\17\1\131\1\40\1\46\4"+
    "\17\1\32\1\17\1\22\1\0\6\17\1\51\1\0\1\40\1\132\1\40\1\46\3\17\1\51\1\17\1"+
    "\50\13\0\1\133\1\134\1\0\30\17\4\0\1\63\1\17\1\23\1\0\42\17\2\51\4\17\2\51"+
    "\1\17\1\135\3\17\1\51\6\17\1\25\1\112\1\136\1\23\1\127\1\125\1\17\1\23\1\136"+
    "\1\23\5\0\1\137\10\0\1\35\1\63\2\0\1\17\1\23\14\0\1\140\1\33\1\111\1\141\1"+
    "\24\1\142\1\17\1\131\1\45\1\143\2\0\5\17\1\50\144\0\1\75\6\17\1\22\42\0\5"+
    "\17\1\20\5\17\1\20\20\17\1\23\1\144\1\113\1\0\4\17\1\32\1\16\7\17\1\63\2\0"+
    "\2\17\1\20\1\0\10\20\4\17\5\0\1\63\72\0\1\45\3\0\1\34\1\22\1\141\1\23\1\34"+
    "\11\17\1\20\1\45\1\34\12\17\1\124\1\45\4\17\1\51\1\34\12\17\1\20\2\0\3\17"+
    "\1\37\6\0\170\17\1\51\11\0\72\17\1\51\5\0\21\17\1\23\10\0\5\17\1\51\41\17"+
    "\1\23\2\17\1\40\1\145\2\0\5\17\1\20\1\52\1\146\16\17\4\0\1\63\1\17\1\33\14"+
    "\17\1\56\3\17\1\20\1\17\7\0\1\63\1\17\1\147\1\124\3\17\3\0\6\17\1\125\1\0"+
    "\10\17\1\111\1\0\1\40\1\114\2\0\1\33\1\150\1\40\1\46\3\17\1\37\4\17\1\37\1"+
    "\0\3\17\1\23\6\17\1\124\1\17\1\0\1\63\1\40\1\114\1\25\1\17\1\40\1\151\6\17"+
    "\1\20\1\0\1\17\1\51\1\40\1\114\2\17\1\20\1\152\7\17\1\20\1\153\2\0\1\154\2"+
    "\17\1\155\1\0\3\156\1\0\2\20\5\17\1\124\1\51\1\0\17\17\1\37\1\40\1\114\64"+
    "\17\1\125\1\0\2\17\1\20\1\53\5\17\1\125\40\0\55\17\1\51\15\17\1\22\4\0\1\20"+
    "\1\0\1\53\1\45\1\17\1\57\1\20\1\112\1\157\15\17\1\22\3\0\1\53\54\17\1\51\2"+
    "\0\10\17\1\33\6\17\5\0\1\17\1\125\16\0\1\25\20\17\1\23\2\0\1\40\1\114\1\160"+
    "\2\17\1\37\1\160\2\17\1\37\1\75\12\17\1\20\3\33\1\161\4\0\1\17\1\42\2\17\1"+
    "\20\2\17\1\162\1\17\1\51\1\17\1\51\4\0\17\17\1\37\10\0\6\17\1\23\41\0\3\17"+
    "\1\23\6\17\1\50\5\0\4\17\2\0\3\17\1\37\5\17\1\37\3\17\1\51\4\17\1\125\1\17"+
    "\1\141\5\0\23\17\1\51\1\40\1\114\4\17\1\125\4\17\1\125\5\17\1\0\6\17\1\125"+
    "\23\0\46\17\1\20\1\0\2\17\1\51\1\0\1\17\23\0\1\51\1\57\4\17\1\32\1\163\2\17"+
    "\1\51\1\0\2\17\1\20\1\0\3\17\1\20\10\0\2\17\1\164\1\0\2\17\1\51\1\0\3\17\1"+
    "\22\10\0\7\17\1\75\10\0\1\134\1\52\1\42\1\34\2\17\1\125\5\0\3\17\1\23\3\17"+
    "\1\23\4\0\1\17\1\34\2\17\1\23\3\0\6\17\1\51\1\0\2\17\1\51\1\0\2\17\1\37\1"+
    "\0\2\17\1\22\15\0\11\17\1\50\6\0\6\17\1\37\1\0\6\17\1\37\41\0\10\17\1\51\3"+
    "\0\1\72\1\40\2\0\1\33\6\17\1\50\2\0\3\17\1\50\1\40\1\114\6\17\1\165\1\40\2"+
    "\0\4\17\1\166\1\0\10\17\1\167\1\0\1\40\1\170\4\0\2\17\1\31\3\17\1\55\1\27"+
    "\10\0\1\20\1\142\1\17\1\32\1\17\1\50\7\17\1\50\1\40\1\114\1\42\1\55\1\56\2"+
    "\17\1\57\1\73\1\61\1\55\1\70\1\104\1\45\1\125\23\0\10\17\1\147\1\37\1\40\1"+
    "\114\4\0\10\17\1\171\1\0\1\40\1\114\24\0\6\17\1\51\1\20\3\0\1\51\4\0\7\17"+
    "\1\20\1\172\1\0\1\40\1\114\4\0\6\17\1\51\1\0\1\40\1\114\6\0\3\17\1\61\1\17"+
    "\1\37\1\40\1\114\54\0\10\17\1\40\1\114\1\0\1\63\70\0\7\17\1\50\40\0\1\17\1"+
    "\57\4\17\2\20\1\50\1\0\1\40\1\114\2\0\1\33\3\17\1\33\2\17\1\34\1\20\51\0\63"+
    "\17\1\22\14\0\15\17\1\20\2\0\30\17\1\125\27\0\5\17\1\20\72\0\10\17\1\20\67"+
    "\0\7\17\1\50\3\17\1\20\1\40\1\114\14\0\3\17\1\51\2\0\6\17\1\20\1\0\1\125\1"+
    "\0\1\40\1\114\1\53\2\17\1\45\2\17\56\0\10\17\1\23\1\0\5\17\1\20\2\0\1\53\1"+
    "\17\10\0\1\50\3\0\75\17\1\23\2\0\36\17\1\37\41\0\1\22\77\0\15\17\1\37\1\17"+
    "\1\23\1\17\1\50\1\17\1\143\54\0\12\17\1\25\10\17\1\25\1\173\1\133\1\17\1\174"+
    "\1\42\7\17\1\32\1\107\2\25\3\17\1\175\1\112\1\33\1\57\51\17\1\51\3\17\1\57"+
    "\2\17\1\124\3\17\1\124\2\17\1\25\3\17\1\25\2\17\1\20\3\17\1\20\3\17\1\57\3"+
    "\17\1\57\2\17\1\124\1\54\6\40\1\20\2\17\1\56\1\157\1\37\72\0\30\17\1\23\7"+
    "\0\10\17\1\146\1\0\1\40\1\114\24\0\1\42\3\17\1\115\1\34\1\124\1\176\1\140"+
    "\1\177\1\115\1\135\1\115\2\124\1\71\1\17\1\31\1\17\1\125\1\65\1\31\1\17\1"+
    "\125\116\0\3\17\1\22\3\17\1\22\3\17\1\22\16\0\32\17\1\20\5\0\106\17\1\23\1"+
    "\0\33\17\1\51\120\17\1\22\53\0\3\17\1\51\74\0");

  /* The ZZ_CMAP_A table has 1024 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\4\1\5\1\1\2\0\1\2\1\66\1\21\1\64\1\10\1\14\1\67\1\17\1\72"+
    "\1\73\1\6\1\60\1\57\1\61\1\24\1\62\2\16\6\13\2\7\1\55\1\3\1\70\1\56\1\71\1"+
    "\0\1\12\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1"+
    "\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\2\23\1\74\1\20\1\75"+
    "\1\63\1\22\1\0\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\54\2\23\1\0\1\15\1\0\1"+
    "\65\6\0\1\4\4\0\1\23\12\0\1\23\2\0\17\23\1\0\2\23\4\0\4\23\6\0\5\23\7\0\1"+
    "\23\1\0\1\23\1\0\5\23\1\0\2\23\2\0\4\23\1\0\1\23\6\0\1\23\1\0\3\23\1\0\1\23"+
    "\1\0\4\23\1\0\13\23\1\0\1\23\2\0\6\23\1\0\7\23\1\0\1\23\7\0\2\23\1\0\2\23"+
    "\1\0\4\23\5\0\12\7\4\0\6\23\1\0\4\23\4\0\3\23\2\7\3\23\2\0\1\23\5\0\3\23\2"+
    "\7\6\23\4\0\2\23\2\0\1\23\7\0\6\23\6\0\4\23\3\0\11\23\2\0\2\7\5\23\2\0\2\23"+
    "\2\0\6\23\1\0\7\23\1\0\1\23\3\0\4\23\3\0\4\23\2\0\2\23\1\0\1\23\10\0\1\23"+
    "\4\0\2\23\1\0\1\23\1\0\3\23\1\0\6\23\4\0\2\23\1\0\2\23\1\0\2\23\1\0\1\23\2"+
    "\0\2\23\4\0\4\23\1\0\1\23\7\0\2\7\1\23\1\0\2\23\1\0\5\23\1\0\2\23\11\0\2\23"+
    "\2\0\2\23\1\0\6\23\3\0\3\23\1\0\4\23\3\0\2\23\1\0\1\23\1\0\2\23\3\0\2\23\3"+
    "\0\1\23\1\0\3\23\3\0\1\23\6\0\1\23\5\0\2\23\2\0\2\23\5\0\3\23\2\0\4\23\1\0"+
    "\3\23\1\0\1\23\1\0\4\23\1\0\1\23\2\0\5\23\1\0\1\23\3\0\2\23\4\0\2\7\7\0\2"+
    "\23\1\0\1\23\2\0\2\23\1\0\1\23\2\0\1\23\3\0\3\23\1\0\1\23\1\0\3\23\1\0\3\23"+
    "\2\0\2\7\2\0\5\23\5\0\2\23\2\7\2\0\2\23\2\0\3\23\1\0\10\23\4\0\1\23\1\0\2"+
    "\23\4\0\4\23\2\0\2\23\4\0\1\23\3\0\2\23\2\0\4\23\2\7\3\0\3\23\1\0\4\23\1\0"+
    "\6\23\1\0\2\23\2\0\1\23\1\0\1\23\1\0\1\23\1\0\1\23\2\0\3\23\1\0\2\23\2\4\10"+
    "\0\1\23\4\0\1\23\1\0\5\23\2\0\1\23\1\0\4\23\1\0\3\23\4\0\1\23\4\0\4\23\1\0"+
    "\2\7\2\23\4\0\4\23\3\0\3\23\1\0\3\23\1\0\1\23\3\0\1\23\1\0\1\23\2\0\2\7\5"+
    "\23\3\0\1\23\3\0\3\23\1\0\1\23\10\0\3\23\4\0\4\23\3\0\6\23\1\0\2\23\1\0\2"+
    "\23\1\0\2\23\1\0\6\11\1\23\2\0\3\23\3\0\3\23\1\0\2\23\1\0\2\23\3\0\1\23\2"+
    "\0\4\23\1\0\2\23\2\0\3\23\3\0\2\7\3\23\3\0\1\23\2\0\4\23\3\0\2\7\1\23\1\0"+
    "\1\23\3\0\2\23\2\0\2\23\1\0\2\23\3\0\1\23\5\0\1\23\2\0\2\23\1\0\2\23\1\0\1"+
    "\23\1\0\5\23\1\0\4\23\2\0\1\23\1\0\1\23\5\0\1\23\1\0\1\23\1\0\3\23");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\1\14\22\13"+
    "\1\15\1\1\1\16\1\17\1\4\2\16\1\20\1\21"+
    "\1\22\1\1\1\23\1\1\1\24\1\25\1\26\1\27"+
    "\1\26\1\1\1\30\6\23\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\2\1\1\43"+
    "\1\44\1\45\1\46\1\12\2\0\31\13\1\47\1\13"+
    "\1\50\1\51\12\13\1\52\23\13\1\53\6\13\1\54"+
    "\4\13\1\55\6\13\1\56\13\13\1\57\1\60\1\61"+
    "\1\62\1\16\3\0\1\63\1\64\1\65\1\26\2\0"+
    "\1\66\1\67\1\70\1\71\1\72\1\23\1\73\1\74"+
    "\1\75\1\76\2\23\1\77\1\100\1\13\1\101\1\13"+
    "\1\102\1\103\1\104\1\105\2\13\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\13\1\125\1\126\1\13"+
    "\1\127\1\130\1\131\1\132\1\133\6\13\1\134\7\13"+
    "\1\135\1\13\1\136\4\13\1\137\1\140\1\141\2\13"+
    "\1\142\1\143\2\13\1\144\1\145\1\146\11\13\1\147"+
    "\1\150\1\13\1\151\4\13\1\152\1\153\5\13\1\154"+
    "\1\13\1\155\1\156\1\157\1\160\1\161\1\162\1\13"+
    "\1\163\2\13\1\164\1\165\2\13\1\166\1\167\3\13"+
    "\1\170\1\171\1\172\1\13\1\173\1\174\1\13\1\175"+
    "\1\176\1\177\1\200\1\201\1\202\1\203\1\204\1\205"+
    "\1\206\1\207\1\210\1\211\1\212\1\13\1\213\1\214"+
    "\1\215\1\13\1\216\2\13\1\217\1\220\3\13\1\221"+
    "\1\222\1\223\1\224\1\225\1\226\1\227\1\13\1\230"+
    "\1\13\1\231\1\232\1\233\1\234\1\13\1\235\1\236"+
    "\1\237\1\240\1\241\1\242\1\243\1\244\1\245\1\246"+
    "\1\247\1\250\1\251\1\252\1\253\1\254\1\255\1\256"+
    "\1\257\1\260\1\261\1\262\1\263\1\264\1\265\1\266"+
    "\1\267\1\270\1\13\1\271\1\272\1\13\1\273\1\274"+
    "\1\275\1\276\1\277\1\300\1\301\1\302\1\303\1\304"+
    "\1\305\1\306\1\307\1\13\1\310\1\311\1\312\1\313"+
    "\1\314\1\315\6\13\1\316\1\317\1\320\1\321\2\13"+
    "\1\322\1\323\1\324\1\325\1\326\2\13\1\327\1\330"+
    "\1\13\1\331\1\13\1\332\1\333\2\13\1\334\1\13"+
    "\1\335\1\336\1\337\1\340\1\341\1\342\1\343\1\344"+
    "\1\345\1\346\1\347\1\13\1\350\1\351\1\352\4\13"+
    "\1\353\10\13\1\354\1\355\1\356\1\357\1\360\1\361"+
    "\3\13\1\362\1\13\1\363\1\13\1\364\1\13\1\365"+
    "\1\366\1\367\1\370\1\13\1\371\2\13\1\372\1\373"+
    "\1\13\1\374\2\13\1\375\1\376\1\377\1\u0100\3\13"+
    "\1\u0101\1\13\1\u0102\1\u0103\1\u0104\1\u0105\1\u0106\1\u0107"+
    "\1\u0108\1\u0109\1\13\1\u010a";

  private static int [] zzUnpackAction() {
    int [] result = new int[520];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u01b2\0\u02e8\0\u01b2"+
    "\0\u01b2\0\u0326\0\u0364\0\u03a2\0\u0364\0\u03e0\0\u041e\0\u045c"+
    "\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c"+
    "\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c"+
    "\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u01b2"+
    "\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u01b2\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0ba0\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u0d90\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u01b2\0\u0dce\0\u0e0c\0\u01b2\0\u01b2\0\u01b2"+
    "\0\u01b2\0\u0e4a\0\u026c\0\u0364\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132"+
    "\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322"+
    "\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u03a2"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4"+
    "\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\u1f3e\0\u03a2\0\u1f7c\0\u1fba\0\u1ff8\0\u2036"+
    "\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226"+
    "\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u01b2\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u01b2\0\u23d8\0\u2416\0\u0ba0\0\u0a6a\0\u0ae6"+
    "\0\u0b24\0\u01b2\0\u2454\0\u2492\0\u0aa8\0\u0aa8\0\u0aa8\0\u0aa8"+
    "\0\u0aa8\0\u24d0\0\u0aa8\0\u0aa8\0\u0aa8\0\u0aa8\0\u250e\0\u254c"+
    "\0\u01b2\0\u01b2\0\u258a\0\u25c8\0\u2606\0\u2644\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u2682\0\u26c0\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u26fe\0\u03a2\0\u273c\0\u277a\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee"+
    "\0\u292c\0\u03a2\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0"+
    "\0\u2ade\0\u03a2\0\u2b1c\0\u03a2\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14"+
    "\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u03a2\0\u03a2\0\u2d88"+
    "\0\u2dc6\0\u03a2\0\u03a2\0\u03a2\0\u2e04\0\u2e42\0\u2e80\0\u2ebe"+
    "\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u03a2\0\u03a2\0\u3032"+
    "\0\u03a2\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u03a2\0\u03a2\0\u3168"+
    "\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u3358\0\u03a2\0\u3396\0\u33d4"+
    "\0\u03a2\0\u03a2\0\u3412\0\u3450\0\u03a2\0\u03a2\0\u348e\0\u34cc"+
    "\0\u350a\0\u03a2\0\u03a2\0\u03a2\0\u3548\0\u03a2\0\u03a2\0\u3586"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u35c4\0\u3602"+
    "\0\u03a2\0\u03a2\0\u3640\0\u03a2\0\u367e\0\u36bc\0\u03a2\0\u03a2"+
    "\0\u36fa\0\u3738\0\u3776\0\u0aa8\0\u0aa8\0\u0aa8\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u37b4\0\u03a2\0\u37f2\0\u03a2\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u3830\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u386e"+
    "\0\u03a2\0\u38ac\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u38ea\0\u3928"+
    "\0\u03a2\0\u3966\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u39a4"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u39e2\0\u3a20"+
    "\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u03a2\0\u03a2\0\u03a2\0\u03a2"+
    "\0\u3b56\0\u3b94\0\u3bd2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u3c10"+
    "\0\u3c4e\0\u03a2\0\u03a2\0\u3c8c\0\u03a2\0\u3cca\0\u03a2\0\u03a2"+
    "\0\u3d08\0\u3d46\0\u03a2\0\u3d84\0\u03a2\0\u03a2\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u3dc2\0\u03a2\0\u03a2\0\u03a2\0\u3e00"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u03a2"+
    "\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa\0\u40e8"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u4126\0\u4164"+
    "\0\u41a2\0\u03a2\0\u41e0\0\u03a2\0\u421e\0\u03a2\0\u425c\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u429a\0\u03a2\0\u42d8\0\u4316\0\u03a2"+
    "\0\u03a2\0\u4354\0\u03a2\0\u4392\0\u43d0\0\u03a2\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u440e\0\u444c\0\u448a\0\u03a2\0\u44c8\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u4506\0\u03a2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[520];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\10\1\12\1\13\1\14"+
    "\1\10\1\15\2\14\2\10\1\14\1\10\1\14\1\10"+
    "\1\14\1\15\1\16\30\15\22\10\1\11\1\17\1\13"+
    "\1\10\1\17\1\13\46\10\1\20\1\21\20\10\1\11"+
    "\1\22\1\13\1\10\1\22\1\13\1\23\1\10\1\24"+
    "\2\23\2\10\1\23\1\10\1\25\1\10\1\23\1\24"+
    "\1\23\1\26\1\27\1\30\1\31\1\32\1\33\2\24"+
    "\1\34\1\35\1\24\1\36\1\37\1\40\1\41\1\42"+
    "\1\24\1\43\1\44\1\45\1\46\2\24\1\47\1\10"+
    "\1\21\20\10\1\11\1\50\2\10\1\50\16\10\1\51"+
    "\51\10\1\52\1\11\1\53\1\54\1\52\1\53\11\52"+
    "\1\55\1\10\1\56\54\52\1\10\1\11\1\57\1\13"+
    "\1\10\1\57\1\60\1\61\1\62\1\63\1\64\1\61"+
    "\1\65\1\66\1\61\1\67\1\70\1\71\1\72\1\63"+
    "\1\73\1\74\1\63\1\75\1\76\13\63\1\77\2\63"+
    "\1\100\1\63\1\101\3\63\1\10\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\117\1\120\1\121\1\13\1\11\1\122"+
    "\1\13\1\10\1\22\70\13\100\0\1\12\1\13\1\0"+
    "\1\12\1\13\67\0\1\13\1\0\2\13\2\0\70\13"+
    "\7\0\1\123\1\0\1\15\2\123\2\0\1\123\1\0"+
    "\1\123\1\0\1\123\1\15\1\0\30\15\30\0\1\15"+
    "\1\0\3\15\2\0\1\15\1\0\1\15\1\0\2\15"+
    "\1\0\30\15\23\0\1\17\1\13\1\0\1\17\1\13"+
    "\71\0\1\22\2\0\1\22\77\0\1\124\1\0\1\24"+
    "\2\124\2\0\1\124\1\0\1\124\1\0\1\124\1\24"+
    "\1\0\30\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\30\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\1\24\1\125\1\24\1\126\7\24\1\127\1\24"+
    "\1\130\4\24\1\131\5\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\2\24"+
    "\1\132\1\24\1\133\1\24\1\134\1\135\3\24\1\136"+
    "\1\137\1\140\1\24\1\141\1\24\1\142\1\143\1\144"+
    "\1\24\1\145\2\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\7\24\1\146"+
    "\3\24\1\147\1\150\1\151\1\152\3\24\1\153\5\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\1\154\1\155\1\156\5\24\1\157"+
    "\10\24\1\160\1\161\5\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\10\24"+
    "\1\162\2\24\1\163\1\24\1\164\1\165\1\24\1\166"+
    "\1\167\3\24\1\170\1\24\1\171\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\1\172\27\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\3\24\1\173\1\24"+
    "\1\174\5\24\1\175\1\24\1\176\12\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\14\24\1\177\5\24\1\200\1\24\1\201\3\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\4\24\1\202\3\24\1\203\2\24"+
    "\1\204\2\24\1\205\3\24\1\206\5\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\1\207\3\24\1\210\11\24\1\211\5\24\1\212"+
    "\3\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\1\24\1\213\2\24\1\214"+
    "\11\24\1\215\11\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\3\24\1\216"+
    "\13\24\1\217\1\24\1\220\6\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\1\221\3\24\1\222\6\24\1\223\5\24\1\224\6\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\4\24\1\225\11\24\1\226\3\24"+
    "\1\227\1\230\4\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\1\24\1\231"+
    "\1\232\1\24\1\233\1\234\1\235\1\236\3\24\1\237"+
    "\1\240\1\241\1\24\1\242\3\24\1\243\1\244\1\245"+
    "\1\246\1\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\1\247\3\24\1\250"+
    "\14\24\1\251\1\252\1\253\4\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\15\24\1\254\12\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\3\24\1\255"+
    "\15\24\1\256\6\24\23\0\1\50\2\0\1\50\116\0"+
    "\1\257\11\0\1\260\6\0\1\261\3\0\1\262\22\0"+
    "\1\52\2\0\2\52\1\0\11\52\3\0\54\52\2\0"+
    "\1\53\1\13\1\0\1\53\1\13\67\0\1\54\1\0"+
    "\1\13\1\54\1\52\1\0\11\54\3\13\54\54\1\55"+
    "\1\0\15\55\1\263\1\264\55\55\1\56\1\0\16\56"+
    "\1\265\1\263\54\56\2\0\1\57\1\13\1\0\1\57"+
    "\1\13\76\0\1\61\1\0\1\63\1\266\1\61\2\0"+
    "\1\61\1\0\1\266\1\0\1\266\1\63\1\0\30\63"+
    "\30\0\1\267\1\0\1\267\1\0\1\267\2\0\1\267"+
    "\6\0\6\267\52\0\1\63\1\0\3\63\2\0\1\63"+
    "\1\0\1\63\1\0\2\63\1\0\30\63\30\0\1\266"+
    "\1\0\1\63\1\266\1\270\2\0\1\270\1\0\1\266"+
    "\1\0\1\266\1\63\1\0\30\63\36\0\2\271\57\0"+
    "\1\67\1\0\15\67\1\272\1\273\55\67\7\0\1\266"+
    "\1\0\1\63\2\266\2\0\1\266\1\0\1\266\1\0"+
    "\1\266\1\63\1\0\30\63\21\0\1\71\1\0\16\71"+
    "\1\274\1\272\54\71\7\0\1\266\1\0\1\63\2\266"+
    "\2\0\1\266\1\0\1\266\1\0\1\266\1\63\1\0"+
    "\1\63\1\275\11\63\1\276\6\63\1\277\3\63\1\300"+
    "\1\63\30\0\1\63\1\0\2\63\1\301\2\0\1\301"+
    "\1\0\1\63\1\0\2\63\1\0\30\63\30\0\1\63"+
    "\1\0\3\63\2\0\1\63\1\0\1\63\1\0\2\63"+
    "\1\0\2\63\1\302\25\63\30\0\1\63\1\0\2\63"+
    "\1\303\2\0\1\303\1\0\1\63\1\0\2\63\1\0"+
    "\30\63\30\0\1\63\1\0\3\63\2\0\1\63\1\0"+
    "\1\63\1\0\2\63\1\0\2\63\1\304\25\63\30\0"+
    "\1\63\1\0\3\63\2\0\1\63\1\0\1\63\1\0"+
    "\2\63\1\0\17\63\1\305\1\63\1\306\1\307\5\63"+
    "\30\0\1\63\1\0\3\63\2\0\1\63\1\0\1\63"+
    "\1\0\2\63\1\0\22\63\1\310\5\63\111\0\1\311"+
    "\76\0\1\312\4\0\1\13\1\0\1\122\1\13\1\0"+
    "\1\22\70\13\7\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\2\24\1\313\25\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\3\24\1\314\24\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\10\24\1\315\17\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\3\24"+
    "\1\316\24\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\13\24\1\317\5\24"+
    "\1\320\6\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\2\24\1\321\4\24"+
    "\1\322\3\24\1\323\6\24\1\324\5\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\20\24\1\325\7\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\4\24"+
    "\1\326\16\24\1\327\4\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\10\24"+
    "\1\330\11\24\1\331\5\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\4\24"+
    "\1\332\5\24\1\333\3\24\1\334\3\24\1\335\1\336"+
    "\4\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\10\24\1\337\17\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\4\24\1\340\23\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\13\24\1\341\14\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\1\342\27\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\4\24\1\343\14\24\1\344\1\345"+
    "\5\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\22\24\1\346\5\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\2\24\1\347\17\24\1\350\5\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\12\24\1\351\15\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\21\24\1\352\6\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\17\24\1\353"+
    "\10\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\16\24\1\354\11\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\3\24\1\355\24\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\4\24\1\356\23\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\23\24\1\357"+
    "\4\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\2\24\1\360\1\24\1\361"+
    "\1\362\1\363\1\364\3\24\1\365\1\366\1\367\1\24"+
    "\1\370\1\24\1\371\1\24\1\372\1\24\1\373\2\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\1\24\1\374\26\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\25\24\1\375\2\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\4\24"+
    "\1\376\23\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\15\24\1\377\12\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\22\24\1\u0100\5\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\3\24\1\u0101\24\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\21\24"+
    "\1\u0102\6\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\24\24\1\u0103\3\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\4\24\1\u0104\23\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\4\24\1\u0105\23\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\6\24"+
    "\1\u0106\14\24\1\u0107\4\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\10\24"+
    "\1\u0108\17\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\15\24\1\u0109\12\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\1\24\1\u010a\1\u010b\1\u010c\1\u010d"+
    "\1\24\1\u010e\4\24\1\u010f\1\u0110\1\u0111\1\24\1\u0112"+
    "\10\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\13\24\1\u0113\14\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\2\24\1\u0114\10\24\1\u0115\14\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\17\24\1\u0116\10\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\21\24\1\u0117\6\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\14\24\1\u0118"+
    "\13\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\1\u0119\27\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\15\24\1\u011a\4\24\1\u011b\5\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\4\24\1\u011c\23\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\1\u011d"+
    "\27\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\13\24\1\u011e\5\24\1\u011f"+
    "\6\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\2\24\1\u0120\25\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\27\24\1\u0121\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\25\24"+
    "\1\u0122\2\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\13\24\1\u0123\14\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\2\24\1\u0124\25\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\6\24\1\u0125\21\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\13\24"+
    "\1\u0126\3\24\1\u0127\3\24\1\u0128\4\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\3\24\1\u0129\24\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\23\24"+
    "\1\u012a\4\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\6\24\1\u012b\1\24"+
    "\1\u012c\17\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\6\24\1\u012d\21\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\1\u012e\27\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\4\24\1\u012f\23\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\10\24\1\u0130"+
    "\17\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\6\24\1\u0131\5\24\1\u0132"+
    "\2\24\1\u0133\2\24\1\u0134\5\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\13\24\1\u0135\5\24\1\u0136\5\24\1\u0137\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\21\24\1\u0138\1\u0139\5\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\4\24\1\u013a\14\24\1\u013b\1\u013c\5\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\2\24\1\u013d\25\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\2\24"+
    "\1\u013e\17\24\1\u013f\5\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\2\24"+
    "\1\u0140\15\24\1\u0141\2\24\1\u0142\4\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\4\24\1\u0143\16\24\1\u0144\4\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\10\24\1\u0145\11\24\1\u0146\5\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\4\24\1\u0147\11\24\1\u0148\3\24\1\u0149\1\u014a"+
    "\4\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\10\24\1\u014b\17\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\4\24\1\u014c\23\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\2\24\1\u014d\10\24\1\u014e\14\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\16\24\1\u014f\11\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\1\24\1\u0150"+
    "\26\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\2\24\1\u0151\17\24\1\u0152"+
    "\5\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\1\u0153\27\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\22\24\1\u0154\5\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\27\24"+
    "\1\u0155\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\1\u0156\27\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\23\24\1\u0157\4\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\13\24"+
    "\1\u0158\14\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\13\24\1\u0159\14\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\4\24\1\u015a\23\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\4\24\1\u015b\23\24\21\0\1\55\1\0\74\55"+
    "\1\56\1\0\74\56\1\67\1\0\74\67\1\71\1\0"+
    "\74\71\7\0\1\63\1\0\3\63\2\0\1\63\1\0"+
    "\1\63\1\0\2\63\1\0\21\63\1\u015c\6\63\30\0"+
    "\1\63\1\0\3\63\2\0\1\63\1\0\1\63\1\0"+
    "\2\63\1\0\17\63\1\u015d\10\63\30\0\1\63\1\0"+
    "\3\63\2\0\1\63\1\0\1\63\1\0\2\63\1\0"+
    "\17\63\1\u015e\10\63\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\3\24\1\u015f"+
    "\24\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\1\u0160\7\24\1\u0161\7\24"+
    "\1\u0162\5\24\1\u0163\1\u0164\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\6\24"+
    "\1\u0165\21\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\10\24\1\u0166\17\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\6\24\1\u0167\21\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\21\24\1\u0168\6\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\23\24"+
    "\1\u0169\4\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\1\u016a\1\24\1\0\30\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\23\24\1\u016b\4\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\1\u016c\7\24\1\u016d\3\24\1\u016e\13\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\17\24\1\u016f\10\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\4\24"+
    "\1\u0170\23\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\6\24\1\u0171\21\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\1\u0172\27\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\2\24\1\u0173\17\24\1\u0174\5\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\20\24\1\u0175\7\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\4\24\1\u0176"+
    "\16\24\1\u0177\4\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\10\24\1\u0178"+
    "\11\24\1\u0179\5\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\4\24\1\u017a"+
    "\11\24\1\u017b\3\24\1\u017c\1\u017d\4\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\10\24\1\u017e\17\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\4\24"+
    "\1\u017f\23\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\13\24\1\u0180\14\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\1\u0181\27\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\2\24\1\u0182\17\24\1\u0183\5\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\22\24\1\u0184\1\24\1\u0185\3\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\6\24\1\u0186\21\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\13\24\1\u0187"+
    "\14\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\4\24\1\u0188\23\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\2\24\1\u0189\5\24\1\u018a\3\24\1\u018b"+
    "\4\24\1\u018c\6\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\10\24\1\u018d"+
    "\17\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\21\24\1\u018e\6\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\14\24\1\u018f\13\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\15\24\1\u0190\12\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\13\24\1\u0191"+
    "\14\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\23\24\1\u0192\4\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\20\24\1\u0193\7\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\4\24\1\u0194\16\24\1\u0195\4\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\4\24\1\u0196\16\24\1\u0197\4\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\1\u0198\7\24\1\u0199\17\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\1\24"+
    "\1\u019a\1\u019b\1\u019c\1\u019d\23\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\13\24\1\u019e\14\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\4\24\1\u019f"+
    "\23\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\1\24\1\u01a0\1\24\1\u01a1"+
    "\7\24\1\u01a2\14\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\10\24\1\u01a3"+
    "\17\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\17\24\1\u01a4\10\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\12\24\1\u01a5\15\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\23\24\1\u01a6\4\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\15\24\1\u01a7"+
    "\12\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\3\24\1\u01a8\24\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\21\24\1\u01a9\6\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\10\24\1\u01aa\17\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\4\24\1\u01ab"+
    "\23\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\22\24\1\u01ac\1\24\1\u01ad"+
    "\3\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\3\24\1\u01ae\24\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\27\24\1\u01af\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\10\24"+
    "\1\u01b0\17\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\1\u01b1\27\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\4\24\1\u01b2\23\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\15\24\1\u01b3\12\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\15\24\1\u01b4"+
    "\12\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\23\24\1\u01b5\4\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\4\24\1\u01b6\23\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\13\24\1\u01b7\5\24\1\u01b8\6\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\4\24\1\u01b9\23\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\4\24\1\u01ba"+
    "\23\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\3\24\1\u01bb\24\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\23\24\1\u01bc\4\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\17\24\1\u01bd\10\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\1\u01be\7\24"+
    "\1\u01bf\7\24\1\u01c0\6\24\1\u01c1\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\17\24\1\u01c2\10\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\23\24\1\u01c3"+
    "\4\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\17\24\1\u01c4\10\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\12\24\1\u01c5\15\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\5\24\1\u01c6\22\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\5\24\1\u01c7"+
    "\22\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\1\u01c8\27\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\15\24\1\u01c9\12\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\2\24"+
    "\1\u01ca\2\24\1\u01cb\22\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\1\u01cc\1\24\1\0"+
    "\30\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\1\u01cd\1\24\1\0\30\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\10\24\1\u01ce\17\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\10\24"+
    "\1\u01cf\17\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\5\24\1\u01d0\22\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\2\24\1\u01d1\25\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\6\24\1\u01d2\21\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\10\24"+
    "\1\u01d3\17\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\10\24\1\u01d4\17\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\24\24\1\u01d5\3\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\15\24\1\u01d6\12\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\4\24"+
    "\1\u01d7\12\24\1\u01d8\10\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\16\24"+
    "\1\u01d9\11\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\23\24\1\u01da\4\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\1\u01db\13\24\1\u01dc\2\24\1\u01dd"+
    "\1\u01de\7\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\22\24\1\u01df\5\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\6\24\1\u01e0\21\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\23\24\1\u01e1\4\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\23\24"+
    "\1\u01e2\4\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\22\24\1\u01e3\5\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\23\24\1\u01e4\4\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\10\24\1\u01e5\17\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\25\24"+
    "\1\u01e6\2\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\23\24\1\u01e7\4\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\2\24\1\u01e8\2\24\1\u01e9\22\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\2\24\1\u01ea\2\24\1\u01eb\22\24"+
    "\30\0\1\24\1\0\3\24\2\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\15\24\1\u01ec\12\24\30\0\1\24"+
    "\1\0\3\24\2\0\1\24\1\0\1\24\1\0\2\24"+
    "\1\0\5\24\1\u01ed\22\24\30\0\1\24\1\0\3\24"+
    "\2\0\1\24\1\0\1\24\1\0\2\24\1\0\21\24"+
    "\1\u01ee\6\24\30\0\1\24\1\0\3\24\2\0\1\24"+
    "\1\0\1\24\1\0\2\24\1\0\1\u01ef\27\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\15\24\1\u01f0\12\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\21\24\1\u01f1\6\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\3\24\1\u01f2"+
    "\24\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\4\24\1\u01f3\23\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\21\24\1\u01f4\6\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\23\24\1\u01f5\4\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\23\24\1\u01f6"+
    "\4\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\4\24\1\u01f7\23\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\23\24\1\u01f8\1\24\1\u01f9\2\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\4\24\1\u01fa\23\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\16\24\1\u01fb\11\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\2\24\1\u01fc"+
    "\25\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\4\24\1\u01fd\23\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\16\24\1\u01fe\11\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\13\24\1\u01ff\14\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\4\24\1\u0200"+
    "\23\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\21\24\1\u0201\6\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\21\24\1\u0202\6\24\30\0\1\24\1\0"+
    "\3\24\2\0\1\24\1\0\1\24\1\0\2\24\1\0"+
    "\23\24\1\u0203\4\24\30\0\1\24\1\0\3\24\2\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\15\24\1\u0204"+
    "\12\24\30\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\7\24\1\u0205\20\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\3\24\1\u0206\11\24\1\u0207\12\24\30\0"+
    "\1\24\1\0\3\24\2\0\1\24\1\0\1\24\1\0"+
    "\2\24\1\0\3\24\1\u0208\24\24\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17732];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\4\1\1\11\1\1\2\11\36\1\1\11"+
    "\5\1\1\11\13\1\12\11\2\1\4\11\1\1\2\0"+
    "\132\1\5\11\3\0\3\1\1\11\2\0\14\1\2\11"+
    "\u013e\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[520];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _M68kLexer() {
    this((java.io.Reader)null);
  }

  private char previousChar() {
    int loc = getTokenStart() - 1;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  private boolean afterSpaceOrComma(){
    char previousChar = previousChar();
    return Character.isSpaceChar(previousChar) || previousChar == ',';
  }

  int operandSpaceCount = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _M68kLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 267: break;
          case 2: 
            { operandSpaceCount = 0; yybegin(YYINITIAL); return LINEFEED;
            } 
            // fall through
          case 268: break;
          case 3: 
            { operandSpaceCount = 0; yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            } 
            // fall through
          case 269: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 270: break;
          case 5: 
            { operandSpaceCount = 0; yybegin(AFTER_LABEL); return ID;
            } 
            // fall through
          case 271: break;
          case 6: 
            { operandSpaceCount = 0; return DOT;
            } 
            // fall through
          case 272: break;
          case 7: 
            { yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            } 
            // fall through
          case 273: break;
          case 8: 
            { yybegin(IN_INSTRUCTION); return COLON;
            } 
            // fall through
          case 274: break;
          case 9: 
            { yybegin(IN_OPERAND); return EQ;
            } 
            // fall through
          case 275: break;
          case 10: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 276: break;
          case 11: 
            { yybegin(IN_OPERAND); return MACRO_CALL_ID;
            } 
            // fall through
          case 277: break;
          case 12: 
            { yybegin(IN_OPERAND); return BACKSLASH;
            } 
            // fall through
          case 278: break;
          case 13: 
            { operandSpaceCount = 1; yybegin(IN_OPERAND); return WHITE_SPACE;
            } 
            // fall through
          case 279: break;
          case 14: 
            { yybegin(IN_OPERAND); return STRING;
            } 
            // fall through
          case 280: break;
          case 15: 
            { operandSpaceCount++; return WHITE_SPACE;
            } 
            // fall through
          case 281: break;
          case 16: 
            { if (operandSpaceCount++ == 1) { yybegin(AFTER_OPERAND); } return WHITE_SPACE;
            } 
            // fall through
          case 282: break;
          case 17: 
            { return MUL;
            } 
            // fall through
          case 283: break;
          case 18: 
            { return DEC_NUMBER;
            } 
            // fall through
          case 284: break;
          case 19: 
            { return ID;
            } 
            // fall through
          case 285: break;
          case 20: 
            { return PERCENT;
            } 
            // fall through
          case 286: break;
          case 21: 
            { return PIPE;
            } 
            // fall through
          case 287: break;
          case 22: 
            { return STRING;
            } 
            // fall through
          case 288: break;
          case 23: 
            { return BACKSLASH;
            } 
            // fall through
          case 289: break;
          case 24: 
            { return DOT;
            } 
            // fall through
          case 290: break;
          case 25: 
            { return EQ;
            } 
            // fall through
          case 291: break;
          case 26: 
            { return COMMA;
            } 
            // fall through
          case 292: break;
          case 27: 
            { return PLUS;
            } 
            // fall through
          case 293: break;
          case 28: 
            { return MINUS;
            } 
            // fall through
          case 294: break;
          case 29: 
            { return DIV;
            } 
            // fall through
          case 295: break;
          case 30: 
            { return POW;
            } 
            // fall through
          case 296: break;
          case 31: 
            { return HASH;
            } 
            // fall through
          case 297: break;
          case 32: 
            { return TILDE;
            } 
            // fall through
          case 298: break;
          case 33: 
            { return EXCLAMATION;
            } 
            // fall through
          case 299: break;
          case 34: 
            { return AMPERSAND;
            } 
            // fall through
          case 300: break;
          case 35: 
            { return L_PAREN;
            } 
            // fall through
          case 301: break;
          case 36: 
            { return R_PAREN;
            } 
            // fall through
          case 302: break;
          case 37: 
            { return L_BRACKET;
            } 
            // fall through
          case 303: break;
          case 38: 
            { return R_BRACKET;
            } 
            // fall through
          case 304: break;
          case 39: 
            { yybegin(AFTER_INSTRUCTION); return DC;
            } 
            // fall through
          case 305: break;
          case 40: 
            { yybegin(AFTER_INSTRUCTION); return DR;
            } 
            // fall through
          case 306: break;
          case 41: 
            { yybegin(AFTER_INSTRUCTION); return DS;
            } 
            // fall through
          case 307: break;
          case 42: 
            { yybegin(IN_OPERAND); return IF;
            } 
            // fall through
          case 308: break;
          case 43: 
            { yybegin(AFTER_INSTRUCTION); return OR;
            } 
            // fall through
          case 309: break;
          case 44: 
            { yybegin(AFTER_INSTRUCTION); return RS;
            } 
            // fall through
          case 310: break;
          case 45: 
            { yybegin(AFTER_INSTRUCTION); return SF;
            } 
            // fall through
          case 311: break;
          case 46: 
            { yybegin(AFTER_INSTRUCTION); return ST;
            } 
            // fall through
          case 312: break;
          case 47: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_B;
            } 
            // fall through
          case 313: break;
          case 48: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_L;
            } 
            // fall through
          case 314: break;
          case 49: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_S;
            } 
            // fall through
          case 315: break;
          case 50: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_W;
            } 
            // fall through
          case 316: break;
          case 51: 
            { return HEX_NUMBER;
            } 
            // fall through
          case 317: break;
          case 52: 
            { return OCT_NUMBER;
            } 
            // fall through
          case 318: break;
          case 53: 
            { return BIN_NUMBER;
            } 
            // fall through
          case 319: break;
          case 54: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_B;
            } 
            // fall through
          case 320: break;
          case 55: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_L;
            } 
            // fall through
          case 321: break;
          case 56: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_S;
            } 
            // fall through
          case 322: break;
          case 57: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_W;
            } 
            // fall through
          case 323: break;
          case 58: 
            { return ADDRESS_REGISTER;
            } 
            // fall through
          case 324: break;
          case 59: 
            { return DATA_REGISTER;
            } 
            // fall through
          case 325: break;
          case 60: 
            { return PC;
            } 
            // fall through
          case 326: break;
          case 61: 
            { return SP;
            } 
            // fall through
          case 327: break;
          case 62: 
            { return SR;
            } 
            // fall through
          case 328: break;
          case 63: 
            { return SHIFT_L;
            } 
            // fall through
          case 329: break;
          case 64: 
            { return SHIFT_R;
            } 
            // fall through
          case 330: break;
          case 65: 
            { yybegin(AFTER_INSTRUCTION); return ADD;
            } 
            // fall through
          case 331: break;
          case 66: 
            { yybegin(AFTER_INSTRUCTION); return AND;
            } 
            // fall through
          case 332: break;
          case 67: 
            { yybegin(AFTER_INSTRUCTION); return ASL;
            } 
            // fall through
          case 333: break;
          case 68: 
            { yybegin(AFTER_INSTRUCTION); return ASR;
            } 
            // fall through
          case 334: break;
          case 69: 
            { yybegin(AFTER_INSTRUCTION); return BCC;
            } 
            // fall through
          case 335: break;
          case 70: 
            { yybegin(AFTER_INSTRUCTION); return BCS;
            } 
            // fall through
          case 336: break;
          case 71: 
            { yybegin(AFTER_INSTRUCTION); return BEQ;
            } 
            // fall through
          case 337: break;
          case 72: 
            { yybegin(AFTER_INSTRUCTION); return BGE;
            } 
            // fall through
          case 338: break;
          case 73: 
            { yybegin(AFTER_INSTRUCTION); return BGT;
            } 
            // fall through
          case 339: break;
          case 74: 
            { yybegin(AFTER_INSTRUCTION); return BHI;
            } 
            // fall through
          case 340: break;
          case 75: 
            { yybegin(AFTER_INSTRUCTION); return BHS;
            } 
            // fall through
          case 341: break;
          case 76: 
            { yybegin(AFTER_INSTRUCTION); return BLE;
            } 
            // fall through
          case 342: break;
          case 77: 
            { yybegin(AFTER_INSTRUCTION); return BLK;
            } 
            // fall through
          case 343: break;
          case 78: 
            { yybegin(AFTER_INSTRUCTION); return BLO;
            } 
            // fall through
          case 344: break;
          case 79: 
            { yybegin(AFTER_INSTRUCTION); return BLS;
            } 
            // fall through
          case 345: break;
          case 80: 
            { yybegin(AFTER_INSTRUCTION); return BLT;
            } 
            // fall through
          case 346: break;
          case 81: 
            { yybegin(AFTER_INSTRUCTION); return BMI;
            } 
            // fall through
          case 347: break;
          case 82: 
            { yybegin(AFTER_INSTRUCTION); return BNE;
            } 
            // fall through
          case 348: break;
          case 83: 
            { yybegin(AFTER_INSTRUCTION); return BPL;
            } 
            // fall through
          case 349: break;
          case 84: 
            { yybegin(AFTER_INSTRUCTION); return BRA;
            } 
            // fall through
          case 350: break;
          case 85: 
            { yybegin(AFTER_INSTRUCTION); return BSR;
            } 
            // fall through
          case 351: break;
          case 86: 
            { yybegin(AFTER_OPERAND); return BSS;
            } 
            // fall through
          case 352: break;
          case 87: 
            { yybegin(AFTER_INSTRUCTION); return BVC;
            } 
            // fall through
          case 353: break;
          case 88: 
            { yybegin(AFTER_INSTRUCTION); return BVS;
            } 
            // fall through
          case 354: break;
          case 89: 
            { yybegin(AFTER_INSTRUCTION); return CHK;
            } 
            // fall through
          case 355: break;
          case 90: 
            { yybegin(AFTER_INSTRUCTION); return CLR;
            } 
            // fall through
          case 356: break;
          case 91: 
            { yybegin(AFTER_INSTRUCTION); return CMP;
            } 
            // fall through
          case 357: break;
          case 92: 
            { yybegin(AFTER_INSTRUCTION); return DBF;
            } 
            // fall through
          case 358: break;
          case 93: 
            { yybegin(AFTER_INSTRUCTION); return DBT;
            } 
            // fall through
          case 359: break;
          case 94: 
            { yybegin(AFTER_INSTRUCTION); return DCB;
            } 
            // fall through
          case 360: break;
          case 95: 
            { yybegin(AFTER_OPERAND); return END;
            } 
            // fall through
          case 361: break;
          case 96: 
            { yybegin(AFTER_INSTRUCTION); return EOR;
            } 
            // fall through
          case 362: break;
          case 97: 
            { yybegin(IN_OPERAND); return EQU;
            } 
            // fall through
          case 363: break;
          case 98: 
            { yybegin(AFTER_INSTRUCTION); return EXG;
            } 
            // fall through
          case 364: break;
          case 99: 
            { yybegin(AFTER_INSTRUCTION); return EXT;
            } 
            // fall through
          case 365: break;
          case 100: 
            { yybegin(IN_OPERAND); return IFB;
            } 
            // fall through
          case 366: break;
          case 101: 
            { yybegin(IN_OPERAND); return IFC;
            } 
            // fall through
          case 367: break;
          case 102: 
            { yybegin(IN_OPERAND); return IFD;
            } 
            // fall through
          case 368: break;
          case 103: 
            { yybegin(AFTER_INSTRUCTION); return JMP;
            } 
            // fall through
          case 369: break;
          case 104: 
            { yybegin(IN_OPERAND); return JSR;
            } 
            // fall through
          case 370: break;
          case 105: 
            { yybegin(AFTER_INSTRUCTION); return LEA;
            } 
            // fall through
          case 371: break;
          case 106: 
            { yybegin(AFTER_INSTRUCTION); return LSL;
            } 
            // fall through
          case 372: break;
          case 107: 
            { yybegin(AFTER_INSTRUCTION); return LSR;
            } 
            // fall through
          case 373: break;
          case 108: 
            { yybegin(AFTER_INSTRUCTION); return NEG;
            } 
            // fall through
          case 374: break;
          case 109: 
            { yybegin(AFTER_OPERAND); return NOP;
            } 
            // fall through
          case 375: break;
          case 110: 
            { yybegin(AFTER_INSTRUCTION); return NOT;
            } 
            // fall through
          case 376: break;
          case 111: 
            { yybegin(AFTER_OPERAND); return ODD;
            } 
            // fall through
          case 377: break;
          case 112: 
            { yybegin(IN_OPERAND); return OPT;
            } 
            // fall through
          case 378: break;
          case 113: 
            { yybegin(IN_OPERAND); return ORG;
            } 
            // fall through
          case 379: break;
          case 114: 
            { yybegin(AFTER_INSTRUCTION); return ORI;
            } 
            // fall through
          case 380: break;
          case 115: 
            { yybegin(AFTER_INSTRUCTION); return PEA;
            } 
            // fall through
          case 381: break;
          case 116: 
            { yybegin(IN_OPERAND); return REG;
            } 
            // fall through
          case 382: break;
          case 117: 
            { yybegin(AFTER_OPERAND); return REM;
            } 
            // fall through
          case 383: break;
          case 118: 
            { yybegin(AFTER_INSTRUCTION); return ROL;
            } 
            // fall through
          case 384: break;
          case 119: 
            { yybegin(AFTER_INSTRUCTION); return ROR;
            } 
            // fall through
          case 385: break;
          case 120: 
            { yybegin(AFTER_OPERAND); return RTE;
            } 
            // fall through
          case 386: break;
          case 121: 
            { yybegin(AFTER_OPERAND); return RTR;
            } 
            // fall through
          case 387: break;
          case 122: 
            { yybegin(AFTER_OPERAND); return RTS;
            } 
            // fall through
          case 388: break;
          case 123: 
            { yybegin(AFTER_INSTRUCTION); return SCC;
            } 
            // fall through
          case 389: break;
          case 124: 
            { yybegin(AFTER_INSTRUCTION); return SCS;
            } 
            // fall through
          case 390: break;
          case 125: 
            { yybegin(AFTER_INSTRUCTION); return SEQ;
            } 
            // fall through
          case 391: break;
          case 126: 
            { yybegin(IN_OPERAND); return SET;
            } 
            // fall through
          case 392: break;
          case 127: 
            { yybegin(AFTER_INSTRUCTION); return SGE;
            } 
            // fall through
          case 393: break;
          case 128: 
            { yybegin(AFTER_INSTRUCTION); return SGT;
            } 
            // fall through
          case 394: break;
          case 129: 
            { yybegin(AFTER_INSTRUCTION); return SHI;
            } 
            // fall through
          case 395: break;
          case 130: 
            { yybegin(AFTER_INSTRUCTION); return SHS;
            } 
            // fall through
          case 396: break;
          case 131: 
            { yybegin(AFTER_INSTRUCTION); return SLE;
            } 
            // fall through
          case 397: break;
          case 132: 
            { yybegin(AFTER_INSTRUCTION); return SLO;
            } 
            // fall through
          case 398: break;
          case 133: 
            { yybegin(AFTER_INSTRUCTION); return SLS;
            } 
            // fall through
          case 399: break;
          case 134: 
            { yybegin(AFTER_INSTRUCTION); return SLT;
            } 
            // fall through
          case 400: break;
          case 135: 
            { yybegin(AFTER_INSTRUCTION); return SMI;
            } 
            // fall through
          case 401: break;
          case 136: 
            { yybegin(AFTER_INSTRUCTION); return SNE;
            } 
            // fall through
          case 402: break;
          case 137: 
            { yybegin(IN_OPERAND); return SPC;
            } 
            // fall through
          case 403: break;
          case 138: 
            { yybegin(AFTER_INSTRUCTION); return SPL;
            } 
            // fall through
          case 404: break;
          case 139: 
            { yybegin(AFTER_INSTRUCTION); return SUB;
            } 
            // fall through
          case 405: break;
          case 140: 
            { yybegin(AFTER_INSTRUCTION); return SVC;
            } 
            // fall through
          case 406: break;
          case 141: 
            { yybegin(AFTER_INSTRUCTION); return SVS;
            } 
            // fall through
          case 407: break;
          case 142: 
            { yybegin(AFTER_INSTRUCTION); return TAS;
            } 
            // fall through
          case 408: break;
          case 143: 
            { yybegin(AFTER_INSTRUCTION); return TST;
            } 
            // fall through
          case 409: break;
          case 144: 
            { yybegin(STRING_DIRECTIVE); return TTL;
            } 
            // fall through
          case 410: break;
          case 145: 
            { return CCR;
            } 
            // fall through
          case 411: break;
          case 146: 
            { return SSP;
            } 
            // fall through
          case 412: break;
          case 147: 
            { return USP;
            } 
            // fall through
          case 413: break;
          case 148: 
            { yybegin(AFTER_INSTRUCTION); return ABCD;
            } 
            // fall through
          case 414: break;
          case 149: 
            { yybegin(AFTER_INSTRUCTION); return ADDA;
            } 
            // fall through
          case 415: break;
          case 150: 
            { yybegin(AFTER_INSTRUCTION); return ADDI;
            } 
            // fall through
          case 416: break;
          case 151: 
            { yybegin(AFTER_INSTRUCTION); return ADDQ;
            } 
            // fall through
          case 417: break;
          case 152: 
            { yybegin(AFTER_INSTRUCTION); return ADDX;
            } 
            // fall through
          case 418: break;
          case 153: 
            { yybegin(AFTER_INSTRUCTION); return ANDI;
            } 
            // fall through
          case 419: break;
          case 154: 
            { yybegin(AFTER_INSTRUCTION); return BCHG;
            } 
            // fall through
          case 420: break;
          case 155: 
            { yybegin(AFTER_INSTRUCTION); return BCLR;
            } 
            // fall through
          case 421: break;
          case 156: 
            { yybegin(AFTER_INSTRUCTION); return BSET;
            } 
            // fall through
          case 422: break;
          case 157: 
            { yybegin(AFTER_INSTRUCTION); return BTST;
            } 
            // fall through
          case 423: break;
          case 158: 
            { yybegin(AFTER_INSTRUCTION); return CMPA;
            } 
            // fall through
          case 424: break;
          case 159: 
            { yybegin(AFTER_INSTRUCTION); return CMPI;
            } 
            // fall through
          case 425: break;
          case 160: 
            { yybegin(AFTER_INSTRUCTION); return CMPM;
            } 
            // fall through
          case 426: break;
          case 161: 
            { yybegin(IN_OPERAND); return CNOP;
            } 
            // fall through
          case 427: break;
          case 162: 
            { yybegin(AFTER_OPERAND); return CODE;
            } 
            // fall through
          case 428: break;
          case 163: 
            { yybegin(AFTER_OPERAND); return CSEG;
            } 
            // fall through
          case 429: break;
          case 164: 
            { yybegin(AFTER_OPERAND); return DATA;
            } 
            // fall through
          case 430: break;
          case 165: 
            { yybegin(AFTER_INSTRUCTION); return DBCC;
            } 
            // fall through
          case 431: break;
          case 166: 
            { yybegin(AFTER_INSTRUCTION); return DBCS;
            } 
            // fall through
          case 432: break;
          case 167: 
            { yybegin(AFTER_INSTRUCTION); return DBEQ;
            } 
            // fall through
          case 433: break;
          case 168: 
            { yybegin(AFTER_INSTRUCTION); return DBGE;
            } 
            // fall through
          case 434: break;
          case 169: 
            { yybegin(AFTER_INSTRUCTION); return DBGT;
            } 
            // fall through
          case 435: break;
          case 170: 
            { yybegin(AFTER_INSTRUCTION); return DBHI;
            } 
            // fall through
          case 436: break;
          case 171: 
            { yybegin(AFTER_INSTRUCTION); return DBHS;
            } 
            // fall through
          case 437: break;
          case 172: 
            { yybegin(AFTER_INSTRUCTION); return DBLE;
            } 
            // fall through
          case 438: break;
          case 173: 
            { yybegin(AFTER_INSTRUCTION); return DBLO;
            } 
            // fall through
          case 439: break;
          case 174: 
            { yybegin(AFTER_INSTRUCTION); return DBLS;
            } 
            // fall through
          case 440: break;
          case 175: 
            { yybegin(AFTER_INSTRUCTION); return DBLT;
            } 
            // fall through
          case 441: break;
          case 176: 
            { yybegin(AFTER_INSTRUCTION); return DBMI;
            } 
            // fall through
          case 442: break;
          case 177: 
            { yybegin(AFTER_INSTRUCTION); return DBNE;
            } 
            // fall through
          case 443: break;
          case 178: 
            { yybegin(AFTER_INSTRUCTION); return DBPL;
            } 
            // fall through
          case 444: break;
          case 179: 
            { yybegin(AFTER_INSTRUCTION); return DBRA;
            } 
            // fall through
          case 445: break;
          case 180: 
            { yybegin(AFTER_INSTRUCTION); return DBVC;
            } 
            // fall through
          case 446: break;
          case 181: 
            { yybegin(AFTER_INSTRUCTION); return DBVS;
            } 
            // fall through
          case 447: break;
          case 182: 
            { yybegin(AFTER_INSTRUCTION); return DIVS;
            } 
            // fall through
          case 448: break;
          case 183: 
            { yybegin(AFTER_INSTRUCTION); return DIVU;
            } 
            // fall through
          case 449: break;
          case 184: 
            { yybegin(AFTER_INSTRUCTION); return DSEG;
            } 
            // fall through
          case 450: break;
          case 185: 
            { yybegin(AFTER_OPERAND); return ELSE;
            } 
            // fall through
          case 451: break;
          case 186: 
            { yybegin(AFTER_OPERAND); return ENDC;
            } 
            // fall through
          case 452: break;
          case 187: 
            { yybegin(AFTER_OPERAND); return ENDM;
            } 
            // fall through
          case 453: break;
          case 188: 
            { yybegin(AFTER_OPERAND); return ENDR;
            } 
            // fall through
          case 454: break;
          case 189: 
            { yybegin(AFTER_INSTRUCTION); return EORI;
            } 
            // fall through
          case 455: break;
          case 190: 
            { yybegin(IN_OPERAND); return EQUR;
            } 
            // fall through
          case 456: break;
          case 191: 
            { yybegin(AFTER_OPERAND); return EREM;
            } 
            // fall through
          case 457: break;
          case 192: 
            { yybegin(AFTER_OPERAND); return EVEN;
            } 
            // fall through
          case 458: break;
          case 193: 
            { yybegin(AFTER_OPERAND); return FAIL;
            } 
            // fall through
          case 459: break;
          case 194: 
            { yybegin(STRING_DIRECTIVE); return IDNT;
            } 
            // fall through
          case 460: break;
          case 195: 
            { yybegin(IN_OPERAND); return IFEQ;
            } 
            // fall through
          case 461: break;
          case 196: 
            { yybegin(IN_OPERAND); return IFGE;
            } 
            // fall through
          case 462: break;
          case 197: 
            { yybegin(IN_OPERAND); return IFGT;
            } 
            // fall through
          case 463: break;
          case 198: 
            { yybegin(IN_OPERAND); return IFLE;
            } 
            // fall through
          case 464: break;
          case 199: 
            { yybegin(IN_OPERAND); return IFLT;
            } 
            // fall through
          case 465: break;
          case 200: 
            { yybegin(IN_OPERAND); return IFMI;
            } 
            // fall through
          case 466: break;
          case 201: 
            { yybegin(IN_OPERAND); return IFNB;
            } 
            // fall through
          case 467: break;
          case 202: 
            { yybegin(IN_OPERAND); return IFNC;
            } 
            // fall through
          case 468: break;
          case 203: 
            { yybegin(IN_OPERAND); return IFND;
            } 
            // fall through
          case 469: break;
          case 204: 
            { yybegin(IN_OPERAND); return IFNE;
            } 
            // fall through
          case 470: break;
          case 205: 
            { yybegin(IN_OPERAND); return IFPL;
            } 
            // fall through
          case 471: break;
          case 206: 
            { yybegin(IN_OPERAND); return LINK;
            } 
            // fall through
          case 472: break;
          case 207: 
            { yybegin(AFTER_OPERAND); return LIST;
            } 
            // fall through
          case 473: break;
          case 208: 
            { yybegin(IN_OPERAND); return LLEN;
            } 
            // fall through
          case 474: break;
          case 209: 
            { yybegin(IN_OPERAND); return LOAD;
            } 
            // fall through
          case 475: break;
          case 210: 
            { yybegin(AFTER_INSTRUCTION); return MOVE;
            } 
            // fall through
          case 476: break;
          case 211: 
            { yybegin(AFTER_INSTRUCTION); return MULS;
            } 
            // fall through
          case 477: break;
          case 212: 
            { yybegin(AFTER_INSTRUCTION); return MULU;
            } 
            // fall through
          case 478: break;
          case 213: 
            { yybegin(AFTER_INSTRUCTION); return NBCD;
            } 
            // fall through
          case 479: break;
          case 214: 
            { yybegin(AFTER_INSTRUCTION); return NEGX;
            } 
            // fall through
          case 480: break;
          case 215: 
            { yybegin(AFTER_OPERAND); return PAGE;
            } 
            // fall through
          case 481: break;
          case 216: 
            { yybegin(IN_OPERAND); return PLEN;
            } 
            // fall through
          case 482: break;
          case 217: 
            { yybegin(IN_OPERAND); return REPT;
            } 
            // fall through
          case 483: break;
          case 218: 
            { yybegin(AFTER_INSTRUCTION); return ROXL;
            } 
            // fall through
          case 484: break;
          case 219: 
            { yybegin(AFTER_INSTRUCTION); return ROXR;
            } 
            // fall through
          case 485: break;
          case 220: 
            { yybegin(AFTER_INSTRUCTION); return SBCD;
            } 
            // fall through
          case 486: break;
          case 221: 
            { yybegin(IN_OPERAND); return STOP;
            } 
            // fall through
          case 487: break;
          case 222: 
            { yybegin(AFTER_INSTRUCTION); return SUBA;
            } 
            // fall through
          case 488: break;
          case 223: 
            { yybegin(AFTER_INSTRUCTION); return SUBI;
            } 
            // fall through
          case 489: break;
          case 224: 
            { yybegin(AFTER_INSTRUCTION); return SUBQ;
            } 
            // fall through
          case 490: break;
          case 225: 
            { yybegin(AFTER_INSTRUCTION); return SUBX;
            } 
            // fall through
          case 491: break;
          case 226: 
            { yybegin(AFTER_INSTRUCTION); return SWAP;
            } 
            // fall through
          case 492: break;
          case 227: 
            { yybegin(AFTER_OPERAND); return TEXT;
            } 
            // fall through
          case 493: break;
          case 228: 
            { yybegin(IN_OPERAND); return TRAP;
            } 
            // fall through
          case 494: break;
          case 229: 
            { yybegin(IN_OPERAND); return UNLK;
            } 
            // fall through
          case 495: break;
          case 230: 
            { yybegin(IN_OPERAND); return XDEF;
            } 
            // fall through
          case 496: break;
          case 231: 
            { yybegin(IN_OPERAND); return XREF;
            } 
            // fall through
          case 497: break;
          case 232: 
            { yybegin(IN_OPERAND); return ALIGN;
            } 
            // fall through
          case 498: break;
          case 233: 
            { yybegin(AFTER_OPERAND); return BSS_C;
            } 
            // fall through
          case 499: break;
          case 234: 
            { yybegin(AFTER_OPERAND); return BSS_F;
            } 
            // fall through
          case 500: break;
          case 235: 
            { yybegin(AFTER_OPERAND); return ENDIF;
            } 
            // fall through
          case 501: break;
          case 236: 
            { yybegin(AFTER_OPERAND); return MACRO;
            } 
            // fall through
          case 502: break;
          case 237: 
            { yybegin(AFTER_OPERAND); return MEXIT;
            } 
            // fall through
          case 503: break;
          case 238: 
            { yybegin(AFTER_INSTRUCTION); return MOVEA;
            } 
            // fall through
          case 504: break;
          case 239: 
            { yybegin(AFTER_INSTRUCTION); return MOVEM;
            } 
            // fall through
          case 505: break;
          case 240: 
            { yybegin(AFTER_INSTRUCTION); return MOVEP;
            } 
            // fall through
          case 506: break;
          case 241: 
            { yybegin(AFTER_INSTRUCTION); return MOVEQ;
            } 
            // fall through
          case 507: break;
          case 242: 
            { yybegin(AFTER_OPERAND); return RESET;
            } 
            // fall through
          case 508: break;
          case 243: 
            { yybegin(IN_OPERAND); return RSSET;
            } 
            // fall through
          case 509: break;
          case 244: 
            { yybegin(AFTER_OPERAND); return TRAPV;
            } 
            // fall through
          case 510: break;
          case 245: 
            { yybegin(AFTER_OPERAND); return CODE_C;
            } 
            // fall through
          case 511: break;
          case 246: 
            { yybegin(AFTER_OPERAND); return CODE_F;
            } 
            // fall through
          case 512: break;
          case 247: 
            { yybegin(AFTER_OPERAND); return DATA_C;
            } 
            // fall through
          case 513: break;
          case 248: 
            { yybegin(AFTER_OPERAND); return DATA_F;
            } 
            // fall through
          case 514: break;
          case 249: 
            { yybegin(AFTER_OPERAND); return ELSEIF;
            } 
            // fall through
          case 515: break;
          case 250: 
            { yybegin(STRING_DIRECTIVE); return INCBIN;
            } 
            // fall through
          case 516: break;
          case 251: 
            { yybegin(STRING_DIRECTIVE); return INCDIR;
            } 
            // fall through
          case 517: break;
          case 252: 
            { yybegin(AFTER_OPERAND); return INLINE;
            } 
            // fall through
          case 518: break;
          case 253: 
            { yybegin(AFTER_OPERAND); return NOLIST;
            } 
            // fall through
          case 519: break;
          case 254: 
            { yybegin(AFTER_OPERAND); return NOPAGE;
            } 
            // fall through
          case 520: break;
          case 255: 
            { yybegin(STRING_DIRECTIVE); return PRINTT;
            } 
            // fall through
          case 521: break;
          case 256: 
            { yybegin(IN_OPERAND); return PRINTV;
            } 
            // fall through
          case 522: break;
          case 257: 
            { yybegin(AFTER_OPERAND); return EINLINE;
            } 
            // fall through
          case 523: break;
          case 258: 
            { yybegin(AFTER_OPERAND); return ILLEGAL;
            } 
            // fall through
          case 524: break;
          case 259: 
            { yybegin(STRING_DIRECTIVE); return INCLUDE;
            } 
            // fall through
          case 525: break;
          case 260: 
            { yybegin(IN_OPERAND); return JUMPERR;
            } 
            // fall through
          case 526: break;
          case 261: 
            { yybegin(IN_OPERAND); return JUMPPTR;
            } 
            // fall through
          case 527: break;
          case 262: 
            { yybegin(AFTER_OPERAND); return RSRESET;
            } 
            // fall through
          case 528: break;
          case 263: 
            { yybegin(IN_OPERAND); return SECTION;
            } 
            // fall through
          case 529: break;
          case 264: 
            { yybegin(IN_OPERAND); return ADDWATCH;
            } 
            // fall through
          case 530: break;
          case 265: 
            { yybegin(IN_OPERAND); return IFMACROD;
            } 
            // fall through
          case 531: break;
          case 266: 
            { yybegin(IN_OPERAND); return IFMACROND;
            } 
            // fall through
          case 532: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
