/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * Copyright 2021 The Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.yanncebron.m68kplugin.lexer;

import com.intellij.psi.tree.IElementType;

import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.yanncebron.m68kplugin.lang.psi.M68kTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/yann/idea-ultimate/m68kplugin/src/grammar/_M68kLexer.flex</tt>
 */
public class _M68kLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AFTER_LABEL = 2;
  public static final int IN_INSTRUCTION = 4;
  public static final int AFTER_INSTRUCTION = 6;
  public static final int STRING_DIRECTIVE = 8;
  public static final int IN_OPERAND = 10;
  public static final int AFTER_OPERAND = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15232 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\13\21\1\72\1\73\4\21\1\74\3\21\1\75\2\21\1\76\1\77\7\21"+
    "\123\26\1\100\7\26\1\101\1\102\12\26\1\103\24\21\1\26\1\104\u0702\21");

  /* The ZZ_CMAP_Y table has 4416 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\10\1\13\1\14\4\0"+
    "\1\15\1\16\1\15\2\17\1\20\3\17\1\20\71\17\1\21\1\17\1\22\1\0\1\23\1\24\12"+
    "\0\1\16\5\0\1\25\1\26\1\27\1\30\2\17\1\31\11\17\1\32\21\17\1\22\1\33\24\17"+
    "\1\34\3\17\1\20\1\35\1\34\4\17\5\0\1\17\1\32\1\36\1\0\3\17\2\37\3\0\1\17\1"+
    "\37\7\17\1\34\1\40\1\41\14\17\1\42\1\23\1\34\1\43\1\40\1\44\2\0\6\17\1\0\1"+
    "\45\14\17\1\22\1\0\1\40\1\46\3\17\1\37\1\47\1\15\3\17\1\33\1\17\1\23\2\0\3"+
    "\17\1\50\10\0\2\17\1\25\1\51\2\0\1\52\1\17\1\53\1\22\11\17\1\42\1\17\1\25"+
    "\1\43\1\17\1\54\1\40\1\34\1\17\1\42\1\55\1\56\2\17\1\57\1\60\1\61\1\55\1\62"+
    "\1\63\1\64\1\54\1\40\1\22\1\0\1\65\1\66\1\56\2\17\1\57\1\67\1\21\1\66\1\70"+
    "\1\35\1\71\1\72\1\40\1\51\1\0\1\65\1\32\1\31\2\17\1\57\1\73\1\61\1\32\1\74"+
    "\1\50\1\0\1\54\1\40\1\0\1\35\1\65\1\55\1\56\2\17\1\57\1\73\1\61\1\55\1\70"+
    "\1\75\1\64\1\54\1\40\1\35\1\0\1\76\1\77\1\100\1\101\1\102\1\77\1\17\1\21\1"+
    "\77\1\103\1\104\1\0\1\72\1\40\2\0\1\42\1\25\1\57\2\17\1\57\1\17\1\61\1\25"+
    "\1\103\1\105\1\37\1\54\1\40\2\0\1\42\1\25\1\57\2\17\1\57\1\42\1\61\1\25\1"+
    "\103\1\105\1\27\1\54\1\40\1\106\1\0\1\65\1\25\1\57\4\17\1\107\1\25\1\110\1"+
    "\52\1\63\1\54\1\40\1\0\1\33\1\76\1\17\1\20\1\33\2\17\1\31\1\111\1\20\1\63"+
    "\1\112\1\17\1\72\1\40\1\113\1\0\1\34\6\17\1\37\1\20\1\16\1\40\1\114\4\0\1"+
    "\115\1\116\1\52\1\34\1\117\1\76\1\17\1\120\1\112\1\16\1\40\1\121\4\0\1\50"+
    "\3\0\1\40\1\114\2\0\1\17\1\34\3\17\1\23\1\34\1\17\1\22\2\17\1\34\3\17\1\23"+
    "\10\0\6\17\1\20\1\56\1\40\1\114\2\17\1\107\1\122\2\17\1\20\1\27\1\40\1\123"+
    "\4\17\1\32\1\16\5\17\1\124\51\17\1\100\1\20\1\100\5\17\1\100\4\17\1\100\1"+
    "\20\1\100\1\17\1\20\7\17\1\100\10\17\1\66\4\0\2\17\2\0\12\17\2\51\1\34\114"+
    "\17\1\55\2\17\1\34\2\17\1\37\11\17\1\77\1\17\1\50\1\17\1\25\1\125\1\0\2\17"+
    "\1\125\1\0\2\17\1\125\1\0\1\17\1\25\1\126\1\0\6\17\1\127\2\17\1\50\1\63\1"+
    "\130\1\40\1\114\4\0\1\40\1\114\13\17\1\0\5\17\1\37\10\17\1\51\1\0\3\17\1\20"+
    "\1\17\1\125\1\17\1\50\1\72\1\40\3\17\1\51\1\23\1\0\5\17\1\125\3\17\1\22\1"+
    "\40\1\114\4\0\3\17\1\125\7\17\1\20\1\34\1\17\1\23\1\0\1\40\1\114\1\40\1\114"+
    "\1\63\13\0\6\17\1\42\1\17\1\42\1\125\1\40\1\114\4\0\5\17\1\131\1\40\1\46\4"+
    "\17\1\32\1\17\1\22\1\0\6\17\1\51\1\0\1\40\1\132\1\40\1\46\3\17\1\51\1\17\1"+
    "\50\13\0\1\133\1\134\1\0\30\17\4\0\1\63\1\17\1\23\1\0\42\17\2\51\4\17\2\51"+
    "\1\17\1\135\3\17\1\51\6\17\1\25\1\112\1\136\1\23\1\127\1\125\1\17\1\23\1\136"+
    "\1\23\5\0\1\137\10\0\1\35\1\63\2\0\1\17\1\23\14\0\1\140\1\33\1\111\1\141\1"+
    "\24\1\142\1\17\1\131\1\45\1\143\2\0\5\17\1\50\144\0\1\75\6\17\1\22\42\0\5"+
    "\17\1\20\5\17\1\20\20\17\1\23\1\144\1\113\1\0\4\17\1\32\1\16\7\17\1\63\2\0"+
    "\2\17\1\20\1\0\10\20\4\17\5\0\1\63\72\0\1\45\3\0\1\34\1\22\1\141\1\23\1\34"+
    "\11\17\1\20\1\45\1\34\12\17\1\124\1\45\4\17\1\51\1\34\12\17\1\20\2\0\3\17"+
    "\1\37\6\0\170\17\1\51\11\0\72\17\1\51\5\0\21\17\1\23\10\0\5\17\1\51\41\17"+
    "\1\23\2\17\1\40\1\145\2\0\5\17\1\20\1\52\1\146\16\17\4\0\1\63\1\17\1\33\14"+
    "\17\1\56\3\17\1\20\1\17\7\0\1\63\1\17\1\147\1\124\3\17\3\0\6\17\1\125\1\0"+
    "\10\17\1\111\1\0\1\40\1\114\2\0\1\33\1\150\1\40\1\46\3\17\1\37\4\17\1\37\1"+
    "\0\3\17\1\23\6\17\1\124\1\17\1\0\1\63\1\40\1\114\1\25\1\17\1\40\1\151\6\17"+
    "\1\20\1\0\1\17\1\51\1\40\1\114\2\17\1\20\1\152\7\17\1\20\1\153\2\0\1\154\2"+
    "\17\1\155\1\0\3\156\1\0\2\20\5\17\1\124\1\51\1\0\17\17\1\37\1\40\1\114\64"+
    "\17\1\125\1\0\2\17\1\20\1\53\5\17\1\125\40\0\55\17\1\51\15\17\1\22\4\0\1\20"+
    "\1\0\1\53\1\45\1\17\1\57\1\20\1\112\1\157\15\17\1\22\3\0\1\53\54\17\1\51\2"+
    "\0\10\17\1\33\6\17\5\0\1\17\1\125\16\0\1\25\20\17\1\23\2\0\1\40\1\114\1\160"+
    "\2\17\1\37\1\160\2\17\1\37\1\75\12\17\1\20\3\33\1\161\4\0\1\17\1\42\2\17\1"+
    "\20\2\17\1\162\1\17\1\51\1\17\1\51\4\0\17\17\1\37\10\0\6\17\1\23\41\0\3\17"+
    "\1\23\6\17\1\50\5\0\4\17\2\0\3\17\1\37\5\17\1\37\3\17\1\51\4\17\1\125\1\17"+
    "\1\141\5\0\23\17\1\51\1\40\1\114\4\17\1\125\4\17\1\125\5\17\1\0\6\17\1\125"+
    "\23\0\46\17\1\20\1\0\2\17\1\51\1\0\1\17\23\0\1\51\1\57\4\17\1\32\1\163\2\17"+
    "\1\51\1\0\2\17\1\20\1\0\3\17\1\20\10\0\2\17\1\164\1\0\2\17\1\51\1\0\3\17\1"+
    "\22\10\0\7\17\1\75\10\0\1\134\1\52\1\42\1\34\2\17\1\125\5\0\3\17\1\23\3\17"+
    "\1\23\4\0\1\17\1\34\2\17\1\23\3\0\6\17\1\51\1\0\2\17\1\51\1\0\2\17\1\37\1"+
    "\0\2\17\1\22\15\0\11\17\1\50\6\0\6\17\1\37\1\0\6\17\1\37\41\0\10\17\1\51\3"+
    "\0\1\72\1\40\2\0\1\33\6\17\1\50\2\0\3\17\1\50\1\40\1\114\6\17\1\165\1\40\2"+
    "\0\4\17\1\166\1\0\10\17\1\167\1\0\1\40\1\170\4\0\2\17\1\31\3\17\1\55\1\27"+
    "\10\0\1\20\1\142\1\17\1\32\1\17\1\50\7\17\1\50\1\40\1\114\1\42\1\55\1\56\2"+
    "\17\1\57\1\73\1\61\1\55\1\70\1\104\1\45\1\125\23\0\10\17\1\147\1\37\1\40\1"+
    "\114\4\0\10\17\1\171\1\0\1\40\1\114\24\0\6\17\1\51\1\20\3\0\1\51\4\0\7\17"+
    "\1\20\1\172\1\0\1\40\1\114\4\0\6\17\1\51\1\0\1\40\1\114\6\0\3\17\1\61\1\17"+
    "\1\37\1\40\1\114\54\0\10\17\1\40\1\114\1\0\1\63\70\0\7\17\1\50\40\0\1\17\1"+
    "\57\4\17\2\20\1\50\1\0\1\40\1\114\2\0\1\33\3\17\1\33\2\17\1\34\1\20\51\0\63"+
    "\17\1\22\14\0\15\17\1\20\2\0\30\17\1\125\27\0\5\17\1\20\72\0\10\17\1\20\67"+
    "\0\7\17\1\50\3\17\1\20\1\40\1\114\14\0\3\17\1\51\2\0\6\17\1\20\1\0\1\125\1"+
    "\0\1\40\1\114\1\53\2\17\1\45\2\17\56\0\10\17\1\23\1\0\5\17\1\20\2\0\1\53\1"+
    "\17\10\0\1\50\3\0\75\17\1\23\2\0\36\17\1\37\41\0\1\22\77\0\15\17\1\37\1\17"+
    "\1\23\1\17\1\50\1\17\1\143\54\0\12\17\1\25\10\17\1\25\1\173\1\133\1\17\1\174"+
    "\1\42\7\17\1\32\1\107\2\25\3\17\1\175\1\112\1\33\1\57\51\17\1\51\3\17\1\57"+
    "\2\17\1\124\3\17\1\124\2\17\1\25\3\17\1\25\2\17\1\20\3\17\1\20\3\17\1\57\3"+
    "\17\1\57\2\17\1\124\1\54\6\40\1\20\2\17\1\56\1\157\1\37\72\0\30\17\1\23\7"+
    "\0\10\17\1\146\1\0\1\40\1\114\24\0\1\42\3\17\1\115\1\34\1\124\1\176\1\140"+
    "\1\177\1\115\1\135\1\115\2\124\1\71\1\17\1\31\1\17\1\125\1\65\1\31\1\17\1"+
    "\125\116\0\3\17\1\22\3\17\1\22\3\17\1\22\16\0\32\17\1\20\5\0\106\17\1\23\1"+
    "\0\33\17\1\51\120\17\1\22\53\0\3\17\1\51\74\0");

  /* The ZZ_CMAP_A table has 1024 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\4\1\5\1\1\2\0\1\2\1\66\1\21\1\64\1\10\1\14\1\67\1\17\1\72"+
    "\1\73\1\6\1\60\1\57\1\61\1\24\1\62\2\16\6\13\2\7\1\55\1\3\1\70\1\56\1\71\1"+
    "\0\1\12\1\31\1\26\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\30\1\43\1"+
    "\44\1\45\1\46\1\47\1\50\1\25\1\51\1\52\1\53\1\27\1\54\2\23\1\74\1\20\1\75"+
    "\1\63\1\22\1\0\1\31\1\26\1\32\1\33\1\34\1\35\1\36\1\54\2\23\1\0\1\15\1\0\1"+
    "\65\6\0\1\4\4\0\1\23\12\0\1\23\2\0\17\23\1\0\2\23\4\0\4\23\6\0\5\23\7\0\1"+
    "\23\1\0\1\23\1\0\5\23\1\0\2\23\2\0\4\23\1\0\1\23\6\0\1\23\1\0\3\23\1\0\1\23"+
    "\1\0\4\23\1\0\13\23\1\0\1\23\2\0\6\23\1\0\7\23\1\0\1\23\7\0\2\23\1\0\2\23"+
    "\1\0\4\23\5\0\12\7\4\0\6\23\1\0\4\23\4\0\3\23\2\7\3\23\2\0\1\23\5\0\3\23\2"+
    "\7\6\23\4\0\2\23\2\0\1\23\7\0\6\23\6\0\4\23\3\0\11\23\2\0\2\7\5\23\2\0\2\23"+
    "\2\0\6\23\1\0\7\23\1\0\1\23\3\0\4\23\3\0\4\23\2\0\2\23\1\0\1\23\10\0\1\23"+
    "\4\0\2\23\1\0\1\23\1\0\3\23\1\0\6\23\4\0\2\23\1\0\2\23\1\0\2\23\1\0\1\23\2"+
    "\0\2\23\4\0\4\23\1\0\1\23\7\0\2\7\1\23\1\0\2\23\1\0\5\23\1\0\2\23\11\0\2\23"+
    "\2\0\2\23\1\0\6\23\3\0\3\23\1\0\4\23\3\0\2\23\1\0\1\23\1\0\2\23\3\0\2\23\3"+
    "\0\1\23\1\0\3\23\3\0\1\23\6\0\1\23\5\0\2\23\2\0\2\23\5\0\3\23\2\0\4\23\1\0"+
    "\3\23\1\0\1\23\1\0\4\23\1\0\1\23\2\0\5\23\1\0\1\23\3\0\2\23\4\0\2\7\7\0\2"+
    "\23\1\0\1\23\2\0\2\23\1\0\1\23\2\0\1\23\3\0\3\23\1\0\1\23\1\0\3\23\1\0\3\23"+
    "\2\0\2\7\2\0\5\23\5\0\2\23\2\7\2\0\2\23\2\0\3\23\1\0\10\23\4\0\1\23\1\0\2"+
    "\23\4\0\4\23\2\0\2\23\4\0\1\23\3\0\2\23\2\0\4\23\2\7\3\0\3\23\1\0\4\23\1\0"+
    "\6\23\1\0\2\23\2\0\1\23\1\0\1\23\1\0\1\23\1\0\1\23\2\0\3\23\1\0\2\23\2\4\10"+
    "\0\1\23\4\0\1\23\1\0\5\23\2\0\1\23\1\0\4\23\1\0\3\23\4\0\1\23\4\0\4\23\1\0"+
    "\2\7\2\23\4\0\4\23\3\0\3\23\1\0\3\23\1\0\1\23\3\0\1\23\1\0\1\23\2\0\2\7\5"+
    "\23\3\0\1\23\3\0\3\23\1\0\1\23\10\0\3\23\4\0\4\23\3\0\6\23\1\0\2\23\1\0\2"+
    "\23\1\0\2\23\1\0\6\11\1\23\2\0\3\23\3\0\3\23\1\0\2\23\1\0\2\23\3\0\1\23\2"+
    "\0\4\23\1\0\2\23\2\0\3\23\3\0\2\7\3\23\3\0\1\23\2\0\4\23\3\0\2\7\1\23\1\0"+
    "\1\23\3\0\2\23\2\0\2\23\1\0\2\23\3\0\1\23\5\0\1\23\2\0\2\23\1\0\2\23\1\0\1"+
    "\23\1\0\5\23\1\0\4\23\2\0\1\23\1\0\1\23\5\0\1\23\1\0\1\23\1\0\3\23");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\1\1\14\1\15"+
    "\22\14\1\16\1\1\1\17\1\20\1\4\2\17\1\21"+
    "\1\22\1\23\1\1\1\24\1\1\1\25\1\26\1\27"+
    "\1\30\1\27\1\1\1\31\6\24\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\2\1"+
    "\1\44\1\45\1\46\1\47\1\13\2\0\6\14\1\50"+
    "\5\14\1\51\36\14\1\52\2\14\1\53\1\14\1\54"+
    "\14\14\1\55\15\14\1\56\6\14\1\57\13\14\1\60"+
    "\1\61\1\62\1\63\1\17\3\0\1\64\1\24\1\65"+
    "\1\66\1\67\1\27\2\0\1\70\1\71\1\72\1\73"+
    "\1\24\1\74\1\75\1\76\1\24\1\77\1\100\1\24"+
    "\1\101\1\102\1\103\1\104\2\14\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\14\1\113\1\114\1\14\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\1\124\2\14"+
    "\1\125\1\126\1\127\1\130\1\14\1\131\1\132\1\133"+
    "\1\134\1\135\1\136\1\137\1\14\1\140\1\14\1\141"+
    "\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151"+
    "\1\14\1\152\1\153\1\154\1\155\1\14\1\156\3\14"+
    "\1\157\1\160\2\14\1\161\1\162\1\14\1\163\1\164"+
    "\1\165\7\14\1\166\6\14\1\167\3\14\1\170\5\14"+
    "\1\171\1\172\1\173\2\14\1\174\1\175\1\14\1\176"+
    "\2\14\1\177\1\14\1\200\1\201\10\14\1\202\1\203"+
    "\7\14\1\204\1\14\1\205\1\206\1\207\1\210\1\14"+
    "\1\211\1\212\2\14\1\213\7\14\1\214\1\215\1\14"+
    "\1\216\1\217\1\14\1\220\1\221\1\222\1\223\1\224"+
    "\2\14\1\225\3\14\1\226\2\24\1\227\1\24\1\230"+
    "\1\231\1\232\10\14\2\50\7\14\2\51\1\233\1\14"+
    "\1\234\1\235\1\236\1\237\3\14\1\240\7\14\1\241"+
    "\1\14\1\242\11\14\1\243\4\14\1\244\1\14\1\245"+
    "\1\246\1\247\2\14\1\250\3\14\1\251\1\252\1\253"+
    "\1\254\1\14\1\255\1\256\3\14\1\257\1\260\1\261"+
    "\1\262\1\263\2\52\1\264\1\265\1\266\1\267\1\270"+
    "\1\271\1\272\1\273\1\14\1\274\1\275\1\276\1\277"+
    "\1\300\1\301\1\302\1\303\1\14\1\304\1\305\1\306"+
    "\2\53\1\14\1\307\1\310\2\54\1\311\1\312\1\14"+
    "\1\313\1\14\1\314\1\315\1\14\1\316\1\317\1\320"+
    "\1\321\2\14\1\322\1\14\1\323\1\324\1\325\1\326"+
    "\1\327\1\330\1\14\1\331\1\332\1\333\1\334\1\335"+
    "\1\336\11\14\1\337\1\340\1\341\1\342\1\343\1\14"+
    "\1\344\3\14\2\56\1\14\1\345\1\346\4\14\2\57"+
    "\3\14\1\347\2\14\1\350\1\351\2\14\1\352\1\353"+
    "\1\354\1\355\1\356\2\357\2\360\2\361\2\14\2\105"+
    "\2\106\2\107\2\110\2\111\2\112\1\14\2\113\2\115"+
    "\2\116\2\117\2\120\2\121\2\122\2\123\2\125\4\14"+
    "\2\126\2\127\1\362\1\363\1\14\2\131\2\132\2\133"+
    "\2\134\2\135\2\136\2\137\1\14\2\140\1\14\2\141"+
    "\2\142\2\143\2\144\2\145\2\146\2\147\2\150\2\151"+
    "\1\14\2\152\2\153\2\154\2\155\2\156\1\14\2\157"+
    "\2\160\1\14\1\364\2\161\5\14\2\162\1\14\2\163"+
    "\2\164\2\165\14\14\2\166\10\14\2\167\3\14\2\170"+
    "\4\14\1\365\2\172\1\14\2\174\2\175\7\14\2\203"+
    "\2\14\1\366\1\367\1\14\1\370\1\371\1\372\1\373"+
    "\3\14\1\0\2\204\3\14\2\206\2\212\2\213\3\14"+
    "\1\374\1\14\1\375\2\216\2\217\2\14\2\223\2\224"+
    "\1\376\2\231\2\232\1\14\2\234\2\235\2\236\2\237"+
    "\2\240\2\241\2\242\2\243\2\246\2\250\1\14\2\251"+
    "\2\252\2\253\2\254\2\255\2\257\2\260\2\261\1\377"+
    "\1\u0100\2\264\2\265\2\266\2\267\2\270\2\271\2\272"+
    "\2\273\2\274\2\275\2\276\2\277\2\300\2\301\2\302"+
    "\2\303\2\304\2\305\1\u0101\1\u0102\2\307\2\310\1\u0103"+
    "\1\14\2\316\2\14\1\u0104\1\u0105\1\14\1\u0106\3\14"+
    "\2\337\4\14\2\340\2\341\2\342\1\0\2\344\1\u0107"+
    "\1\u0108\1\14\1\u0109\1\u010a\2\14\2\350\2\351\1\u010b"+
    "\1\14\1\u010c\1\u010d\1\14\1\u010e\1\14\1\u010f\1\u0110"+
    "\2\370\2\371\2\372\2\373\1\0\2\14\1\u0111\1\u0112"+
    "\1\u0113\1\14\1\u0114\1\0\2\14\1\u0115\1\u0116\2\14"+
    "\1\u0117\1\14\1\u0118";

  private static int [] zzUnpackAction() {
    int [] result = new int[931];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u01b2\0\u02e8\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u0326\0\u0364\0\u03a2\0\u0364\0\u03e0\0\u041e"+
    "\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e"+
    "\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe"+
    "\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee"+
    "\0\u01b2\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0bde\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u0d90\0\u0dce\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u0e0c\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u01b2\0\u0e4a\0\u0e88\0\u0ec6\0\u01b2\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u0f04\0\u026c\0\u0364\0\u01b2\0\u0f42\0\u0f80"+
    "\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550"+
    "\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740"+
    "\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930"+
    "\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20"+
    "\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10"+
    "\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00"+
    "\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0"+
    "\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0"+
    "\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0"+
    "\0\u250e\0\u254c\0\u258a\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u01b2"+
    "\0\u25c8\0\u2606\0\u0bde\0\u0a6a\0\u01b2\0\u0ae6\0\u0b24\0\u01b2"+
    "\0\u01b2\0\u2644\0\u2682\0\u0aa8\0\u0aa8\0\u0aa8\0\u0aa8\0\u26c0"+
    "\0\u26fe\0\u0aa8\0\u273c\0\u277a\0\u27b8\0\u0aa8\0\u27f6\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u01b2\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c"+
    "\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u03a2\0\u2aa0\0\u2ade"+
    "\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u03a2\0\u2c90"+
    "\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80"+
    "\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070"+
    "\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260"+
    "\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450"+
    "\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640"+
    "\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830"+
    "\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u3a20"+
    "\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u3bd2\0\u3c10"+
    "\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\u3e00"+
    "\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36\0\u03a2\0\u3f74\0\u3fb2"+
    "\0\u03a2\0\u3ff0\0\u03a2\0\u03a2\0\u402e\0\u406c\0\u40aa\0\u40e8"+
    "\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u03a2\0\u421e\0\u425c\0\u429a"+
    "\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a"+
    "\0\u44c8\0\u03a2\0\u03a2\0\u4506\0\u03a2\0\u4544\0\u4582\0\u45c0"+
    "\0\u45fe\0\u463c\0\u467a\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0"+
    "\0\u03a2\0\u03a2\0\u47ee\0\u482c\0\u486a\0\u48a8\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u48e6\0\u4924\0\u4962\0\u49a0\0\u03a2\0\u49de\0\u4a1c"+
    "\0\u4a5a\0\u0aa8\0\u4a98\0\u4ad6\0\u0aa8\0\u4b14\0\u0aa8\0\u4b52"+
    "\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04\0\u4d42"+
    "\0\u4d80\0\u01b2\0\u03a2\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78\0\u4eb6"+
    "\0\u4ef4\0\u4f32\0\u01b2\0\u03a2\0\u03a2\0\u4f70\0\u4fae\0\u4fec"+
    "\0\u502a\0\u5068\0\u50a6\0\u50e4\0\u5122\0\u5160\0\u519e\0\u51dc"+
    "\0\u521a\0\u5258\0\u5296\0\u52d4\0\u5312\0\u5350\0\u538e\0\u53cc"+
    "\0\u540a\0\u5448\0\u5486\0\u54c4\0\u5502\0\u5540\0\u557e\0\u55bc"+
    "\0\u55fa\0\u5638\0\u5676\0\u56b4\0\u56f2\0\u5730\0\u03a2\0\u576e"+
    "\0\u03a2\0\u57ac\0\u03a2\0\u57ea\0\u5828\0\u5866\0\u58a4\0\u58e2"+
    "\0\u5920\0\u595e\0\u599c\0\u59da\0\u5a18\0\u5a56\0\u5a94\0\u03a2"+
    "\0\u5ad2\0\u5b10\0\u5b4e\0\u5b8c\0\u5bca\0\u5c08\0\u03a2\0\u5c46"+
    "\0\u01b2\0\u03a2\0\u5c84\0\u5cc2\0\u5d00\0\u5d3e\0\u5d7c\0\u5dba"+
    "\0\u5df8\0\u5e36\0\u5e74\0\u5eb2\0\u5ef0\0\u5f2e\0\u5f6c\0\u5faa"+
    "\0\u5fe8\0\u6026\0\u6064\0\u60a2\0\u60e0\0\u611e\0\u615c\0\u01b2"+
    "\0\u03a2\0\u619a\0\u61d8\0\u6216\0\u01b2\0\u03a2\0\u6254\0\u03a2"+
    "\0\u6292\0\u03a2\0\u62d0\0\u03a2\0\u03a2\0\u630e\0\u634c\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u638a\0\u63c8\0\u03a2\0\u6406\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u6444\0\u03a2\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u03a2\0\u03a2\0\u6482\0\u64c0\0\u64fe\0\u653c\0\u657a"+
    "\0\u65b8\0\u65f6\0\u6634\0\u6672\0\u66b0\0\u66ee\0\u672c\0\u676a"+
    "\0\u67a8\0\u67e6\0\u6824\0\u6862\0\u68a0\0\u68de\0\u01b2\0\u03a2"+
    "\0\u691c\0\u03a2\0\u03a2\0\u695a\0\u6998\0\u69d6\0\u6a14\0\u01b2"+
    "\0\u03a2\0\u6a52\0\u6a90\0\u6ace\0\u03a2\0\u6b0c\0\u6b4a\0\u6b88"+
    "\0\u6bc6\0\u6c04\0\u6c42\0\u03a2\0\u6c80\0\u03a2\0\u03a2\0\u03a2"+
    "\0\u01b2\0\u0aa8\0\u01b2\0\u0aa8\0\u01b2\0\u0aa8\0\u6cbe\0\u6cfc"+
    "\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2"+
    "\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u6d3a\0\u01b2\0\u03a2\0\u01b2"+
    "\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2"+
    "\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u6d78"+
    "\0\u6db6\0\u6df4\0\u6e32\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u03a2"+
    "\0\u03a2\0\u6e70\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2"+
    "\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2"+
    "\0\u6eae\0\u01b2\0\u03a2\0\u6eec\0\u01b2\0\u03a2\0\u01b2\0\u03a2"+
    "\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2"+
    "\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u6f2a\0\u01b2"+
    "\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2"+
    "\0\u03a2\0\u6f68\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u6fa6\0\u03a2"+
    "\0\u01b2\0\u03a2\0\u6fe4\0\u7022\0\u7060\0\u709e\0\u70dc\0\u01b2"+
    "\0\u03a2\0\u711a\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2"+
    "\0\u7158\0\u7196\0\u71d4\0\u7212\0\u7250\0\u728e\0\u72cc\0\u730a"+
    "\0\u7348\0\u7386\0\u73c4\0\u7402\0\u01b2\0\u03a2\0\u7440\0\u747e"+
    "\0\u74bc\0\u74fa\0\u7538\0\u7576\0\u75b4\0\u75f2\0\u01b2\0\u03a2"+
    "\0\u7630\0\u766e\0\u76ac\0\u01b2\0\u03a2\0\u76ea\0\u7728\0\u7766"+
    "\0\u77a4\0\u03a2\0\u01b2\0\u03a2\0\u77e2\0\u01b2\0\u03a2\0\u01b2"+
    "\0\u03a2\0\u7820\0\u785e\0\u789c\0\u78da\0\u7918\0\u7956\0\u7994"+
    "\0\u01b2\0\u03a2\0\u79d2\0\u7a10\0\u03a2\0\u03a2\0\u7a4e\0\u7a8c"+
    "\0\u7aca\0\u7b08\0\u7b46\0\u7b84\0\u7bc2\0\u7c00\0\u7c3e\0\u01b2"+
    "\0\u03a2\0\u7c7c\0\u7cba\0\u7cf8\0\u01b2\0\u03a2\0\u01b2\0\u03a2"+
    "\0\u01b2\0\u03a2\0\u7d36\0\u7d74\0\u7db2\0\u03a2\0\u7df0\0\u03a2"+
    "\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u7e2e\0\u7e6c\0\u01b2\0\u03a2"+
    "\0\u01b2\0\u03a2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u7eaa"+
    "\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2"+
    "\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2"+
    "\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u7ee8\0\u01b2\0\u03a2\0\u01b2"+
    "\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2"+
    "\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u03a2\0\u03a2\0\u01b2"+
    "\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2"+
    "\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2"+
    "\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2"+
    "\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2"+
    "\0\u03a2\0\u01b2\0\u03a2\0\u03a2\0\u03a2\0\u01b2\0\u03a2\0\u01b2"+
    "\0\u03a2\0\u03a2\0\u7f26\0\u01b2\0\u03a2\0\u7f64\0\u7fa2\0\u03a2"+
    "\0\u03a2\0\u7fe0\0\u03a2\0\u801e\0\u805c\0\u809a\0\u01b2\0\u03a2"+
    "\0\u80d8\0\u8116\0\u8154\0\u8192\0\u01b2\0\u03a2\0\u01b2\0\u03a2"+
    "\0\u01b2\0\u03a2\0\u81d0\0\u01b2\0\u03a2\0\u03a2\0\u03a2\0\u820e"+
    "\0\u03a2\0\u03a2\0\u824c\0\u828a\0\u01b2\0\u03a2\0\u01b2\0\u03a2"+
    "\0\u03a2\0\u82c8\0\u03a2\0\u03a2\0\u8306\0\u03a2\0\u8344\0\u03a2"+
    "\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2\0\u03a2\0\u01b2"+
    "\0\u03a2\0\u8382\0\u83c0\0\u83fe\0\u03a2\0\u03a2\0\u03a2\0\u843c"+
    "\0\u03a2\0\u847a\0\u84b8\0\u84f6\0\u03a2\0\u01b2\0\u8534\0\u8572"+
    "\0\u03a2\0\u85b0\0\u03a2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[931];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\10\1\12\1\13\1\14"+
    "\1\10\1\15\2\14\2\10\1\14\1\10\1\14\1\10"+
    "\1\14\1\15\1\16\30\15\22\10\1\11\1\17\1\13"+
    "\1\10\1\17\1\13\1\10\1\20\44\10\1\21\1\22"+
    "\20\10\1\11\1\23\1\13\1\10\1\23\1\13\1\24"+
    "\1\10\1\25\2\24\2\10\1\24\1\10\1\26\1\10"+
    "\1\24\1\25\1\24\1\27\1\30\1\25\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\25\1\37\1\40\1\25"+
    "\1\41\1\42\1\43\1\44\1\25\1\45\1\46\1\47"+
    "\1\25\1\50\1\10\1\22\20\10\1\11\1\51\2\10"+
    "\1\51\16\10\1\52\51\10\1\53\1\11\1\54\1\55"+
    "\1\53\1\54\11\53\1\56\1\10\1\57\54\53\1\10"+
    "\1\11\1\60\1\13\1\10\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\62\1\66\1\67\1\62\1\70\1\71"+
    "\1\72\1\73\1\64\1\74\1\75\3\64\1\76\1\77"+
    "\1\100\12\64\1\101\3\64\1\102\2\64\1\10\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\13"+
    "\1\11\1\123\1\13\1\10\1\23\70\13\100\0\1\12"+
    "\1\13\1\0\1\12\1\13\67\0\1\13\1\0\2\13"+
    "\2\0\70\13\7\0\1\124\1\0\1\15\2\124\2\0"+
    "\1\124\1\0\1\124\1\0\1\124\1\15\1\0\30\15"+
    "\30\0\1\15\1\0\3\15\2\0\1\15\1\0\1\15"+
    "\1\0\33\15\23\0\1\17\1\13\1\0\1\17\1\13"+
    "\71\0\1\23\2\0\1\23\77\0\1\125\1\0\1\25"+
    "\2\125\2\0\1\125\1\0\1\125\1\0\1\125\1\25"+
    "\1\0\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\33\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\4\25\1\127\1\130"+
    "\1\131\1\25\1\132\1\25\1\133\1\134\1\135\1\136"+
    "\3\25\1\137\1\140\1\25\1\141\2\25\1\142\1\143"+
    "\1\144\1\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\3\25\1\145\2\25\1\146\1\25"+
    "\1\147\1\25\1\150\1\25\1\151\1\152\3\25\1\153"+
    "\1\154\1\25\1\155\1\25\1\156\1\157\1\25\1\160"+
    "\1\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\3\25\1\161\2\25\1\162\3\25\1\163"+
    "\3\25\1\164\4\25\1\165\7\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\3\25\1\166"+
    "\1\167\1\25\1\170\2\25\1\171\10\25\1\172\10\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\3\25\1\173\2\25\1\174\6\25\1\175\3\25"+
    "\1\176\1\177\1\200\7\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\3\25\1\201\1\202"+
    "\2\25\1\203\1\204\5\25\1\205\7\25\1\206\4\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\6\25\1\207\1\25\1\210\5\25\1\211\3\25"+
    "\1\212\1\213\1\25\1\214\1\215\2\25\1\216\1\217"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\7\25\1\220\23\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\6\25\1\221\2\25"+
    "\1\222\1\25\1\223\6\25\1\224\10\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\225\15\25\1\226\6\25\1\227\2\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\7\25"+
    "\1\230\2\25\1\231\10\25\1\232\4\25\1\233\2\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\4\25\1\234\5\25\1\235\10\25\1\236\7\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\11\25\1\237\12\25\1\240\1\25\1\241\4\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\6\25\1\242\1\243\2\25\1\244\10\25\1\245"+
    "\2\25\1\246\1\25\1\247\2\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\3\25\1\250"+
    "\6\25\1\251\10\25\1\252\3\25\1\253\3\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\3\25\1\254\3\25\1\255\2\25\1\256\13\25\1\257"+
    "\1\260\3\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\22\25\1\261\10\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\11\25"+
    "\1\262\14\25\1\263\4\25\23\0\1\51\2\0\1\51"+
    "\115\0\1\264\1\265\1\266\1\267\45\0\1\53\2\0"+
    "\2\53\1\0\11\53\3\0\54\53\2\0\1\54\1\13"+
    "\1\0\1\54\1\13\67\0\1\55\1\0\1\13\1\55"+
    "\1\53\1\0\11\55\3\13\54\55\1\56\1\0\15\56"+
    "\1\270\1\271\55\56\1\57\1\0\16\57\1\272\1\270"+
    "\54\57\2\0\1\60\1\13\1\0\1\60\1\13\76\0"+
    "\1\62\1\0\1\64\1\273\1\62\2\0\1\62\1\0"+
    "\1\273\1\0\1\273\1\64\1\0\30\64\30\0\1\274"+
    "\1\0\1\274\1\0\1\274\2\0\1\274\7\0\1\274"+
    "\2\0\5\274\47\0\1\64\1\275\3\64\2\0\1\64"+
    "\1\0\1\64\1\0\33\64\30\0\1\273\1\0\1\64"+
    "\1\273\1\276\2\0\1\276\1\0\1\273\1\0\1\273"+
    "\1\64\1\0\30\64\36\0\2\277\74\0\1\300\60\0"+
    "\1\70\1\0\15\70\1\301\1\302\55\70\7\0\1\273"+
    "\1\0\1\64\2\273\2\0\1\273\1\0\1\273\1\0"+
    "\1\273\1\64\1\0\30\64\21\0\1\72\1\0\16\72"+
    "\1\303\1\301\54\72\7\0\1\273\1\0\1\64\2\273"+
    "\2\0\1\273\1\0\1\273\1\0\1\273\1\64\1\0"+
    "\1\304\1\305\1\306\1\307\24\64\30\0\1\64\1\275"+
    "\3\64\2\0\1\64\1\0\1\64\1\0\3\64\1\310"+
    "\20\64\1\311\1\64\1\312\4\64\30\0\1\64\1\275"+
    "\2\64\1\313\2\0\1\313\1\0\1\64\1\0\33\64"+
    "\30\0\1\64\1\275\3\64\2\0\1\64\1\0\1\64"+
    "\1\0\10\64\1\314\22\64\30\0\1\64\1\275\2\64"+
    "\1\315\2\0\1\315\1\0\1\64\1\0\33\64\30\0"+
    "\1\64\1\275\3\64\2\0\1\64\1\0\1\64\1\0"+
    "\10\64\1\316\22\64\30\0\1\64\1\275\3\64\2\0"+
    "\1\64\1\0\1\64\1\0\3\64\1\317\27\64\103\0"+
    "\1\320\102\0\1\321\76\0\1\322\76\0\1\323\4\0"+
    "\1\13\1\0\1\123\1\13\1\0\1\23\70\13\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\10\25\1\324\22\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\7\25\1\325\23\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\3\25\1\326\6\25\1\327\10\25\1\330\3\25\1\331"+
    "\3\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\3\25\1\332\4\25\1\333\22\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\10\25\1\334\14\25\1\335\1\25\1\336\3\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\337\30\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\12\25\1\340\14\25\1\341"+
    "\3\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\3\25\1\342\12\25\1\343\14\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\16\25\1\344\14\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\12\25\1\345\20\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\6\25\1\346\1\25\1\347\22\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\350"+
    "\20\25\1\351\7\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\4\25\1\352\26\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\3\25\1\353\4\25\1\354\22\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\3\25\1\355"+
    "\6\25\1\356\13\25\1\357\4\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\3\25\1\360"+
    "\6\25\1\361\5\25\1\362\2\25\1\363\3\25\1\364"+
    "\3\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\3\25\1\365\2\25\1\366\1\25\1\367"+
    "\4\25\1\370\15\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\25\25\1\371\5\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\12\25\1\372\14\25\1\373\3\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\3\25\1\374"+
    "\12\25\1\375\14\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\16\25\1\376\14\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\12\25\1\377\20\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\6\25\1\u0100\24\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\7\25\1\u0101\23\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\3\25\1\u0102\27\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\3\25\1\u0103\4\25\1\u0104\22\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\6\25\1\u0105"+
    "\17\25\1\u0106\4\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\12\25\1\u0107\20\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\7\25\1\u0108\23\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\3\25\1\u0109\16\25\1\u010a"+
    "\10\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\7\25\1\u010b\23\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\6\25\1\u010c"+
    "\17\25\1\u010d\4\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\10\25\1\u010e\22\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\16\25\1\u010f\14\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\11\25\1\u0110\21\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\11\25\1\u0111\21\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\12\25\1\u0112\20\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\26\25\1\u0113\4\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\20\25\1\u0114\12\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\24\25\1\u0115\6\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\23\25\1\u0116\7\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\11\25\1\u0117\21\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u0118\7\25\1\u0119"+
    "\20\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\6\25\1\u011a\1\25\1\u011b\1\25\1\u011c"+
    "\1\u011d\1\u011e\1\u011f\3\25\1\u0120\1\u0121\1\25\1\u0122"+
    "\1\25\1\u0123\1\u0124\1\25\1\u0125\1\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\27\25"+
    "\1\u0126\3\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u0127\1\25\1\u0128\26\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\31\25\1\u0129\1\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u012a\30\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\3\25\1\u012b\27\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\15\25\1\u012c\15\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\22\25\1\u012d\10\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\11\25\1\u012e\21\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\26\25\1\u012f\4\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\30\25\1\u0130\2\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\12\25\1\u0131\20\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\12\25\1\u0132\20\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\14\25\1\u0133\12\25\1\u0134\3\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\16\25"+
    "\1\u0135\7\25\1\u0136\4\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\6\25\1\u0137\24\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\22\25\1\u0138\10\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\4\25\1\u0139\1\25"+
    "\1\u013a\1\25\1\u013b\1\u013c\1\u013d\1\25\1\u013e\4\25"+
    "\1\u013f\1\u0140\1\25\1\u0141\6\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\6\25\1\u0142"+
    "\1\25\1\u0143\5\25\1\u0144\14\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\26\25\1\u0145"+
    "\4\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\24\25\1\u0146\6\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\21\25\1\u0147"+
    "\11\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\10\25\1\u0148\22\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\32\25\1\u0149"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\31\25\1\u014a\1\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\6\25\1\u014b\24\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\10\25\1\u014c\22\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\7\25\1\u014d\4\25"+
    "\1\u014e\16\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\6\25\1\u014f\15\25\1\u0150\2\25"+
    "\1\u0151\3\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\11\25\1\u0152\21\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\27\25"+
    "\1\u0153\3\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u0154\11\25\1\u0155\1\25"+
    "\1\u0156\14\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\12\25\1\u0157\20\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\14\25"+
    "\1\u0158\16\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\7\25\1\u0159\23\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\24\25"+
    "\1\u015a\6\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\16\25\1\u015b\14\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\u015c\27\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u015d\1\u015e\22\25\1\u015f"+
    "\4\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\3\25\1\u0160\10\25\1\u0161\4\25\1\u0162"+
    "\2\25\1\u0163\6\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\6\25\1\u0164\17\25\1\u0165"+
    "\3\25\1\u0166\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\3\25\1\u0167\6\25\1\u0168\13\25"+
    "\1\u0169\4\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\27\25\1\u016a\3\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\u016b\27\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\32\25\1\u016c\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\7\25\1\u016d"+
    "\23\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\6\25\1\u016e\24\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\6\25\1\u016f"+
    "\24\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\12\25\1\u0170\20\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\12\25\1\u0171"+
    "\20\25\21\0\1\56\1\0\74\56\1\57\1\0\74\57"+
    "\1\70\1\0\74\70\1\72\1\0\74\72\7\0\1\64"+
    "\1\275\3\64\2\0\1\64\1\0\1\64\1\0\24\64"+
    "\1\u0172\6\64\30\0\1\64\1\275\3\64\2\0\1\64"+
    "\1\0\1\64\1\0\2\64\1\u0173\30\64\30\0\1\64"+
    "\1\275\3\64\2\0\1\64\1\0\1\64\1\0\2\64"+
    "\1\u0174\30\64\30\0\1\64\1\275\3\64\2\0\1\64"+
    "\1\0\1\64\1\0\26\64\1\u0175\4\64\30\0\1\64"+
    "\1\275\3\64\2\0\1\64\1\0\1\64\1\0\2\64"+
    "\1\u0176\30\64\30\0\1\64\1\275\3\64\2\0\1\64"+
    "\1\0\1\64\1\0\24\64\1\u0177\6\64\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\11\25"+
    "\1\u0178\21\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\24\25\1\u0179\6\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u017a\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u017b\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u017c\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u017d\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u017e\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u017f\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\27\25"+
    "\1\u0180\3\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u0181\30\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u0182\1\25\1\0\1\25\1\0"+
    "\3\25\4\u0183\24\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u0184\30\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u0185\30\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u0186\30\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u0187\30\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u0188\30\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u0189\30\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u018a\30\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u018b\1\25\1\0\1\25"+
    "\1\0\3\25\4\u018c\24\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\24\25\1\u018d\6\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u018e\4\25\1\u018f\6\25\1\u0190\6\25"+
    "\1\u0191\4\25\1\u0192\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u0193\30\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u0194\30\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\1\u0195\32\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\27\25"+
    "\1\u0196\3\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u0197\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u0198\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u0199\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u019a\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u019b\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u019c\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u019d\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\26\25"+
    "\1\u019e\4\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u019f\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\14\25"+
    "\1\u01a0\16\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01a1\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01a2\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01a3\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01a4\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01a5\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01a6\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01a7\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01a8\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01a9\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\27\25"+
    "\1\u01aa\3\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01ab\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01ac\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01ad\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01ae\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\22\25\1\u01af\10\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01b0\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\27\25\1\u01b1\3\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\20\25"+
    "\1\u01b2\12\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\11\25\1\u01b3\21\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01b4\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01b5\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\11\25"+
    "\1\u01b6\21\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\14\25\1\u01b7\16\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01b8\2\25\1\u01b9\1\25\1\u01ba\6\25\1\u01bb\6\25"+
    "\1\u01bc\4\25\1\u01bd\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u01be\13\25\1\u01bf"+
    "\14\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\14\25\1\u01c0\16\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u01c1"+
    "\30\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u01c2\30\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u01c3"+
    "\4\25\1\u01c4\6\25\1\u01c5\2\25\1\u01c6\11\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\24\25\1\u01c7\6\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\12\25\1\u01c8\20\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u01c9\1\25\1\0\1\25"+
    "\1\0\3\25\4\u01ca\24\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\14\25\1\u01cb\16\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\3\25\1\u01cc\6\25\1\u01cd\10\25\1\u01ce\3\25"+
    "\1\u01cf\3\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\3\25\1\u01d0\4\25\1\u01d1\22\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\25\25\1\u01d2\5\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u01d3\30\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\12\25\1\u01d4\14\25\1\u01d5\3\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\u01d6\12\25\1\u01d7\14\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\16\25\1\u01d8\14\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\12\25\1\u01d9\20\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\6\25\1\u01da\24\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\7\25\1\u01db\23\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u01dc\30\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\3\25\1\u01dd\4\25\1\u01de\22\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\7\25"+
    "\1\u01df\23\25\30\0\1\25\1\126\3\25\1\0\1\u01e0"+
    "\1\25\1\0\1\25\1\0\3\25\4\u01e1\24\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u01e2\30\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\3\25\1\u01e3\24\25\1\u01e4"+
    "\2\25\30\0\1\25\1\126\3\25\1\0\1\u01e5\1\25"+
    "\1\0\1\25\1\0\3\25\4\u01e6\24\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\12\25"+
    "\1\u01e7\20\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\23\25\1\u01e8\7\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\6\25"+
    "\1\u01e9\24\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\10\25\1\u01ea\5\25\1\u01eb\2\25"+
    "\1\u01ec\4\25\1\u01ed\4\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u01ee\13\25"+
    "\1\u01ef\14\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\26\25\1\u01f0\4\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\21\25"+
    "\1\u01f1\11\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\22\25\1\u01f2\10\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01f3\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01f4\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\6\25"+
    "\1\u01f5\24\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\12\25\1\u01f6\20\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\27\25"+
    "\1\u01f7\3\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\12\25\1\u01f8\14\25\1\u01f9\3\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\25\25\1\u01fa\5\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\12\25\1\u01fb\14\25"+
    "\1\u01fc\3\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\7\25\1\u01fd\6\25\1\u01fe\14\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\4\25\1\u01ff\3\25\1\u0200\1\u0201\1\u0202\20\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\6\25\1\u0203\24\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\16\25\1\u0204\14\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\4\25\1\u0205\1\25\1\u0206\2\25\1\u0207\21\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\27\25\1\u0208\3\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u0209\30\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\24\25\1\u020a\6\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\26\25\1\u020b\4\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\16\25\1\u020c\14\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\12\25\1\u020d\20\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\3\25\1\u020e\24\25\1\u020f\2\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\11\25"+
    "\1\u0210\21\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\26\25\1\u0211\4\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u0212\27\25\1\u0213\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\16\25\1\u0214\14\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\7\25\1\u0215\23\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u0216\30\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u0217\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0218\24\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u0219\30\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\22\25\1\u021a\10\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\12\25\1\u021b\20\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u021c\30\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\3\25\1\u021d\27\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\22\25\1\u021e\10\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\15\25\1\u021f\15\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u0220\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0221\24\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\12\25\1\u0222"+
    "\20\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\12\25\1\u0223\20\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\12\25\1\u0224"+
    "\20\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\27\25\1\u0225\3\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u0226"+
    "\30\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u0227\30\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\6\25\1\u0228"+
    "\17\25\1\u0229\4\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u022a\30\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u022b\30\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\27\25\1\u022c\3\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\24\25\1\u022d\6\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\20\25\1\u022e\12\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\13\25\1\u022f\17\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\13\25\1\u0230\17\25\30\0"+
    "\1\64\1\275\3\64\1\0\1\u0231\1\64\1\0\1\64"+
    "\1\0\3\64\4\u0232\24\64\30\0\1\64\1\275\3\64"+
    "\1\0\1\u0233\1\64\1\0\1\64\1\0\3\64\4\u0234"+
    "\24\64\30\0\1\64\1\275\3\64\1\0\1\u0235\1\64"+
    "\1\0\1\64\1\0\3\64\4\u0236\24\64\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u0237\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u0238\30\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u0239\1\25\1\0\1\25\1\0"+
    "\3\25\4\u023a\24\25\30\0\1\25\1\126\3\25\1\0"+
    "\1\u023b\1\25\1\0\1\25\1\0\3\25\4\u023c\24\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u023d\1\25\1\0"+
    "\1\25\1\0\3\25\4\u023e\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u023f\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0240\24\25\30\0\1\25\1\126\3\25\1\0\1\u0241"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0242\24\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u0243\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0244\24\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\16\25\1\u0245\14\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u0246\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0247\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u0248\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0249\24\25\30\0\1\25\1\126\3\25\1\0\1\u024a"+
    "\1\25\1\0\1\25\1\0\3\25\4\u024b\24\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u024c\1\25\1\0\1\25"+
    "\1\0\3\25\4\u024d\24\25\30\0\1\25\1\126\3\25"+
    "\1\0\1\u024e\1\25\1\0\1\25\1\0\3\25\4\u024f"+
    "\24\25\30\0\1\25\1\126\3\25\1\0\1\u0250\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0251\24\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u0252\1\25\1\0\1\25\1\0"+
    "\3\25\4\u0253\24\25\30\0\1\25\1\126\3\25\1\0"+
    "\1\u0254\1\25\1\0\1\25\1\0\3\25\4\u0255\24\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u0256\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0257\24\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u0258"+
    "\30\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u0259\30\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u025a"+
    "\30\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u025b\30\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u025c\1\25\1\0\1\25\1\0\3\25"+
    "\4\u025d\24\25\30\0\1\25\1\126\3\25\1\0\1\u025e"+
    "\1\25\1\0\1\25\1\0\3\25\4\u025f\24\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\10\25\1\u0260\2\25\1\u0261\17\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u0262"+
    "\30\25\30\0\1\25\1\126\3\25\1\0\1\u0263\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0264\24\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u0265\1\25\1\0\1\25\1\0"+
    "\3\25\4\u0266\24\25\30\0\1\25\1\126\3\25\1\0"+
    "\1\u0267\1\25\1\0\1\25\1\0\3\25\4\u0268\24\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u0269\1\25\1\0"+
    "\1\25\1\0\3\25\4\u026a\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u026b\1\25\1\0\1\25\1\0\3\25"+
    "\4\u026c\24\25\30\0\1\25\1\126\3\25\1\0\1\u026d"+
    "\1\25\1\0\1\25\1\0\3\25\4\u026e\24\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u026f\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0270\24\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u0271\30\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u0272\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0273\24\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u0274"+
    "\30\25\30\0\1\25\1\126\3\25\1\0\1\u0275\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0276\24\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u0277\1\25\1\0\1\25\1\0"+
    "\3\25\4\u0278\24\25\30\0\1\25\1\126\3\25\1\0"+
    "\1\u0279\1\25\1\0\1\25\1\0\3\25\4\u027a\24\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u027b\1\25\1\0"+
    "\1\25\1\0\3\25\4\u027c\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u027d\1\25\1\0\1\25\1\0\3\25"+
    "\4\u027e\24\25\30\0\1\25\1\126\3\25\1\0\1\u027f"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0280\24\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u0281\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0282\24\25\30\0\1\25\1\126\3\25"+
    "\1\0\1\u0283\1\25\1\0\1\25\1\0\3\25\4\u0284"+
    "\24\25\30\0\1\25\1\126\3\25\1\0\1\u0285\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0286\24\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u0287\30\25\30\0\1\25\1\126\3\25\1\0\1\u0288"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0289\24\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u028a\1\25\1\0\1\25"+
    "\1\0\3\25\4\u028b\24\25\30\0\1\25\1\126\3\25"+
    "\1\0\1\u028c\1\25\1\0\1\25\1\0\3\25\4\u028d"+
    "\24\25\30\0\1\25\1\126\3\25\1\0\1\u028e\1\25"+
    "\1\0\1\25\1\0\3\25\4\u028f\24\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u0290\1\25\1\0\1\25\1\0"+
    "\3\25\4\u0291\24\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u0292\30\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u0293\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0294\24\25\30\0\1\25\1\126\3\25"+
    "\1\0\1\u0295\1\25\1\0\1\25\1\0\3\25\4\u0296"+
    "\24\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u0297\30\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\22\25\1\u0298"+
    "\10\25\30\0\1\25\1\126\3\25\1\0\1\u0299\1\25"+
    "\1\0\1\25\1\0\3\25\4\u029a\24\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\7\25"+
    "\1\u029b\23\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u029c\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u029d\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u029e\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u029f\30\25\30\0\1\25\1\126\3\25\1\0\1\u02a0"+
    "\1\25\1\0\1\25\1\0\3\25\4\u02a1\24\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u02a2\30\25\30\0\1\25\1\126\3\25\1\0"+
    "\1\u02a3\1\25\1\0\1\25\1\0\3\25\4\u02a4\24\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u02a5\1\25\1\0"+
    "\1\25\1\0\3\25\4\u02a6\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u02a7\1\25\1\0\1\25\1\0\3\25"+
    "\4\u02a8\24\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u02a9\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u02aa\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u02ab\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\1\u02ac"+
    "\32\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u02ad\30\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u02ae"+
    "\30\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u02af\30\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u02b0"+
    "\30\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u02b1\30\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u02b2"+
    "\30\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u02b3\30\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u02b4"+
    "\30\25\30\0\1\25\1\126\3\25\1\0\1\u02b5\1\25"+
    "\1\0\1\25\1\0\3\25\4\u02b6\24\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u02b7\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u02b8\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u02b9\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u02ba\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u02bb\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u02bc\30\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u02bd\30\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u02be\30\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u02bf\1\25\1\0\1\25\1\0"+
    "\3\25\4\u02c0\24\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u02c1\30\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u02c2\30\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\1\u02c3\32\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u02c4\1\25\1\0\1\25\1\0"+
    "\3\25\4\u02c5\24\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u02c6\30\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u02c7\30\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\16\25\1\u02c8\14\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\16\25\1\u02c9\14\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\13\25\1\u02ca\17\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u02cb\1\25\1\0\1\25"+
    "\1\0\3\25\4\u02cc\24\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u02cd\30\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u02ce\1\25\1\0"+
    "\1\25\1\0\3\25\4\u02cf\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u02d0\1\25\1\0\1\25\1\0\3\25"+
    "\4\u02d1\24\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\14\25\1\u02d2\16\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\10\25"+
    "\1\u02d3\22\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\22\25\1\u02d4\10\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\16\25"+
    "\1\u02d5\14\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\30\25\1\u02d6\2\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\16\25"+
    "\1\u02d7\14\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\22\25\1\u02d8\10\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u02d9\1\25\1\0\1\25\1\0"+
    "\3\25\4\u02da\24\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\12\25\1\u02db\11\25\1\u02dc"+
    "\6\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\23\25\1\u02dd\7\25\30\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\27\25\1\u02de"+
    "\3\25\30\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u02df\4\25\1\u02e0\11\25\1\u02e1"+
    "\2\25\1\u02e2\1\u02e3\5\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u02e4\30\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u02e5\30\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u02e6\30\25"+
    "\23\0\1\u02e7\2\0\1\u02e7\1\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\33\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u02e8\1\25\1\0\1\25\1\0"+
    "\3\25\4\u02e9\24\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u02ea\30\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\3\25\1\u02eb\27\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\14\25\1\u02ec\16\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u02ed\1\25\1\0\1\25"+
    "\1\0\3\25\4\u02ee\24\25\30\0\1\25\1\126\3\25"+
    "\1\0\1\u02ef\1\25\1\0\1\25\1\0\3\25\4\u02f0"+
    "\24\25\30\0\1\25\1\126\3\25\1\0\1\u02f1\1\25"+
    "\1\0\1\25\1\0\3\25\4\u02f2\24\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\12\25"+
    "\1\u02f3\20\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\27\25\1\u02f4\3\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\u02f5\27\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\27\25\1\u02f6\3\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\u02f7\27\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\27\25\1\u02f8\3\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u02f9\1\25\1\0\1\25\1\0"+
    "\3\25\4\u02fa\24\25\30\0\1\25\1\126\3\25\1\0"+
    "\1\u02fb\1\25\1\0\1\25\1\0\3\25\4\u02fc\24\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u02fd\30\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u02fe\30\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u02ff\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0300\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u0301\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0302\24\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\31\25\1\u0303\1\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u0304\1\25\1\0\1\25\1\0"+
    "\3\25\4\u0305\24\25\30\0\1\25\1\126\3\25\1\0"+
    "\1\u0306\1\25\1\0\1\25\1\0\3\25\4\u0307\24\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\23\25\1\u0308\7\25\30\0\1\25\1\126\3\25"+
    "\1\0\1\u0309\1\25\1\0\1\25\1\0\3\25\4\u030a"+
    "\24\25\30\0\1\25\1\126\3\25\1\0\1\u030b\1\25"+
    "\1\0\1\25\1\0\3\25\4\u030c\24\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u030d\1\25\1\0\1\25\1\0"+
    "\3\25\4\u030e\24\25\30\0\1\25\1\126\3\25\1\0"+
    "\1\u030f\1\25\1\0\1\25\1\0\3\25\4\u0310\24\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u0311\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0312\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u0313\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0314\24\25\30\0\1\25\1\126\3\25\1\0\1\u0315"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0316\24\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u0317\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0318\24\25\30\0\1\25\1\126\3\25"+
    "\1\0\1\u0319\1\25\1\0\1\25\1\0\3\25\4\u031a"+
    "\24\25\30\0\1\25\1\126\3\25\1\0\1\u031b\1\25"+
    "\1\0\1\25\1\0\3\25\4\u031c\24\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\27\25"+
    "\1\u031d\3\25\30\0\1\25\1\126\3\25\1\0\1\u031e"+
    "\1\25\1\0\1\25\1\0\3\25\4\u031f\24\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u0320\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0321\24\25\30\0\1\25\1\126\3\25"+
    "\1\0\1\u0322\1\25\1\0\1\25\1\0\3\25\4\u0323"+
    "\24\25\30\0\1\25\1\126\3\25\1\0\1\u0324\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0325\24\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u0326\1\25\1\0\1\25\1\0"+
    "\3\25\4\u0327\24\25\30\0\1\25\1\126\3\25\1\0"+
    "\1\u0328\1\25\1\0\1\25\1\0\3\25\4\u0329\24\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u032a\1\25\1\0"+
    "\1\25\1\0\3\25\4\u032b\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u032c\1\25\1\0\1\25\1\0\3\25"+
    "\4\u032d\24\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\10\25\1\u032e\2\25\1\u032f\17\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u0330\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0331\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u0332\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0333\24\25\30\0\1\25\1\126\3\25\1\0\1\u0334"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0335\24\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u0336\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0337\24\25\30\0\1\25\1\126\3\25"+
    "\1\0\1\u0338\1\25\1\0\1\25\1\0\3\25\4\u0339"+
    "\24\25\30\0\1\25\1\126\3\25\1\0\1\u033a\1\25"+
    "\1\0\1\25\1\0\3\25\4\u033b\24\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u033c\1\25\1\0\1\25\1\0"+
    "\3\25\4\u033d\24\25\30\0\1\25\1\126\3\25\1\0"+
    "\1\u033e\1\25\1\0\1\25\1\0\3\25\4\u033f\24\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u0340\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0341\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u0342\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0343\24\25\30\0\1\25\1\126\3\25\1\0\1\u0344"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0345\24\25\30\0"+
    "\1\25\1\126\3\25\1\0\1\u0346\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0347\24\25\30\0\1\25\1\126\3\25"+
    "\1\0\1\u0348\1\25\1\0\1\25\1\0\3\25\4\u0349"+
    "\24\25\30\0\1\25\1\126\3\25\1\0\1\u034a\1\25"+
    "\1\0\1\25\1\0\3\25\4\u034b\24\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u034c\1\25\1\0\1\25\1\0"+
    "\3\25\4\u034d\24\25\30\0\1\25\1\126\3\25\1\0"+
    "\1\u034e\1\25\1\0\1\25\1\0\3\25\4\u034f\24\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u0350\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0351\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u0352\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0353\24\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\10\25\1\u0354\2\25\1\u0355\17\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u0356\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0357\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u0358\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0359\24\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\13\25\1\u035a\17\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\22\25"+
    "\1\u035b\10\25\30\0\1\25\1\126\3\25\1\0\1\u035c"+
    "\1\25\1\0\1\25\1\0\3\25\4\u035d\24\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\7\25\1\u035e\23\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\26\25\1\u035f\4\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\12\25\1\u0360\20\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\22\25\1\u0361\10\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\11\25\1\u0362\21\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\26\25\1\u0363\4\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\12\25\1\u0364\20\25\30\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\26\25\1\u0365\4\25\30\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\27\25\1\u0366\3\25\30\0\1\25\1\126\3\25\1\0"+
    "\1\u0367\1\25\1\0\1\25\1\0\3\25\4\u0368\24\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u0369\30\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u036a\30\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u036b\30\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u036c\30\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u036d\1\25\1\0"+
    "\1\25\1\0\3\25\4\u036e\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u036f\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0370\24\25\30\0\1\25\1\126\3\25\1\0\1\u0371"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0372\24\25\53\0"+
    "\1\u0373\52\0\1\25\1\126\3\25\1\0\1\u0374\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0375\24\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\27\25"+
    "\1\u0376\3\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\12\25\1\u0377\20\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\10\25"+
    "\1\u0378\22\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\27\25\1\u0379\1\25\1\u037a\1\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\12\25\1\u037b\20\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\12\25\1\u037c\20\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u037d\1\25\1\0"+
    "\1\25\1\0\3\25\4\u037e\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u037f\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0380\24\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\22\25\1\u0381\10\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\10\25"+
    "\1\u0382\22\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\12\25\1\u0383\20\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\6\25"+
    "\1\u0384\24\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\23\25\1\u0385\7\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\12\25"+
    "\1\u0386\20\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\7\25\1\u0387\23\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\26\25"+
    "\1\u0388\4\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\26\25\1\u0389\4\25\30\0\1\25"+
    "\1\126\3\25\1\0\1\u038a\1\25\1\0\1\25\1\0"+
    "\3\25\4\u038b\24\25\30\0\1\25\1\126\3\25\1\0"+
    "\1\u038c\1\25\1\0\1\25\1\0\3\25\4\u038d\24\25"+
    "\30\0\1\25\1\126\3\25\1\0\1\u038e\1\25\1\0"+
    "\1\25\1\0\3\25\4\u038f\24\25\30\0\1\25\1\126"+
    "\3\25\1\0\1\u0390\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0391\24\25\66\0\1\u0392\37\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\27\25\1\u0393\3\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\10\25\1\u0394\22\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\27\25\1\u0395\3\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\15\25\1\u0396\15\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\11\25\1\u0397\10\25"+
    "\1\u0398\10\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\26\25\1\u0399\4\25\54\0\1\u039a"+
    "\51\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\16\25\1\u039b\14\25\30\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\27\25\1\u039c\3\25"+
    "\30\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\11\25\1\u039d\21\25\55\0\1\u039e\50\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\23\25"+
    "\1\u039f\7\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\16\25\1\u03a0\14\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\22\25"+
    "\1\u03a1\10\25\30\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\23\25\1\u03a2\7\25\30\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\22\25"+
    "\1\u03a3\10\25\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34286];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\4\1\1\11\1\1\3\11\36\1\1\11"+
    "\21\1\4\11\1\1\4\11\3\1\4\11\1\1\2\0"+
    "\1\11\135\1\5\11\3\0\1\1\1\11\2\1\2\11"+
    "\2\0\14\1\4\11\256\1\1\11\10\1\1\11\75\1"+
    "\1\11\26\1\1\11\4\1\1\11\61\1\1\11\10\1"+
    "\1\11\20\1\1\11\1\1\1\11\1\1\1\11\3\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\5\1\1\11\1\1"+
    "\1\11\4\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\2\1"+
    "\1\11\2\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\2\1\1\11\1\1"+
    "\1\11\3\1\1\11\6\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\15\1\1\11\11\1\1\11\4\1"+
    "\1\11\6\1\1\11\2\1\1\11\1\1\1\11\10\1"+
    "\1\11\15\1\1\0\1\11\4\1\1\11\1\1\1\11"+
    "\1\1\1\11\7\1\1\11\1\1\1\11\3\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\1\1\1\11\3\1\1\11\12\1\1\11\5\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\1\11\10\1"+
    "\1\11\1\1\1\11\12\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\7\1\1\0\3\1"+
    "\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[931];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _M68kLexer() {
    this((java.io.Reader)null);
  }

  private boolean afterSpaceOrComma() {
    char previousChar = charAt(-1);
    return Character.isSpaceChar(previousChar) || previousChar == ',';
  }

  private void beginDataSized() {
    pushbackDataSize();
    yybegin(AFTER_INSTRUCTION);
  }

  /**
   * Pushes back (optional) DATA_SIZE token if present.
   */
  private void pushbackDataSize() {
    if (charAt(yylength() - 2) == '.') {
      char previousChar = charAt(yylength() - 1);
      if (previousChar == 's' || previousChar == 'b' || previousChar == 'w' || previousChar == 'l' ||
          previousChar == 'S' || previousChar == 'B' || previousChar == 'W' || previousChar == 'L') {
        yypushback(2);
      }
    }
  }

  private char charAt(final int offset) {
    final int loc = getTokenStart() + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  int operandSpaceCount = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _M68kLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 281: break;
          case 2: 
            { operandSpaceCount = 0; yybegin(YYINITIAL); return LINEFEED;
            } 
            // fall through
          case 282: break;
          case 3: 
            { operandSpaceCount = 0; yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            } 
            // fall through
          case 283: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 284: break;
          case 5: 
            { operandSpaceCount = 0; yybegin(AFTER_LABEL); return ID;
            } 
            // fall through
          case 285: break;
          case 6: 
            { operandSpaceCount = 0; return DOT;
            } 
            // fall through
          case 286: break;
          case 7: 
            { yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            } 
            // fall through
          case 287: break;
          case 8: 
            { return DOLLAR;
            } 
            // fall through
          case 288: break;
          case 9: 
            { yybegin(IN_INSTRUCTION); return COLON;
            } 
            // fall through
          case 289: break;
          case 10: 
            { yybegin(IN_OPERAND); return EQ;
            } 
            // fall through
          case 290: break;
          case 11: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 291: break;
          case 12: 
            { yybegin(IN_OPERAND); return MACRO_CALL_ID;
            } 
            // fall through
          case 292: break;
          case 13: 
            { yybegin(IN_OPERAND); return BACKSLASH;
            } 
            // fall through
          case 293: break;
          case 14: 
            { operandSpaceCount = 1; yybegin(IN_OPERAND); return WHITE_SPACE;
            } 
            // fall through
          case 294: break;
          case 15: 
            { yybegin(IN_OPERAND); return STRING;
            } 
            // fall through
          case 295: break;
          case 16: 
            { operandSpaceCount++; return WHITE_SPACE;
            } 
            // fall through
          case 296: break;
          case 17: 
            { if (operandSpaceCount++ == 1) { yybegin(AFTER_OPERAND); } return WHITE_SPACE;
            } 
            // fall through
          case 297: break;
          case 18: 
            { return MUL;
            } 
            // fall through
          case 298: break;
          case 19: 
            { return DEC_NUMBER;
            } 
            // fall through
          case 299: break;
          case 20: 
            { return ID;
            } 
            // fall through
          case 300: break;
          case 21: 
            { return PERCENT;
            } 
            // fall through
          case 301: break;
          case 22: 
            { return PIPE;
            } 
            // fall through
          case 302: break;
          case 23: 
            { return STRING;
            } 
            // fall through
          case 303: break;
          case 24: 
            { return BACKSLASH;
            } 
            // fall through
          case 304: break;
          case 25: 
            { return DOT;
            } 
            // fall through
          case 305: break;
          case 26: 
            { return EQ;
            } 
            // fall through
          case 306: break;
          case 27: 
            { return COMMA;
            } 
            // fall through
          case 307: break;
          case 28: 
            { return PLUS;
            } 
            // fall through
          case 308: break;
          case 29: 
            { return MINUS;
            } 
            // fall through
          case 309: break;
          case 30: 
            { return DIV;
            } 
            // fall through
          case 310: break;
          case 31: 
            { return POW;
            } 
            // fall through
          case 311: break;
          case 32: 
            { return HASH;
            } 
            // fall through
          case 312: break;
          case 33: 
            { return TILDE;
            } 
            // fall through
          case 313: break;
          case 34: 
            { return EXCLAMATION;
            } 
            // fall through
          case 314: break;
          case 35: 
            { return AMPERSAND;
            } 
            // fall through
          case 315: break;
          case 36: 
            { return L_PAREN;
            } 
            // fall through
          case 316: break;
          case 37: 
            { return R_PAREN;
            } 
            // fall through
          case 317: break;
          case 38: 
            { return L_BRACKET;
            } 
            // fall through
          case 318: break;
          case 39: 
            { return R_BRACKET;
            } 
            // fall through
          case 319: break;
          case 40: 
            { beginDataSized(); return SF;
            } 
            // fall through
          case 320: break;
          case 41: 
            { beginDataSized(); return ST;
            } 
            // fall through
          case 321: break;
          case 42: 
            { beginDataSized(); return DS;
            } 
            // fall through
          case 322: break;
          case 43: 
            { beginDataSized(); return DC;
            } 
            // fall through
          case 323: break;
          case 44: 
            { beginDataSized(); return DR;
            } 
            // fall through
          case 324: break;
          case 45: 
            { yybegin(IN_OPERAND); return IF;
            } 
            // fall through
          case 325: break;
          case 46: 
            { beginDataSized(); return OR;
            } 
            // fall through
          case 326: break;
          case 47: 
            { beginDataSized(); return RS;
            } 
            // fall through
          case 327: break;
          case 48: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_S;
            } 
            // fall through
          case 328: break;
          case 49: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_B;
            } 
            // fall through
          case 329: break;
          case 50: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_W;
            } 
            // fall through
          case 330: break;
          case 51: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_L;
            } 
            // fall through
          case 331: break;
          case 52: 
            { return HEX_NUMBER;
            } 
            // fall through
          case 332: break;
          case 53: 
            { return OCT_NUMBER;
            } 
            // fall through
          case 333: break;
          case 54: 
            { return BIN_NUMBER;
            } 
            // fall through
          case 334: break;
          case 55: 
            { return PIPE_PIPE;
            } 
            // fall through
          case 335: break;
          case 56: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_S;
            } 
            // fall through
          case 336: break;
          case 57: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_B;
            } 
            // fall through
          case 337: break;
          case 58: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_W;
            } 
            // fall through
          case 338: break;
          case 59: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_L;
            } 
            // fall through
          case 339: break;
          case 60: 
            { return SP;
            } 
            // fall through
          case 340: break;
          case 61: 
            { return SR;
            } 
            // fall through
          case 341: break;
          case 62: 
            { return ADDRESS_REGISTER;
            } 
            // fall through
          case 342: break;
          case 63: 
            { return DATA_REGISTER;
            } 
            // fall through
          case 343: break;
          case 64: 
            { return PC;
            } 
            // fall through
          case 344: break;
          case 65: 
            { return SLASH_SLASH;
            } 
            // fall through
          case 345: break;
          case 66: 
            { return AMPERSAND_AMPERSAND;
            } 
            // fall through
          case 346: break;
          case 67: 
            { return LT_LT;
            } 
            // fall through
          case 347: break;
          case 68: 
            { return GT_GT;
            } 
            // fall through
          case 348: break;
          case 69: 
            { beginDataSized(); return SLS;
            } 
            // fall through
          case 349: break;
          case 70: 
            { beginDataSized(); return SLE;
            } 
            // fall through
          case 350: break;
          case 71: 
            { beginDataSized(); return SLO;
            } 
            // fall through
          case 351: break;
          case 72: 
            { beginDataSized(); return SLT;
            } 
            // fall through
          case 352: break;
          case 73: 
            { beginDataSized(); return SCS;
            } 
            // fall through
          case 353: break;
          case 74: 
            { beginDataSized(); return SCC;
            } 
            // fall through
          case 354: break;
          case 75: 
            { beginDataSized(); return SEQ;
            } 
            // fall through
          case 355: break;
          case 76: 
            { yybegin(IN_OPERAND); return SET;
            } 
            // fall through
          case 356: break;
          case 77: 
            { beginDataSized(); return SGE;
            } 
            // fall through
          case 357: break;
          case 78: 
            { beginDataSized(); return SGT;
            } 
            // fall through
          case 358: break;
          case 79: 
            { beginDataSized(); return SHS;
            } 
            // fall through
          case 359: break;
          case 80: 
            { beginDataSized(); return SHI;
            } 
            // fall through
          case 360: break;
          case 81: 
            { beginDataSized(); return SMI;
            } 
            // fall through
          case 361: break;
          case 82: 
            { beginDataSized(); return SNE;
            } 
            // fall through
          case 362: break;
          case 83: 
            { beginDataSized(); return SPL;
            } 
            // fall through
          case 363: break;
          case 84: 
            { yybegin(IN_OPERAND); return SPC;
            } 
            // fall through
          case 364: break;
          case 85: 
            { beginDataSized(); return SUB;
            } 
            // fall through
          case 365: break;
          case 86: 
            { beginDataSized(); return SVS;
            } 
            // fall through
          case 366: break;
          case 87: 
            { beginDataSized(); return SVC;
            } 
            // fall through
          case 367: break;
          case 88: 
            { yybegin(AFTER_OPERAND); return BSS;
            } 
            // fall through
          case 368: break;
          case 89: 
            { beginDataSized(); return BSR;
            } 
            // fall through
          case 369: break;
          case 90: 
            { beginDataSized(); return BLS;
            } 
            // fall through
          case 370: break;
          case 91: 
            { beginDataSized(); return BLE;
            } 
            // fall through
          case 371: break;
          case 92: 
            { beginDataSized(); return BLK;
            } 
            // fall through
          case 372: break;
          case 93: 
            { beginDataSized(); return BLO;
            } 
            // fall through
          case 373: break;
          case 94: 
            { beginDataSized(); return BLT;
            } 
            // fall through
          case 374: break;
          case 95: 
            { beginDataSized(); return BCS;
            } 
            // fall through
          case 375: break;
          case 96: 
            { beginDataSized(); return BCC;
            } 
            // fall through
          case 376: break;
          case 97: 
            { beginDataSized(); return BEQ;
            } 
            // fall through
          case 377: break;
          case 98: 
            { beginDataSized(); return BGE;
            } 
            // fall through
          case 378: break;
          case 99: 
            { beginDataSized(); return BGT;
            } 
            // fall through
          case 379: break;
          case 100: 
            { beginDataSized(); return BHS;
            } 
            // fall through
          case 380: break;
          case 101: 
            { beginDataSized(); return BHI;
            } 
            // fall through
          case 381: break;
          case 102: 
            { beginDataSized(); return BMI;
            } 
            // fall through
          case 382: break;
          case 103: 
            { beginDataSized(); return BNE;
            } 
            // fall through
          case 383: break;
          case 104: 
            { beginDataSized(); return BPL;
            } 
            // fall through
          case 384: break;
          case 105: 
            { beginDataSized(); return BRA;
            } 
            // fall through
          case 385: break;
          case 106: 
            { beginDataSized(); return BVS;
            } 
            // fall through
          case 386: break;
          case 107: 
            { beginDataSized(); return BVC;
            } 
            // fall through
          case 387: break;
          case 108: 
            { beginDataSized(); return LSL;
            } 
            // fall through
          case 388: break;
          case 109: 
            { beginDataSized(); return LSR;
            } 
            // fall through
          case 389: break;
          case 110: 
            { beginDataSized(); return LEA;
            } 
            // fall through
          case 390: break;
          case 111: 
            { beginDataSized(); return ASL;
            } 
            // fall through
          case 391: break;
          case 112: 
            { beginDataSized(); return ASR;
            } 
            // fall through
          case 392: break;
          case 113: 
            { beginDataSized(); return ADD;
            } 
            // fall through
          case 393: break;
          case 114: 
            { beginDataSized(); return AND;
            } 
            // fall through
          case 394: break;
          case 115: 
            { beginDataSized(); return CLR;
            } 
            // fall through
          case 395: break;
          case 116: 
            { beginDataSized(); return CHK;
            } 
            // fall through
          case 396: break;
          case 117: 
            { beginDataSized(); return CMP;
            } 
            // fall through
          case 397: break;
          case 118: 
            { beginDataSized(); return DBF;
            } 
            // fall through
          case 398: break;
          case 119: 
            { beginDataSized(); return DBT;
            } 
            // fall through
          case 399: break;
          case 120: 
            { beginDataSized(); return DCB;
            } 
            // fall through
          case 400: break;
          case 121: 
            { yybegin(AFTER_OPERAND); return END;
            } 
            // fall through
          case 401: break;
          case 122: 
            { beginDataSized(); return EOR;
            } 
            // fall through
          case 402: break;
          case 123: 
            { yybegin(IN_OPERAND); return EQU;
            } 
            // fall through
          case 403: break;
          case 124: 
            { beginDataSized(); return EXG;
            } 
            // fall through
          case 404: break;
          case 125: 
            { beginDataSized(); return EXT;
            } 
            // fall through
          case 405: break;
          case 126: 
            { yybegin(AFTER_OPERAND); return FAR;
            } 
            // fall through
          case 406: break;
          case 127: 
            { yybegin(IN_OPERAND); return IFB;
            } 
            // fall through
          case 407: break;
          case 128: 
            { yybegin(IN_OPERAND); return IFC;
            } 
            // fall through
          case 408: break;
          case 129: 
            { yybegin(IN_OPERAND); return IFD;
            } 
            // fall through
          case 409: break;
          case 130: 
            { yybegin(IN_OPERAND); return JSR;
            } 
            // fall through
          case 410: break;
          case 131: 
            { beginDataSized(); return JMP;
            } 
            // fall through
          case 411: break;
          case 132: 
            { beginDataSized(); return NEG;
            } 
            // fall through
          case 412: break;
          case 133: 
            { yybegin(AFTER_OPERAND); return NOP;
            } 
            // fall through
          case 413: break;
          case 134: 
            { beginDataSized(); return NOT;
            } 
            // fall through
          case 414: break;
          case 135: 
            { yybegin(AFTER_OPERAND); return ODD;
            } 
            // fall through
          case 415: break;
          case 136: 
            { yybegin(IN_OPERAND); return OPT;
            } 
            // fall through
          case 416: break;
          case 137: 
            { yybegin(IN_OPERAND); return ORG;
            } 
            // fall through
          case 417: break;
          case 138: 
            { beginDataSized(); return ORI;
            } 
            // fall through
          case 418: break;
          case 139: 
            { beginDataSized(); return PEA;
            } 
            // fall through
          case 419: break;
          case 140: 
            { yybegin(IN_OPERAND); return REG;
            } 
            // fall through
          case 420: break;
          case 141: 
            { yybegin(AFTER_OPERAND); return REM;
            } 
            // fall through
          case 421: break;
          case 142: 
            { beginDataSized(); return ROL;
            } 
            // fall through
          case 422: break;
          case 143: 
            { beginDataSized(); return ROR;
            } 
            // fall through
          case 423: break;
          case 144: 
            { yybegin(AFTER_OPERAND); return RTS;
            } 
            // fall through
          case 424: break;
          case 145: 
            { yybegin(AFTER_OPERAND); return RTE;
            } 
            // fall through
          case 425: break;
          case 146: 
            { yybegin(AFTER_OPERAND); return RTR;
            } 
            // fall through
          case 426: break;
          case 147: 
            { beginDataSized(); return TST;
            } 
            // fall through
          case 427: break;
          case 148: 
            { beginDataSized(); return TAS;
            } 
            // fall through
          case 428: break;
          case 149: 
            { yybegin(STRING_DIRECTIVE); return TTL;
            } 
            // fall through
          case 429: break;
          case 150: 
            { return SSP;
            } 
            // fall through
          case 430: break;
          case 151: 
            { return CCR;
            } 
            // fall through
          case 431: break;
          case 152: 
            { return USP;
            } 
            // fall through
          case 432: break;
          case 153: 
            { beginDataSized(); return SBCD;
            } 
            // fall through
          case 433: break;
          case 154: 
            { beginDataSized(); return SWAP;
            } 
            // fall through
          case 434: break;
          case 155: 
            { yybegin(IN_OPERAND); return STOP;
            } 
            // fall through
          case 435: break;
          case 156: 
            { beginDataSized(); return SUBA;
            } 
            // fall through
          case 436: break;
          case 157: 
            { beginDataSized(); return SUBI;
            } 
            // fall through
          case 437: break;
          case 158: 
            { beginDataSized(); return SUBQ;
            } 
            // fall through
          case 438: break;
          case 159: 
            { beginDataSized(); return SUBX;
            } 
            // fall through
          case 439: break;
          case 160: 
            { beginDataSized(); return BSET;
            } 
            // fall through
          case 440: break;
          case 161: 
            { beginDataSized(); return BCLR;
            } 
            // fall through
          case 441: break;
          case 162: 
            { beginDataSized(); return BCHG;
            } 
            // fall through
          case 442: break;
          case 163: 
            { beginDataSized(); return BTST;
            } 
            // fall through
          case 443: break;
          case 164: 
            { yybegin(IN_OPERAND); return LLEN;
            } 
            // fall through
          case 444: break;
          case 165: 
            { yybegin(AFTER_OPERAND); return LIST;
            } 
            // fall through
          case 445: break;
          case 166: 
            { beginDataSized(); return LINK;
            } 
            // fall through
          case 446: break;
          case 167: 
            { yybegin(IN_OPERAND); return LOAD;
            } 
            // fall through
          case 447: break;
          case 168: 
            { beginDataSized(); return ABCD;
            } 
            // fall through
          case 448: break;
          case 169: 
            { beginDataSized(); return ADDA;
            } 
            // fall through
          case 449: break;
          case 170: 
            { beginDataSized(); return ADDI;
            } 
            // fall through
          case 450: break;
          case 171: 
            { beginDataSized(); return ADDQ;
            } 
            // fall through
          case 451: break;
          case 172: 
            { beginDataSized(); return ADDX;
            } 
            // fall through
          case 452: break;
          case 173: 
            { beginDataSized(); return ANDI;
            } 
            // fall through
          case 453: break;
          case 174: 
            { yybegin(AFTER_OPERAND); return CSEG;
            } 
            // fall through
          case 454: break;
          case 175: 
            { beginDataSized(); return CMPA;
            } 
            // fall through
          case 455: break;
          case 176: 
            { beginDataSized(); return CMPI;
            } 
            // fall through
          case 456: break;
          case 177: 
            { beginDataSized(); return CMPM;
            } 
            // fall through
          case 457: break;
          case 178: 
            { yybegin(IN_OPERAND); return CNOP;
            } 
            // fall through
          case 458: break;
          case 179: 
            { yybegin(AFTER_OPERAND); return CODE;
            } 
            // fall through
          case 459: break;
          case 180: 
            { beginDataSized(); return DSEG;
            } 
            // fall through
          case 460: break;
          case 181: 
            { beginDataSized(); return DBLS;
            } 
            // fall through
          case 461: break;
          case 182: 
            { beginDataSized(); return DBLE;
            } 
            // fall through
          case 462: break;
          case 183: 
            { beginDataSized(); return DBLO;
            } 
            // fall through
          case 463: break;
          case 184: 
            { beginDataSized(); return DBLT;
            } 
            // fall through
          case 464: break;
          case 185: 
            { beginDataSized(); return DBCS;
            } 
            // fall through
          case 465: break;
          case 186: 
            { beginDataSized(); return DBCC;
            } 
            // fall through
          case 466: break;
          case 187: 
            { beginDataSized(); return DBEQ;
            } 
            // fall through
          case 467: break;
          case 188: 
            { beginDataSized(); return DBGE;
            } 
            // fall through
          case 468: break;
          case 189: 
            { beginDataSized(); return DBGT;
            } 
            // fall through
          case 469: break;
          case 190: 
            { beginDataSized(); return DBHS;
            } 
            // fall through
          case 470: break;
          case 191: 
            { beginDataSized(); return DBHI;
            } 
            // fall through
          case 471: break;
          case 192: 
            { beginDataSized(); return DBMI;
            } 
            // fall through
          case 472: break;
          case 193: 
            { beginDataSized(); return DBNE;
            } 
            // fall through
          case 473: break;
          case 194: 
            { beginDataSized(); return DBPL;
            } 
            // fall through
          case 474: break;
          case 195: 
            { beginDataSized(); return DBRA;
            } 
            // fall through
          case 475: break;
          case 196: 
            { beginDataSized(); return DBVS;
            } 
            // fall through
          case 476: break;
          case 197: 
            { beginDataSized(); return DBVC;
            } 
            // fall through
          case 477: break;
          case 198: 
            { yybegin(AFTER_OPERAND); return DATA;
            } 
            // fall through
          case 478: break;
          case 199: 
            { beginDataSized(); return DIVS;
            } 
            // fall through
          case 479: break;
          case 200: 
            { beginDataSized(); return DIVU;
            } 
            // fall through
          case 480: break;
          case 201: 
            { yybegin(AFTER_OPERAND); return ELSE;
            } 
            // fall through
          case 481: break;
          case 202: 
            { yybegin(STRING_DIRECTIVE); return ECHO;
            } 
            // fall through
          case 482: break;
          case 203: 
            { yybegin(AFTER_OPERAND); return ENDC;
            } 
            // fall through
          case 483: break;
          case 204: 
            { yybegin(AFTER_OPERAND); return ENDM;
            } 
            // fall through
          case 484: break;
          case 205: 
            { yybegin(AFTER_OPERAND); return ENDR;
            } 
            // fall through
          case 485: break;
          case 206: 
            { beginDataSized(); return EORI;
            } 
            // fall through
          case 486: break;
          case 207: 
            { yybegin(IN_OPERAND); return EQUR;
            } 
            // fall through
          case 487: break;
          case 208: 
            { yybegin(AFTER_OPERAND); return EREM;
            } 
            // fall through
          case 488: break;
          case 209: 
            { yybegin(AFTER_OPERAND); return EVEN;
            } 
            // fall through
          case 489: break;
          case 210: 
            { yybegin(AFTER_OPERAND); return FAIL;
            } 
            // fall through
          case 490: break;
          case 211: 
            { yybegin(STRING_DIRECTIVE); return IDNT;
            } 
            // fall through
          case 491: break;
          case 212: 
            { yybegin(IN_OPERAND); return IFLE;
            } 
            // fall through
          case 492: break;
          case 213: 
            { yybegin(IN_OPERAND); return IFLT;
            } 
            // fall through
          case 493: break;
          case 214: 
            { yybegin(IN_OPERAND); return IFEQ;
            } 
            // fall through
          case 494: break;
          case 215: 
            { yybegin(IN_OPERAND); return IFGE;
            } 
            // fall through
          case 495: break;
          case 216: 
            { yybegin(IN_OPERAND); return IFGT;
            } 
            // fall through
          case 496: break;
          case 217: 
            { yybegin(IN_OPERAND); return IFMI;
            } 
            // fall through
          case 497: break;
          case 218: 
            { yybegin(IN_OPERAND); return IFNB;
            } 
            // fall through
          case 498: break;
          case 219: 
            { yybegin(IN_OPERAND); return IFNC;
            } 
            // fall through
          case 499: break;
          case 220: 
            { yybegin(IN_OPERAND); return IFND;
            } 
            // fall through
          case 500: break;
          case 221: 
            { yybegin(IN_OPERAND); return IFNE;
            } 
            // fall through
          case 501: break;
          case 222: 
            { yybegin(IN_OPERAND); return IFPL;
            } 
            // fall through
          case 502: break;
          case 223: 
            { beginDataSized(); return MOVE;
            } 
            // fall through
          case 503: break;
          case 224: 
            { beginDataSized(); return MULS;
            } 
            // fall through
          case 504: break;
          case 225: 
            { beginDataSized(); return MULU;
            } 
            // fall through
          case 505: break;
          case 226: 
            { beginDataSized(); return NBCD;
            } 
            // fall through
          case 506: break;
          case 227: 
            { yybegin(IN_OPERAND); return NEAR;
            } 
            // fall through
          case 507: break;
          case 228: 
            { beginDataSized(); return NEGX;
            } 
            // fall through
          case 508: break;
          case 229: 
            { yybegin(IN_OPERAND); return PLEN;
            } 
            // fall through
          case 509: break;
          case 230: 
            { yybegin(AFTER_OPERAND); return PAGE;
            } 
            // fall through
          case 510: break;
          case 231: 
            { yybegin(IN_OPERAND); return REPT;
            } 
            // fall through
          case 511: break;
          case 232: 
            { beginDataSized(); return ROXL;
            } 
            // fall through
          case 512: break;
          case 233: 
            { beginDataSized(); return ROXR;
            } 
            // fall through
          case 513: break;
          case 234: 
            { yybegin(AFTER_OPERAND); return TEXT;
            } 
            // fall through
          case 514: break;
          case 235: 
            { yybegin(IN_OPERAND); return TRAP;
            } 
            // fall through
          case 515: break;
          case 236: 
            { yybegin(IN_OPERAND); return UNLK;
            } 
            // fall through
          case 516: break;
          case 237: 
            { yybegin(IN_OPERAND); return XDEF;
            } 
            // fall through
          case 517: break;
          case 238: 
            { yybegin(IN_OPERAND); return XREF;
            } 
            // fall through
          case 518: break;
          case 239: 
            { pushbackDataSize(); return SP;
            } 
            // fall through
          case 519: break;
          case 240: 
            { pushbackDataSize(); return ADDRESS_REGISTER;
            } 
            // fall through
          case 520: break;
          case 241: 
            { pushbackDataSize(); return DATA_REGISTER;
            } 
            // fall through
          case 521: break;
          case 242: 
            { yybegin(AFTER_OPERAND); return BSS_C;
            } 
            // fall through
          case 522: break;
          case 243: 
            { yybegin(AFTER_OPERAND); return BSS_F;
            } 
            // fall through
          case 523: break;
          case 244: 
            { yybegin(IN_OPERAND); return ALIGN;
            } 
            // fall through
          case 524: break;
          case 245: 
            { yybegin(AFTER_OPERAND); return ENDIF;
            } 
            // fall through
          case 525: break;
          case 246: 
            { yybegin(AFTER_OPERAND); return MACRO;
            } 
            // fall through
          case 526: break;
          case 247: 
            { yybegin(AFTER_OPERAND); return MEXIT;
            } 
            // fall through
          case 527: break;
          case 248: 
            { beginDataSized(); return MOVEA;
            } 
            // fall through
          case 528: break;
          case 249: 
            { beginDataSized(); return MOVEM;
            } 
            // fall through
          case 529: break;
          case 250: 
            { beginDataSized(); return MOVEP;
            } 
            // fall through
          case 530: break;
          case 251: 
            { beginDataSized(); return MOVEQ;
            } 
            // fall through
          case 531: break;
          case 252: 
            { yybegin(IN_OPERAND); return RSSET;
            } 
            // fall through
          case 532: break;
          case 253: 
            { yybegin(AFTER_OPERAND); return RESET;
            } 
            // fall through
          case 533: break;
          case 254: 
            { yybegin(AFTER_OPERAND); return TRAPV;
            } 
            // fall through
          case 534: break;
          case 255: 
            { yybegin(AFTER_OPERAND); return CODE_C;
            } 
            // fall through
          case 535: break;
          case 256: 
            { yybegin(AFTER_OPERAND); return CODE_F;
            } 
            // fall through
          case 536: break;
          case 257: 
            { yybegin(AFTER_OPERAND); return DATA_C;
            } 
            // fall through
          case 537: break;
          case 258: 
            { yybegin(AFTER_OPERAND); return DATA_F;
            } 
            // fall through
          case 538: break;
          case 259: 
            { yybegin(AFTER_OPERAND); return ELSEIF;
            } 
            // fall through
          case 539: break;
          case 260: 
            { yybegin(AFTER_OPERAND); return INLINE;
            } 
            // fall through
          case 540: break;
          case 261: 
            { yybegin(STRING_DIRECTIVE); return INCBIN;
            } 
            // fall through
          case 541: break;
          case 262: 
            { yybegin(STRING_DIRECTIVE); return INCDIR;
            } 
            // fall through
          case 542: break;
          case 263: 
            { yybegin(AFTER_OPERAND); return NOLIST;
            } 
            // fall through
          case 543: break;
          case 264: 
            { yybegin(AFTER_OPERAND); return NOPAGE;
            } 
            // fall through
          case 544: break;
          case 265: 
            { yybegin(STRING_DIRECTIVE); return PRINTT;
            } 
            // fall through
          case 545: break;
          case 266: 
            { yybegin(IN_OPERAND); return PRINTV;
            } 
            // fall through
          case 546: break;
          case 267: 
            { yybegin(IN_OPERAND); return SECTION;
            } 
            // fall through
          case 547: break;
          case 268: 
            { yybegin(AFTER_OPERAND); return EINLINE;
            } 
            // fall through
          case 548: break;
          case 269: 
            { yybegin(AFTER_OPERAND); return ILLEGAL;
            } 
            // fall through
          case 549: break;
          case 270: 
            { yybegin(STRING_DIRECTIVE); return INCLUDE;
            } 
            // fall through
          case 550: break;
          case 271: 
            { yybegin(IN_OPERAND); return JUMPERR;
            } 
            // fall through
          case 551: break;
          case 272: 
            { yybegin(IN_OPERAND); return JUMPPTR;
            } 
            // fall through
          case 552: break;
          case 273: 
            { yybegin(AFTER_OPERAND); return RSRESET;
            } 
            // fall through
          case 553: break;
          case 274: 
            { yybegin(IN_OPERAND); return ADDWATCH;
            } 
            // fall through
          case 554: break;
          case 275: 
            { yybegin(IN_OPERAND); return IFMACROD;
            } 
            // fall through
          case 555: break;
          case 276: 
            { yybegin(AFTER_OPERAND); return INITNEAR;
            } 
            // fall through
          case 556: break;
          case 277: 
            { yybegin(IN_OPERAND); return IFMACROND;
            } 
            // fall through
          case 557: break;
          case 278: 
            { yybegin(AFTER_OPERAND); return NEAR_CODE;
            } 
            // fall through
          case 558: break;
          case 279: 
            { yybegin(AFTER_OPERAND); return POPSECTION;
            } 
            // fall through
          case 559: break;
          case 280: 
            { yybegin(AFTER_OPERAND); return PUSHSECTION;
            } 
            // fall through
          case 560: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
