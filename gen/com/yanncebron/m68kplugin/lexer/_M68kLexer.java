/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * Copyright 2021 The Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.yanncebron.m68kplugin.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.yanncebron.m68kplugin.lang.psi.M68kTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/yann/idea-ultimate/m68kplugin/src/grammar/_M68kLexer.flex</tt>
 */
public class _M68kLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MACRO_DECLARATION = 2;
  public static final int AFTER_LABEL = 4;
  public static final int IN_INSTRUCTION = 6;
  public static final int AFTER_INSTRUCTION = 8;
  public static final int STRING_DIRECTIVE = 10;
  public static final int IN_OPERAND = 12;
  public static final int MACRO_PARAMETER = 14;
  public static final int AFTER_OPERAND = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15264 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\13\21\1\72\1\73\4\21\1\74\3\21\1\75\2\21\1\76\1\77\7\21"+
    "\123\26\1\100\7\26\1\101\1\102\12\26\1\103\24\21\1\26\1\104\u0702\21");

  /* The ZZ_CMAP_Y table has 4416 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\4"+
    "\0\1\17\1\20\1\17\2\21\1\22\3\21\1\22\71\21\1\23\1\21\1\24\1\0\1\25\1\26\12"+
    "\0\1\20\5\0\1\27\1\30\1\31\1\32\2\21\1\33\11\21\1\34\21\21\1\24\1\35\24\21"+
    "\1\36\3\21\1\22\1\37\1\36\4\21\5\0\1\21\1\34\1\40\1\0\3\21\2\41\3\0\1\21\1"+
    "\41\7\21\1\36\1\42\1\43\14\21\1\44\1\25\1\36\1\45\1\42\1\46\2\0\6\21\1\0\1"+
    "\47\14\21\1\24\1\0\1\42\1\50\3\21\1\41\1\51\1\17\3\21\1\35\1\21\1\25\2\0\3"+
    "\21\1\52\10\0\2\21\1\27\1\53\2\0\1\54\1\21\1\55\1\24\11\21\1\44\1\21\1\27"+
    "\1\45\1\21\1\56\1\42\1\36\1\21\1\44\1\57\1\60\2\21\1\61\1\62\1\63\1\57\1\64"+
    "\1\65\1\66\1\56\1\42\1\24\1\0\1\67\1\70\1\60\2\21\1\61\1\71\1\23\1\70\1\72"+
    "\1\37\1\73\1\74\1\42\1\53\1\0\1\67\1\34\1\33\2\21\1\61\1\75\1\63\1\34\1\76"+
    "\1\52\1\0\1\56\1\42\1\0\1\37\1\67\1\57\1\60\2\21\1\61\1\75\1\63\1\57\1\72"+
    "\1\77\1\66\1\56\1\42\1\37\1\0\1\100\1\101\1\102\1\103\1\104\1\101\1\21\1\23"+
    "\1\101\1\105\1\106\1\0\1\74\1\42\2\0\1\44\1\27\1\61\2\21\1\61\1\21\1\63\1"+
    "\27\1\105\1\107\1\41\1\56\1\42\2\0\1\44\1\27\1\61\2\21\1\61\1\44\1\63\1\27"+
    "\1\105\1\107\1\31\1\56\1\42\1\110\1\0\1\67\1\27\1\61\4\21\1\111\1\27\1\112"+
    "\1\54\1\65\1\56\1\42\1\0\1\35\1\100\1\21\1\22\1\35\2\21\1\33\1\113\1\22\1"+
    "\65\1\114\1\21\1\74\1\42\1\115\1\0\1\36\6\21\1\41\1\22\1\20\1\42\1\116\4\0"+
    "\1\117\1\120\1\54\1\36\1\121\1\100\1\21\1\122\1\114\1\20\1\42\1\123\4\0\1"+
    "\52\3\0\1\42\1\116\2\0\1\21\1\36\3\21\1\25\1\36\1\21\1\24\2\21\1\36\3\21\1"+
    "\25\10\0\6\21\1\22\1\60\1\42\1\116\2\21\1\111\1\124\2\21\1\22\1\31\1\42\1"+
    "\125\4\21\1\34\1\20\5\21\1\126\51\21\1\102\1\22\1\102\5\21\1\102\4\21\1\102"+
    "\1\22\1\102\1\21\1\22\7\21\1\102\10\21\1\70\4\0\2\21\2\0\12\21\2\53\1\36\114"+
    "\21\1\57\2\21\1\36\2\21\1\41\11\21\1\101\1\21\1\52\1\21\1\27\1\127\1\0\2\21"+
    "\1\127\1\0\2\21\1\127\1\0\1\21\1\27\1\130\1\0\6\21\1\131\2\21\1\52\1\65\1"+
    "\132\1\42\1\116\4\0\1\42\1\116\13\21\1\0\5\21\1\41\10\21\1\53\1\0\3\21\1\22"+
    "\1\21\1\127\1\21\1\52\1\74\1\42\3\21\1\53\1\25\1\0\5\21\1\127\3\21\1\24\1"+
    "\42\1\116\4\0\3\21\1\127\7\21\1\22\1\36\1\21\1\25\1\0\1\42\1\116\1\42\1\116"+
    "\1\65\13\0\6\21\1\44\1\21\1\44\1\127\1\42\1\116\4\0\5\21\1\133\1\42\1\50\4"+
    "\21\1\34\1\21\1\24\1\0\6\21\1\53\1\0\1\42\1\134\1\42\1\50\3\21\1\53\1\21\1"+
    "\52\13\0\1\135\1\136\1\0\30\21\4\0\1\65\1\21\1\25\1\0\42\21\2\53\4\21\2\53"+
    "\1\21\1\137\3\21\1\53\6\21\1\27\1\114\1\140\1\25\1\131\1\127\1\21\1\25\1\140"+
    "\1\25\5\0\1\141\10\0\1\37\1\65\2\0\1\21\1\25\14\0\1\142\1\35\1\113\1\143\1"+
    "\26\1\144\1\21\1\133\1\47\1\145\2\0\5\21\1\52\144\0\1\77\6\21\1\24\42\0\5"+
    "\21\1\22\5\21\1\22\20\21\1\25\1\146\1\115\1\0\4\21\1\34\1\20\7\21\1\65\2\0"+
    "\2\21\1\22\1\0\10\22\4\21\5\0\1\65\72\0\1\47\3\0\1\36\1\24\1\143\1\25\1\36"+
    "\11\21\1\22\1\47\1\36\12\21\1\126\1\47\4\21\1\53\1\36\12\21\1\22\2\0\3\21"+
    "\1\41\6\0\170\21\1\53\11\0\72\21\1\53\5\0\21\21\1\25\10\0\5\21\1\53\41\21"+
    "\1\25\2\21\1\42\1\147\2\0\5\21\1\22\1\54\1\150\16\21\4\0\1\65\1\21\1\35\14"+
    "\21\1\60\3\21\1\22\1\21\7\0\1\65\1\21\1\151\1\126\3\21\3\0\6\21\1\127\1\0"+
    "\10\21\1\113\1\0\1\42\1\116\2\0\1\35\1\152\1\42\1\50\3\21\1\41\4\21\1\41\1"+
    "\0\3\21\1\25\6\21\1\126\1\21\1\0\1\65\1\42\1\116\1\27\1\21\1\42\1\153\6\21"+
    "\1\22\1\0\1\21\1\53\1\42\1\116\2\21\1\22\1\154\7\21\1\22\1\155\2\0\1\156\2"+
    "\21\1\157\1\0\3\160\1\0\2\22\5\21\1\126\1\53\1\0\17\21\1\41\1\42\1\116\64"+
    "\21\1\127\1\0\2\21\1\22\1\55\5\21\1\127\40\0\55\21\1\53\15\21\1\24\4\0\1\22"+
    "\1\0\1\55\1\47\1\21\1\61\1\22\1\114\1\161\15\21\1\24\3\0\1\55\54\21\1\53\2"+
    "\0\10\21\1\35\6\21\5\0\1\21\1\127\16\0\1\27\20\21\1\25\2\0\1\42\1\116\1\162"+
    "\2\21\1\41\1\162\2\21\1\41\1\77\12\21\1\22\3\35\1\163\4\0\1\21\1\44\2\21\1"+
    "\22\2\21\1\164\1\21\1\53\1\21\1\53\4\0\17\21\1\41\10\0\6\21\1\25\41\0\3\21"+
    "\1\25\6\21\1\52\5\0\4\21\2\0\3\21\1\41\5\21\1\41\3\21\1\53\4\21\1\127\1\21"+
    "\1\143\5\0\23\21\1\53\1\42\1\116\4\21\1\127\4\21\1\127\5\21\1\0\6\21\1\127"+
    "\23\0\46\21\1\22\1\0\2\21\1\53\1\0\1\21\23\0\1\53\1\61\4\21\1\34\1\165\2\21"+
    "\1\53\1\0\2\21\1\22\1\0\3\21\1\22\10\0\2\21\1\166\1\0\2\21\1\53\1\0\3\21\1"+
    "\24\10\0\7\21\1\77\10\0\1\136\1\54\1\44\1\36\2\21\1\127\5\0\3\21\1\25\3\21"+
    "\1\25\4\0\1\21\1\36\2\21\1\25\3\0\6\21\1\53\1\0\2\21\1\53\1\0\2\21\1\41\1"+
    "\0\2\21\1\24\15\0\11\21\1\52\6\0\6\21\1\41\1\0\6\21\1\41\41\0\10\21\1\53\3"+
    "\0\1\74\1\42\2\0\1\35\6\21\1\52\2\0\3\21\1\52\1\42\1\116\6\21\1\167\1\42\2"+
    "\0\4\21\1\170\1\0\10\21\1\171\1\0\1\42\1\172\4\0\2\21\1\33\3\21\1\57\1\31"+
    "\10\0\1\22\1\144\1\21\1\34\1\21\1\52\7\21\1\52\1\42\1\116\1\44\1\57\1\60\2"+
    "\21\1\61\1\75\1\63\1\57\1\72\1\106\1\47\1\127\23\0\10\21\1\151\1\41\1\42\1"+
    "\116\4\0\10\21\1\173\1\0\1\42\1\116\24\0\6\21\1\53\1\22\3\0\1\53\4\0\7\21"+
    "\1\22\1\174\1\0\1\42\1\116\4\0\6\21\1\53\1\0\1\42\1\116\6\0\3\21\1\63\1\21"+
    "\1\41\1\42\1\116\54\0\10\21\1\42\1\116\1\0\1\65\70\0\7\21\1\52\40\0\1\21\1"+
    "\61\4\21\2\22\1\52\1\0\1\42\1\116\2\0\1\35\3\21\1\35\2\21\1\36\1\22\51\0\63"+
    "\21\1\24\14\0\15\21\1\22\2\0\30\21\1\127\27\0\5\21\1\22\72\0\10\21\1\22\67"+
    "\0\7\21\1\52\3\21\1\22\1\42\1\116\14\0\3\21\1\53\2\0\6\21\1\22\1\0\1\127\1"+
    "\0\1\42\1\116\1\55\2\21\1\47\2\21\56\0\10\21\1\25\1\0\5\21\1\22\2\0\1\55\1"+
    "\21\10\0\1\52\3\0\75\21\1\25\2\0\36\21\1\41\41\0\1\24\77\0\15\21\1\41\1\21"+
    "\1\25\1\21\1\52\1\21\1\145\54\0\12\21\1\27\10\21\1\27\1\175\1\135\1\21\1\176"+
    "\1\44\7\21\1\34\1\111\2\27\3\21\1\177\1\114\1\35\1\61\51\21\1\53\3\21\1\61"+
    "\2\21\1\126\3\21\1\126\2\21\1\27\3\21\1\27\2\21\1\22\3\21\1\22\3\21\1\61\3"+
    "\21\1\61\2\21\1\126\1\56\6\42\1\22\2\21\1\60\1\161\1\41\72\0\30\21\1\25\7"+
    "\0\10\21\1\150\1\0\1\42\1\116\24\0\1\44\3\21\1\117\1\36\1\126\1\200\1\142"+
    "\1\201\1\117\1\137\1\117\2\126\1\73\1\21\1\33\1\21\1\127\1\67\1\33\1\21\1"+
    "\127\116\0\3\21\1\24\3\21\1\24\3\21\1\24\16\0\32\21\1\22\5\0\106\21\1\25\1"+
    "\0\33\21\1\53\120\21\1\24\53\0\3\21\1\53\74\0");

  /* The ZZ_CMAP_A table has 1040 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\4\1\5\1\1\2\0\1\2\1\73\1\21\1\65\1\10\1\14\1\74\1\17\1\67"+
    "\1\70\1\6\1\61\1\60\1\62\1\24\1\63\1\31\1\16\1\130\1\133\1\134\1\13\1\131"+
    "\1\13\1\132\1\7\1\56\1\3\1\75\1\57\1\76\1\0\1\12\1\32\1\26\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\30\1\44\1\45\1\46\1\47\1\50\1\51\1\25\1\52"+
    "\1\53\1\54\1\27\1\55\2\23\1\71\1\20\1\72\1\64\1\22\1\0\1\103\1\100\1\104\1"+
    "\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\102\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\77\1\123\1\124\1\125\1\101\1\126\2\127\1\0\1\15\1\0\1\66\6"+
    "\0\1\4\4\0\1\23\12\0\1\23\2\0\17\23\1\0\2\23\4\0\4\23\6\0\5\23\7\0\1\23\1"+
    "\0\1\23\1\0\5\23\1\0\2\23\2\0\4\23\1\0\1\23\6\0\1\23\1\0\3\23\1\0\1\23\1\0"+
    "\4\23\1\0\13\23\1\0\1\23\2\0\6\23\1\0\7\23\1\0\1\23\7\0\2\23\1\0\2\23\1\0"+
    "\4\23\5\0\12\7\4\0\6\23\1\0\4\23\4\0\3\23\2\7\3\23\2\0\1\23\5\0\3\23\2\7\6"+
    "\23\4\0\2\23\2\0\1\23\7\0\6\23\6\0\4\23\3\0\11\23\2\0\2\7\5\23\2\0\2\23\2"+
    "\0\6\23\1\0\7\23\1\0\1\23\3\0\4\23\3\0\4\23\2\0\2\23\1\0\1\23\10\0\1\23\4"+
    "\0\2\23\1\0\1\23\1\0\3\23\1\0\6\23\4\0\2\23\1\0\2\23\1\0\2\23\1\0\1\23\2\0"+
    "\2\23\4\0\4\23\1\0\1\23\7\0\2\7\1\23\1\0\2\23\1\0\5\23\1\0\2\23\11\0\2\23"+
    "\2\0\2\23\1\0\6\23\3\0\3\23\1\0\4\23\3\0\2\23\1\0\1\23\1\0\2\23\3\0\2\23\3"+
    "\0\1\23\1\0\3\23\3\0\1\23\6\0\1\23\5\0\2\23\2\0\2\23\5\0\3\23\2\0\4\23\1\0"+
    "\3\23\1\0\1\23\1\0\4\23\1\0\1\23\2\0\5\23\1\0\1\23\3\0\2\23\4\0\2\7\7\0\2"+
    "\23\1\0\1\23\2\0\2\23\1\0\1\23\2\0\1\23\3\0\3\23\1\0\1\23\1\0\3\23\1\0\3\23"+
    "\2\0\2\7\2\0\5\23\5\0\2\23\2\7\2\0\2\23\2\0\3\23\1\0\10\23\4\0\1\23\1\0\2"+
    "\23\4\0\4\23\2\0\2\23\4\0\1\23\3\0\2\23\2\0\4\23\2\7\3\0\3\23\1\0\4\23\1\0"+
    "\6\23\1\0\2\23\2\0\1\23\1\0\1\23\1\0\1\23\1\0\1\23\2\0\3\23\1\0\2\23\2\4\10"+
    "\0\1\23\4\0\1\23\1\0\5\23\2\0\1\23\1\0\4\23\1\0\3\23\4\0\1\23\4\0\4\23\1\0"+
    "\2\7\2\23\4\0\4\23\3\0\3\23\1\0\3\23\1\0\1\23\3\0\1\23\1\0\1\23\2\0\2\7\5"+
    "\23\3\0\1\23\3\0\3\23\1\0\1\23\10\0\3\23\4\0\4\23\3\0\6\23\1\0\2\23\1\0\2"+
    "\23\1\0\2\23\1\0\6\11\1\23\2\0\3\23\3\0\3\23\1\0\2\23\1\0\2\23\3\0\1\23\2"+
    "\0\4\23\1\0\2\23\2\0\3\23\3\0\2\7\3\23\3\0\1\23\2\0\4\23\3\0\2\7\1\23\1\0"+
    "\1\23\3\0\2\23\2\0\2\23\1\0\2\23\3\0\1\23\5\0\1\23\2\0\2\23\1\0\2\23\1\0\1"+
    "\23\1\0\5\23\1\0\4\23\2\0\1\23\1\0\1\23\5\0\1\23\1\0\1\23\1\0\3\23");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\1\2\5\1\10\1\11\2\1\1\12\1\13"+
    "\1\1\1\14\1\15\22\14\1\16\1\1\1\17\1\20"+
    "\1\4\2\17\1\21\1\22\1\23\1\1\1\24\1\1"+
    "\1\25\1\26\1\27\1\30\1\27\1\1\1\31\7\24"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\7\17\0\1\5\1\54\6\0\5\14"+
    "\1\55\5\14\1\56\40\14\1\57\2\14\1\60\1\14"+
    "\1\61\1\62\14\14\1\63\16\14\1\64\6\14\1\65"+
    "\13\14\1\0\1\66\1\67\1\70\1\71\1\17\3\0"+
    "\1\72\1\24\1\73\1\74\1\75\1\27\2\0\1\76"+
    "\1\77\1\100\1\101\2\24\1\102\1\103\1\104\1\24"+
    "\1\105\1\24\1\106\2\24\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\7\0\1\120\1\0"+
    "\1\5\2\0\1\121\1\0\3\14\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\14\1\130\1\131\1\0\1\132"+
    "\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\0"+
    "\1\14\1\142\1\143\1\144\1\145\1\14\1\146\1\147"+
    "\1\150\1\151\1\152\1\153\1\154\1\14\1\155\1\14"+
    "\1\156\1\157\1\160\1\161\1\162\1\14\1\163\1\164"+
    "\1\165\1\166\1\14\1\167\1\170\1\171\1\172\1\14"+
    "\1\173\3\14\1\174\1\175\3\14\1\176\1\177\1\14"+
    "\1\200\1\201\1\202\2\14\1\0\4\14\1\203\6\14"+
    "\1\204\2\14\1\0\1\205\1\14\2\0\3\14\1\206"+
    "\1\207\1\121\2\14\1\210\1\211\1\14\1\212\2\14"+
    "\1\213\1\214\1\14\1\215\1\216\5\14\1\217\3\14"+
    "\1\220\1\221\10\14\1\222\1\14\1\223\1\224\1\225"+
    "\1\226\1\0\1\227\1\230\2\14\1\231\3\14\1\0"+
    "\3\14\1\232\1\233\1\14\1\234\1\235\1\14\1\236"+
    "\1\237\1\240\1\241\1\242\2\14\1\243\3\14\1\244"+
    "\1\245\2\24\1\246\1\24\1\247\1\250\1\251\4\0"+
    "\1\5\1\54\1\0\1\252\1\0\1\253\1\254\6\0"+
    "\1\14\1\0\1\55\7\0\1\56\1\255\1\0\1\256"+
    "\1\257\1\260\1\261\2\0\1\14\1\262\7\0\1\263"+
    "\1\0\1\264\5\0\1\265\4\0\1\266\4\0\1\267"+
    "\1\0\1\270\1\271\1\272\2\0\1\273\2\14\1\0"+
    "\1\14\1\274\1\275\1\276\1\277\1\0\1\300\1\301"+
    "\3\0\1\302\1\303\1\304\1\305\1\306\1\57\1\307"+
    "\1\310\1\311\1\312\1\313\1\314\1\315\1\316\1\0"+
    "\1\317\1\320\1\321\1\322\1\323\1\324\1\325\1\326"+
    "\1\0\1\327\1\330\1\331\1\60\1\0\1\332\1\333"+
    "\1\61\1\62\1\334\1\335\1\14\1\336\1\14\1\337"+
    "\1\340\1\0\1\341\1\252\1\342\1\343\2\0\1\344"+
    "\1\14\1\345\1\346\1\347\1\350\1\351\1\352\1\14"+
    "\1\353\1\354\1\355\1\356\1\357\1\360\1\361\5\14"+
    "\1\0\5\14\1\362\1\363\1\364\1\365\1\366\1\0"+
    "\1\367\2\14\1\0\1\64\1\0\1\370\1\371\1\0"+
    "\3\14\1\65\3\14\1\372\2\0\1\373\1\374\2\0"+
    "\1\375\1\376\1\377\1\u0100\1\u0101\2\u0102\2\u0103\2\u0104"+
    "\3\0\1\u0105\1\54\1\0\1\u0106\2\0\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\1\14\1\130\1\132\1\133"+
    "\1\134\1\135\1\136\1\137\1\140\1\142\4\0\1\143"+
    "\1\144\1\u0107\1\u0108\1\0\1\146\1\147\1\150\1\151"+
    "\1\152\1\153\1\154\1\0\1\155\1\0\1\156\1\157"+
    "\1\160\1\161\1\162\1\163\1\164\1\165\1\166\1\0"+
    "\1\167\1\170\1\171\1\172\1\173\1\0\1\174\1\175"+
    "\1\0\1\u0109\1\14\1\176\1\14\4\0\1\177\1\0"+
    "\1\200\1\201\1\202\3\0\1\14\10\0\1\203\10\0"+
    "\1\204\2\0\1\14\1\205\2\0\2\14\1\u010a\1\207"+
    "\1\0\1\210\1\211\7\14\1\221\3\14\1\u0106\1\14"+
    "\1\u010b\1\0\1\u010c\1\u010d\1\u010e\1\u010f\1\u0110\1\u0111"+
    "\4\0\1\222\1\0\2\14\1\224\1\230\1\231\3\14"+
    "\1\u0112\1\14\1\u0113\1\234\1\235\2\0\1\241\1\242"+
    "\1\u0114\2\0\1\253\1\254\1\14\1\256\1\257\1\260"+
    "\1\261\1\262\1\263\1\264\1\266\1\271\1\273\2\14"+
    "\1\274\1\275\1\276\1\277\1\300\1\302\1\303\1\304"+
    "\1\u0115\1\u0116\1\307\1\310\1\311\1\312\1\313\1\314"+
    "\1\315\1\316\1\317\1\320\1\321\1\322\1\323\1\324"+
    "\1\325\1\326\1\327\1\330\1\u0117\1\u0118\1\332\1\333"+
    "\1\u0119\1\14\1\341\2\14\1\u011a\1\u011b\1\14\1\u011c"+
    "\12\14\1\362\6\0\1\363\1\364\1\365\1\0\1\367"+
    "\1\u011d\1\u011e\1\14\1\u011f\1\u0120\2\14\1\373\1\374"+
    "\1\u0121\1\u0122\1\u0123\1\14\1\u0124\1\u0125\1\14\1\u0126"+
    "\1\14\1\u0127\1\u0128\1\u0129\1\u012a\1\u012b\1\u012c\1\u012d"+
    "\1\u012e\1\u012f\1\u010c\1\u010d\1\u010e\1\u010f\1\u0110\1\u0111"+
    "\1\0\2\14\1\u0130\1\u0131\1\u0132\1\14\1\u0133\1\0"+
    "\2\14\1\u0134\1\u0135\2\14\1\u0136\1\14\1\u0137";

  private static int [] zzUnpackAction() {
    int [] result = new int[934];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\135\0\272\0\u0117\0\u0174\0\u01d1\0\u022e\0\u028b"+
    "\0\u02e8\0\u0345\0\u03a2\0\u03ff\0\u045c\0\u04b9\0\u0516\0\u0573"+
    "\0\u0573\0\u05d0\0\u062d\0\u068a\0\u06e7\0\u0573\0\u0744\0\u07a1"+
    "\0\u07fe\0\u085b\0\u08b8\0\u0573\0\u0915\0\u0972\0\u0573\0\u0573"+
    "\0\u09cf\0\u0a2c\0\u0573\0\u0a89\0\u0ae6\0\u0b43\0\u0ba0\0\u0bfd"+
    "\0\u0c5a\0\u0cb7\0\u0d14\0\u0d71\0\u0dce\0\u0e2b\0\u0e88\0\u0ee5"+
    "\0\u0f42\0\u0f9f\0\u0ffc\0\u1059\0\u10b6\0\u1113\0\u1170\0\u11cd"+
    "\0\u122a\0\u1287\0\u12e4\0\u1341\0\u139e\0\u0573\0\u13fb\0\u1458"+
    "\0\u14b5\0\u1512\0\u156f\0\u15cc\0\u1629\0\u1686\0\u16e3\0\u1686"+
    "\0\u1740\0\u179d\0\u17fa\0\u1857\0\u18b4\0\u1911\0\u196e\0\u19cb"+
    "\0\u1a28\0\u0573\0\u0573\0\u0573\0\u1a85\0\u0573\0\u0573\0\u0573"+
    "\0\u0573\0\u0573\0\u0573\0\u0573\0\u1ae2\0\u1b3f\0\u1b9c\0\u1bf9"+
    "\0\u0573\0\u0573\0\u1c56\0\u0345\0\u1cb3\0\u1d10\0\u1d6d\0\u1d6d"+
    "\0\u1dca\0\u1e27\0\u1e84\0\u1ee1\0\u1f3e\0\u1f9b\0\u1ff8\0\u2055"+
    "\0\u068a\0\u07a1\0\u20b2\0\u210f\0\u216c\0\u21c9\0\u2226\0\u2283"+
    "\0\u09cf\0\u22e0\0\u233d\0\u239a\0\u23f7\0\u2454\0\u24b1\0\u250e"+
    "\0\u256b\0\u25c8\0\u2625\0\u2682\0\u26df\0\u273c\0\u2799\0\u27f6"+
    "\0\u2853\0\u28b0\0\u290d\0\u296a\0\u29c7\0\u2a24\0\u2a81\0\u2ade"+
    "\0\u2b3b\0\u2b98\0\u2bf5\0\u2c52\0\u2caf\0\u2d0c\0\u2d69\0\u2dc6"+
    "\0\u2e23\0\u2e80\0\u2edd\0\u2f3a\0\u2f97\0\u2ff4\0\u3051\0\u30ae"+
    "\0\u310b\0\u3168\0\u31c5\0\u3222\0\u327f\0\u32dc\0\u3339\0\u3396"+
    "\0\u33f3\0\u3450\0\u34ad\0\u350a\0\u3567\0\u35c4\0\u3621\0\u367e"+
    "\0\u36db\0\u3738\0\u3795\0\u37f2\0\u384f\0\u38ac\0\u3909\0\u3966"+
    "\0\u39c3\0\u3a20\0\u3a7d\0\u3ada\0\u3b37\0\u3b94\0\u3bf1\0\u3c4e"+
    "\0\u3cab\0\u3d08\0\u3d65\0\u3dc2\0\u3e1f\0\u3e7c\0\u3ed9\0\u3f36"+
    "\0\u3f93\0\u3ff0\0\u404d\0\u40aa\0\u4107\0\u4164\0\u41c1\0\u421e"+
    "\0\u427b\0\u42d8\0\u4335\0\u4392\0\u43ef\0\u444c\0\u44a9\0\u4506"+
    "\0\u4563\0\u45c0\0\u461d\0\u467a\0\u0573\0\u0573\0\u0573\0\u0573"+
    "\0\u0573\0\u46d7\0\u4734\0\u1686\0\u1458\0\u0573\0\u1512\0\u156f"+
    "\0\u0573\0\u0573\0\u4791\0\u47ee\0\u14b5\0\u14b5\0\u14b5\0\u14b5"+
    "\0\u484b\0\u48a8\0\u4905\0\u14b5\0\u4962\0\u49bf\0\u4a1c\0\u4a79"+
    "\0\u14b5\0\u4ad6\0\u4b33\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573"+
    "\0\u0573\0\u0573\0\u0573\0\u0573\0\u4b90\0\u4bed\0\u4c4a\0\u4ca7"+
    "\0\u4d04\0\u0573\0\u4d61\0\u0573\0\u4dbe\0\u4e1b\0\u4e78\0\u4ed5"+
    "\0\u4f32\0\u4f8f\0\u0573\0\u4fec\0\u5049\0\u50a6\0\u5103\0\u5160"+
    "\0\u51bd\0\u521a\0\u5277\0\u52d4\0\u5331\0\u0a2c\0\u538e\0\u53eb"+
    "\0\u5448\0\u54a5\0\u5502\0\u555f\0\u55bc\0\u5619\0\u0a2c\0\u5676"+
    "\0\u56d3\0\u5730\0\u578d\0\u57ea\0\u5847\0\u58a4\0\u5901\0\u595e"+
    "\0\u59bb\0\u5a18\0\u5a75\0\u5ad2\0\u5b2f\0\u5b8c\0\u5be9\0\u5c46"+
    "\0\u5ca3\0\u5d00\0\u5d5d\0\u5dba\0\u5e17\0\u5e74\0\u5ed1\0\u5f2e"+
    "\0\u5f8b\0\u5fe8\0\u6045\0\u60a2\0\u60ff\0\u615c\0\u61b9\0\u6216"+
    "\0\u6273\0\u62d0\0\u632d\0\u638a\0\u63e7\0\u6444\0\u64a1\0\u64fe"+
    "\0\u655b\0\u65b8\0\u6615\0\u6672\0\u66cf\0\u672c\0\u6789\0\u67e6"+
    "\0\u6843\0\u68a0\0\u68fd\0\u695a\0\u69b7\0\u6a14\0\u6a71\0\u6ace"+
    "\0\u6b2b\0\u6b88\0\u6be5\0\u6c42\0\u6c9f\0\u6cfc\0\u6d59\0\u6db6"+
    "\0\u6e13\0\u6e70\0\u6ecd\0\u6f2a\0\u6f87\0\u6fe4\0\u7041\0\u709e"+
    "\0\u70fb\0\u7158\0\u71b5\0\u7212\0\u726f\0\u72cc\0\u7329\0\u7386"+
    "\0\u0a2c\0\u73e3\0\u7440\0\u0a2c\0\u0a2c\0\u749d\0\u0a2c\0\u0a2c"+
    "\0\u74fa\0\u7557\0\u75b4\0\u7611\0\u766e\0\u0a2c\0\u76cb\0\u7728"+
    "\0\u7785\0\u0a2c\0\u77e2\0\u783f\0\u789c\0\u78f9\0\u7956\0\u79b3"+
    "\0\u7a10\0\u7a6d\0\u7aca\0\u7b27\0\u7b84\0\u7be1\0\u7c3e\0\u0a2c"+
    "\0\u0a2c\0\u7c9b\0\u0a2c\0\u7cf8\0\u7d55\0\u7db2\0\u7e0f\0\u7e6c"+
    "\0\u7ec9\0\u7f26\0\u7f83\0\u7fe0\0\u803d\0\u809a\0\u0a2c\0\u0a2c"+
    "\0\u80f7\0\u8154\0\u81b1\0\u820e\0\u0a2c\0\u0a2c\0\u0a2c\0\u826b"+
    "\0\u82c8\0\u8325\0\u8382\0\u0a2c\0\u83df\0\u843c\0\u8499\0\u14b5"+
    "\0\u14b5\0\u84f6\0\u8553\0\u14b5\0\u85b0\0\u14b5\0\u14b5\0\u14b5"+
    "\0\u4b90\0\u860d\0\u866a\0\u86c7\0\u8724\0\u8781\0\u87de\0\u0573"+
    "\0\u883b\0\u8898\0\u88f5\0\u8952\0\u89af\0\u8a0c\0\u8a69\0\u8ac6"+
    "\0\u8b23\0\u8b80\0\u8bdd\0\u0573\0\u8c3a\0\u8c97\0\u8cf4\0\u8d51"+
    "\0\u8dae\0\u8e0b\0\u8e68\0\u0573\0\u0a2c\0\u8ec5\0\u8f22\0\u8f7f"+
    "\0\u8fdc\0\u9039\0\u9096\0\u90f3\0\u9150\0\u91ad\0\u920a\0\u9267"+
    "\0\u92c4\0\u9321\0\u937e\0\u93db\0\u9438\0\u9495\0\u94f2\0\u954f"+
    "\0\u95ac\0\u9609\0\u9666\0\u96c3\0\u9720\0\u0a2c\0\u977d\0\u97da"+
    "\0\u9837\0\u9894\0\u98f1\0\u994e\0\u99ab\0\u9a08\0\u9a65\0\u0a2c"+
    "\0\u9ac2\0\u0a2c\0\u9b1f\0\u0a2c\0\u9b7c\0\u9bd9\0\u9c36\0\u9c93"+
    "\0\u9cf0\0\u9d4d\0\u9daa\0\u9e07\0\u9e64\0\u9ec1\0\u9f1e\0\u9f7b"+
    "\0\u9fd8\0\u0a2c\0\ua035\0\ua092\0\ua0ef\0\ua14c\0\ua1a9\0\ua206"+
    "\0\u0a2c\0\ua263\0\u0573\0\ua2c0\0\ua31d\0\ua37a\0\ua3d7\0\ua434"+
    "\0\ua491\0\ua4ee\0\ua54b\0\ua5a8\0\ua605\0\ua662\0\ua6bf\0\ua71c"+
    "\0\ua779\0\ua7d6\0\ua833\0\ua890\0\ua8ed\0\ua94a\0\ua9a7\0\uaa04"+
    "\0\u0573\0\uaa61\0\uaabe\0\uab1b\0\u0573\0\u0573\0\uab78\0\u0a2c"+
    "\0\uabd5\0\u0a2c\0\uac32\0\u0a2c\0\u0a2c\0\uac8f\0\uacec\0\u0a2c"+
    "\0\u0a2c\0\u0a2c\0\uad49\0\uada6\0\u0a2c\0\uae03\0\u0a2c\0\u0a2c"+
    "\0\u0a2c\0\u0a2c\0\u0a2c\0\u0a2c\0\uae60\0\u0a2c\0\u0a2c\0\u0a2c"+
    "\0\u0a2c\0\u0a2c\0\u0a2c\0\u0a2c\0\uaebd\0\uaf1a\0\uaf77\0\uafd4"+
    "\0\ub031\0\ub08e\0\ub0eb\0\ub148\0\ub1a5\0\ub202\0\ub25f\0\ub2bc"+
    "\0\ub319\0\ub376\0\ub3d3\0\ub430\0\ub48d\0\ub4ea\0\ub547\0\ub5a4"+
    "\0\ub601\0\u0573\0\ub65e\0\u0a2c\0\u0a2c\0\ub6bb\0\ub718\0\ub775"+
    "\0\ub7d2\0\u0573\0\ub82f\0\ub88c\0\ub8e9\0\u0a2c\0\ub946\0\ub9a3"+
    "\0\uba00\0\uba5d\0\ubaba\0\ubb17\0\u0a2c\0\ubb74\0\u0a2c\0\u0a2c"+
    "\0\u0a2c\0\u0573\0\u14b5\0\u0573\0\u14b5\0\u0573\0\u14b5\0\ubbd1"+
    "\0\ubc2e\0\ubc8b\0\u07fe\0\u0573\0\ubce8\0\u0573\0\ubd45\0\ubda2"+
    "\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\ubdff\0\u0573"+
    "\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573"+
    "\0\ube5c\0\ubeb9\0\ubf16\0\ubf73\0\u0573\0\u0573\0\u0a2c\0\u0a2c"+
    "\0\ubfd0\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573"+
    "\0\uc02d\0\u0573\0\uc08a\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573"+
    "\0\u0573\0\u0573\0\u0573\0\u0573\0\uc0e7\0\u0573\0\u0573\0\u0573"+
    "\0\u0573\0\u0573\0\uc144\0\u0573\0\u0573\0\uc1a1\0\u0a2c\0\uc1fe"+
    "\0\u0573\0\uc25b\0\uc2b8\0\uc315\0\uc372\0\uc3cf\0\u0573\0\uc42c"+
    "\0\u0573\0\u0573\0\u0573\0\uc489\0\uc4e6\0\uc543\0\uc5a0\0\uc5fd"+
    "\0\uc65a\0\uc6b7\0\uc714\0\uc771\0\uc7ce\0\uc82b\0\uc888\0\u0573"+
    "\0\uc8e5\0\uc942\0\uc99f\0\uc9fc\0\uca59\0\ucab6\0\ucb13\0\ucb70"+
    "\0\u0573\0\ucbcd\0\ucc2a\0\ucc87\0\u0573\0\ucce4\0\ucd41\0\ucd9e"+
    "\0\ucdfb\0\u0a2c\0\u0573\0\uce58\0\u0573\0\u0573\0\uceb5\0\ucf12"+
    "\0\ucf6f\0\ucfcc\0\ud029\0\ud086\0\ud0e3\0\u0573\0\ud140\0\ud19d"+
    "\0\ud1fa\0\u0a2c\0\ud257\0\u0a2c\0\ud2b4\0\ud311\0\ud36e\0\ud3cb"+
    "\0\ud428\0\ud485\0\ud4e2\0\ud53f\0\ud59c\0\ud5f9\0\ud656\0\u0573"+
    "\0\ud6b3\0\ud710\0\ud76d\0\u0573\0\u0573\0\u0573\0\ud7ca\0\ud827"+
    "\0\ud884\0\u0a2c\0\ud8e1\0\u0a2c\0\u0573\0\u0573\0\ud93e\0\ud99b"+
    "\0\u0573\0\u0573\0\u0a2c\0\ud9f8\0\uda55\0\u0573\0\u0573\0\udab2"+
    "\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573"+
    "\0\u0573\0\u0573\0\udb0f\0\udb6c\0\u0573\0\u0573\0\u0573\0\u0573"+
    "\0\u0573\0\u0573\0\u0573\0\u0573\0\u0a2c\0\u0a2c\0\u0573\0\u0573"+
    "\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573"+
    "\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573\0\u0573"+
    "\0\u0a2c\0\u0a2c\0\u0573\0\u0573\0\u0a2c\0\udbc9\0\u0573\0\udc26"+
    "\0\udc83\0\u0a2c\0\u0a2c\0\udce0\0\u0a2c\0\udd3d\0\udd9a\0\uddf7"+
    "\0\ude54\0\udeb1\0\udf0e\0\udf6b\0\udfc8\0\ue025\0\ue082\0\u0573"+
    "\0\ue0df\0\ue13c\0\ue199\0\ue1f6\0\ue253\0\ue2b0\0\u0573\0\u0573"+
    "\0\u0573\0\ue30d\0\u0573\0\u0a2c\0\u0a2c\0\ue36a\0\u0a2c\0\u0a2c"+
    "\0\ue3c7\0\ue424\0\u0573\0\u0573\0\ue481\0\u0a2c\0\u0a2c\0\ue4de"+
    "\0\u0a2c\0\u0a2c\0\ue53b\0\u0a2c\0\ue598\0\u0a2c\0\u0a2c\0\u0a2c"+
    "\0\u0a2c\0\u0a2c\0\u0a2c\0\u0a2c\0\u0a2c\0\u0a2c\0\u0573\0\u0573"+
    "\0\u0573\0\u0573\0\u0573\0\u0573\0\ue5f5\0\ue652\0\ue6af\0\u0a2c"+
    "\0\u0a2c\0\u0a2c\0\ue70c\0\u0a2c\0\ue769\0\ue7c6\0\ue823\0\u0a2c"+
    "\0\u0573\0\ue880\0\ue8dd\0\u0a2c\0\ue93a\0\u0a2c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[934];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\1\22\1\23\1\20\1\22\1\23\1\24"+
    "\1\20\1\25\2\24\2\20\1\24\1\20\1\24\1\20"+
    "\1\24\1\25\1\26\4\25\1\24\24\25\21\20\31\25"+
    "\5\24\1\20\1\21\1\27\2\20\1\27\1\20\1\30"+
    "\1\20\1\31\1\20\1\30\2\20\1\30\3\20\1\30"+
    "\1\31\1\20\4\31\1\30\12\31\1\32\11\31\21\20"+
    "\16\31\1\32\12\31\5\30\1\20\1\21\1\33\1\23"+
    "\1\20\1\33\1\23\1\20\1\34\24\20\1\35\6\20"+
    "\1\36\11\20\1\37\1\40\26\20\1\35\6\20\1\36"+
    "\20\20\1\21\1\27\1\23\1\20\1\27\1\23\1\41"+
    "\1\20\1\42\1\20\1\41\2\20\1\41\1\20\1\43"+
    "\1\20\1\41\1\42\1\20\1\44\1\45\1\42\1\46"+
    "\1\41\1\47\1\50\1\51\1\52\1\53\2\42\1\54"+
    "\1\55\1\42\1\56\1\57\1\60\1\61\1\42\1\62"+
    "\1\63\1\64\1\42\1\65\1\20\1\40\17\20\1\44"+
    "\1\45\1\42\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\2\42\1\54\1\55\1\42\1\56\1\57\1\60\1\61"+
    "\1\42\1\62\1\63\1\64\1\42\1\65\1\42\5\41"+
    "\1\20\1\21\1\66\2\20\1\66\16\20\1\67\110\20"+
    "\1\70\1\21\1\71\1\72\1\70\1\71\1\72\10\70"+
    "\1\73\1\20\1\74\113\70\1\20\1\21\1\75\1\23"+
    "\1\20\1\75\1\76\1\77\1\100\1\101\1\102\1\77"+
    "\1\103\1\104\1\77\1\105\1\106\1\107\1\110\1\101"+
    "\1\111\1\112\3\101\1\77\1\113\1\114\1\115\12\101"+
    "\1\116\3\101\1\117\1\120\1\101\1\20\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\1\133\1\134\1\135\1\136\1\137\1\140\1\112\3\101"+
    "\1\113\1\114\1\115\12\101\1\116\3\101\1\117\1\120"+
    "\2\101\5\77\1\20\1\21\5\20\1\141\3\20\1\141"+
    "\2\20\1\141\12\20\1\141\45\20\31\142\5\141\1\23"+
    "\1\21\1\143\1\23\1\20\1\27\127\23\2\0\1\144"+
    "\2\0\1\144\205\0\1\145\60\0\1\146\2\0\1\146"+
    "\127\0\1\147\1\0\1\147\1\150\2\0\1\150\37\147"+
    "\1\151\2\147\1\152\1\147\1\153\43\147\1\151\2\147"+
    "\1\152\1\147\1\153\10\147\7\0\1\16\1\0\1\154"+
    "\1\0\1\16\2\0\1\16\3\0\1\16\1\154\1\0"+
    "\4\154\1\16\24\154\21\0\31\154\5\16\15\0\1\155"+
    "\2\0\1\155\4\0\5\155\45\0\4\155\171\0\1\22"+
    "\2\0\1\22\1\0\1\156\1\0\1\157\2\156\2\0"+
    "\1\156\1\0\1\156\1\0\1\156\1\157\1\156\4\157"+
    "\1\156\12\157\1\160\11\157\21\0\16\157\1\160\12\157"+
    "\5\156\1\23\1\0\2\23\2\0\127\23\7\0\1\161"+
    "\1\0\1\25\2\161\2\0\1\161\1\0\1\161\1\0"+
    "\1\161\1\25\1\0\4\25\1\161\24\25\21\0\31\25"+
    "\5\161\7\0\1\25\1\0\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\34\25\21\0\36\25\2\0\1\27\2\0"+
    "\1\27\136\0\1\162\1\0\1\31\1\0\1\162\2\0"+
    "\1\162\3\0\1\162\1\31\1\0\4\31\1\162\24\31"+
    "\21\0\31\31\5\162\7\0\1\31\1\0\1\31\1\0"+
    "\1\31\2\0\1\31\3\0\2\31\1\0\31\31\21\0"+
    "\36\31\7\0\1\31\1\0\1\31\1\0\1\31\2\0"+
    "\1\31\3\0\2\31\1\0\5\31\1\163\23\31\21\0"+
    "\4\31\1\163\31\31\2\0\1\33\1\164\1\0\1\33"+
    "\1\164\26\0\1\165\6\0\1\166\41\0\1\165\6\0"+
    "\1\166\67\0\1\167\50\0\1\167\45\0\1\170\50\0"+
    "\1\170\40\0\1\171\1\0\1\42\1\0\1\171\2\0"+
    "\1\171\3\0\1\171\1\42\1\0\4\42\1\171\24\42"+
    "\21\0\31\42\5\171\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\1\42\1\173\1\174\1\175"+
    "\2\42\1\176\1\42\1\177\1\200\1\201\1\202\3\42"+
    "\1\203\1\204\1\42\1\205\2\42\1\206\1\207\1\210"+
    "\1\42\21\0\1\42\1\173\1\174\1\175\1\42\1\176"+
    "\1\42\1\177\1\200\1\201\1\202\3\42\1\203\1\204"+
    "\1\42\1\205\2\42\1\206\1\207\1\210\7\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\1\211\2\42\1\212\2\42\1\213\1\42"+
    "\1\214\1\42\1\215\1\216\2\42\1\217\1\220\1\221"+
    "\1\42\1\222\1\42\1\223\1\224\1\42\1\225\1\42"+
    "\21\0\1\211\2\42\1\212\1\42\1\213\1\42\1\214"+
    "\1\42\1\215\1\216\2\42\1\217\1\220\1\221\1\42"+
    "\1\222\1\42\1\223\1\224\1\42\1\225\7\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\1\226\2\42\1\227\4\42\1\230\3\42"+
    "\1\231\4\42\1\232\7\42\21\0\1\226\2\42\1\227"+
    "\3\42\1\230\3\42\1\231\4\42\1\232\15\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\1\233\1\234\1\42\1\235\2\42\1\236"+
    "\1\237\10\42\1\240\10\42\21\0\1\233\1\234\1\42"+
    "\1\235\1\42\1\236\1\237\10\42\1\240\16\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\1\241\2\42\1\242\7\42\1\243\3\42"+
    "\1\244\1\245\1\246\7\42\21\0\1\241\2\42\1\242"+
    "\6\42\1\243\3\42\1\244\1\245\1\246\15\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\1\247\1\250\3\42\1\251\1\252\5\42"+
    "\1\253\7\42\1\254\3\42\1\255\21\0\1\247\1\250"+
    "\2\42\1\251\1\252\5\42\1\253\7\42\1\254\3\42"+
    "\1\255\6\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\3\42\1\256\2\42"+
    "\1\257\5\42\1\260\3\42\1\261\1\262\1\42\1\263"+
    "\1\264\2\42\1\265\1\266\21\0\3\42\1\256\1\42"+
    "\1\257\5\42\1\260\3\42\1\261\1\262\1\42\1\263"+
    "\1\264\2\42\1\265\1\266\6\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\5\42\1\267\23\42\21\0\4\42\1\267\31\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\3\42\1\270\3\42\1\271\1\42\1\272"+
    "\6\42\1\273\10\42\21\0\3\42\1\270\2\42\1\271"+
    "\1\42\1\272\6\42\1\273\16\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\1\274\16\42\1\275\6\42\1\276\2\42\21\0\1\274"+
    "\15\42\1\275\6\42\1\276\10\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\5\42\1\277\1\300\1\42\1\301\10\42\1\302\4\42"+
    "\1\303\2\42\21\0\4\42\1\277\1\300\1\42\1\301"+
    "\10\42\1\302\4\42\1\303\10\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\1\42\1\304\6\42\1\305\10\42\1\306\7\42\21\0"+
    "\1\42\1\304\5\42\1\305\10\42\1\306\15\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\7\42\1\307\12\42\1\310\1\42\1\311"+
    "\4\42\21\0\6\42\1\307\12\42\1\310\1\42\1\311"+
    "\12\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\3\42\1\312\1\42\1\313"+
    "\2\42\1\314\10\42\1\315\2\42\1\316\1\42\1\317"+
    "\2\42\21\0\3\42\1\312\1\313\2\42\1\314\10\42"+
    "\1\315\2\42\1\316\1\42\1\317\10\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\1\320\7\42\1\321\10\42\1\322\3\42\1\323"+
    "\3\42\21\0\1\320\6\42\1\321\10\42\1\322\3\42"+
    "\1\323\11\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\1\324\4\42\1\325"+
    "\2\42\1\326\13\42\1\327\1\330\3\42\21\0\1\324"+
    "\3\42\1\325\2\42\1\326\13\42\1\327\1\330\11\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\20\42\1\331\10\42\21\0\17\42"+
    "\1\331\16\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\7\42\1\332\14\42"+
    "\1\333\4\42\21\0\6\42\1\332\14\42\1\333\12\42"+
    "\2\0\1\66\2\0\1\66\147\0\1\334\4\0\1\335"+
    "\1\336\1\337\1\340\46\0\1\335\1\336\1\337\1\340"+
    "\32\0\1\70\2\0\2\70\1\0\11\70\3\0\113\70"+
    "\2\0\1\71\2\0\1\71\127\0\1\72\1\0\1\23"+
    "\1\72\1\70\1\0\11\72\3\23\113\72\1\73\1\0"+
    "\15\73\1\341\1\342\114\73\1\74\1\0\16\74\1\343"+
    "\1\341\113\74\2\0\1\75\2\0\1\75\136\0\1\77"+
    "\1\0\1\101\1\344\1\77\2\0\1\77\1\0\1\344"+
    "\1\0\1\344\1\101\1\0\4\101\1\77\24\101\21\0"+
    "\31\101\5\77\7\0\1\345\1\0\1\345\1\0\1\345"+
    "\2\0\1\345\7\0\1\345\2\0\6\345\41\0\1\345"+
    "\2\0\5\345\20\0\5\345\7\0\1\101\1\346\3\101"+
    "\2\0\1\101\1\0\1\101\1\0\34\101\21\0\36\101"+
    "\7\0\1\344\1\0\1\101\1\344\1\347\2\0\1\347"+
    "\1\0\1\344\1\0\1\344\1\101\1\0\4\101\1\347"+
    "\24\101\21\0\31\101\2\347\1\344\2\347\15\0\2\350"+
    "\12\0\1\350\120\0\1\351\117\0\1\105\1\0\15\105"+
    "\1\352\1\353\114\105\7\0\1\344\1\0\1\101\2\344"+
    "\2\0\1\344\1\0\1\344\1\0\1\344\1\101\1\0"+
    "\4\101\1\344\24\101\21\0\31\101\5\344\1\107\1\0"+
    "\16\107\1\354\1\352\113\107\7\0\1\344\1\0\1\101"+
    "\2\344\2\0\1\344\1\0\1\344\1\0\1\344\1\101"+
    "\1\0\1\355\1\356\1\357\1\360\1\344\24\101\21\0"+
    "\1\355\1\356\1\357\1\360\25\101\5\344\7\0\1\101"+
    "\1\346\3\101\2\0\1\101\1\0\1\101\1\0\3\101"+
    "\1\361\10\101\1\362\10\101\1\363\1\101\1\364\4\101"+
    "\21\0\1\361\7\101\1\362\10\101\1\363\1\101\1\364"+
    "\12\101\7\0\1\101\1\346\2\101\1\365\2\0\1\365"+
    "\1\0\1\101\1\0\7\101\1\365\24\101\21\0\31\101"+
    "\2\365\1\101\2\365\7\0\1\101\1\346\3\101\2\0"+
    "\1\101\1\0\1\101\1\0\11\101\1\366\22\101\21\0"+
    "\5\101\1\366\30\101\7\0\1\101\1\346\2\101\1\367"+
    "\2\0\1\367\1\0\1\101\1\0\7\101\1\367\4\101"+
    "\1\370\17\101\21\0\10\101\1\370\20\101\2\367\1\101"+
    "\2\367\7\0\1\101\1\346\3\101\2\0\1\101\1\0"+
    "\1\101\1\0\11\101\1\371\22\101\21\0\5\101\1\371"+
    "\30\101\7\0\1\101\1\346\3\101\2\0\1\101\1\0"+
    "\1\101\1\0\3\101\1\372\30\101\21\0\1\372\35\101"+
    "\7\0\1\101\1\346\3\101\2\0\1\101\1\0\1\101"+
    "\1\0\4\101\1\373\27\101\21\0\1\101\1\373\34\101"+
    "\57\0\1\374\140\0\1\375\130\0\1\376\151\0\1\377"+
    "\117\0\1\u0100\15\0\1\u0101\1\u0102\115\0\1\u0103\16\0"+
    "\1\u0104\36\0\1\23\1\0\1\143\1\23\1\0\1\27"+
    "\127\23\7\0\2\u0105\1\u0106\2\u0105\2\0\1\u0105\1\0"+
    "\1\u0105\1\0\1\u0105\1\u0106\1\u0105\4\u0106\1\u0105\24\u0106"+
    "\21\0\31\u0106\5\u0105\2\0\1\146\2\0\1\146\40\0"+
    "\1\u0107\50\0\1\u0107\15\0\1\147\1\0\1\147\1\150"+
    "\2\0\1\150\127\147\1\0\1\147\1\150\2\0\1\150"+
    "\42\147\1\u0108\50\147\1\u0108\13\147\1\0\1\147\1\150"+
    "\2\0\1\150\44\147\1\153\50\147\1\153\11\147\1\0"+
    "\1\147\1\150\2\0\1\150\41\147\1\u0109\50\147\1\u0109"+
    "\13\147\7\0\1\154\1\0\1\154\1\0\1\154\2\0"+
    "\1\154\3\0\2\154\1\0\31\154\21\0\36\154\24\0"+
    "\1\u010a\117\0\1\156\1\0\1\157\2\156\2\0\1\156"+
    "\1\0\1\156\1\0\1\156\1\157\1\0\4\157\1\156"+
    "\24\157\21\0\31\157\5\156\7\0\1\157\1\u010b\3\157"+
    "\2\0\1\157\1\0\1\157\1\0\34\157\1\u010c\20\0"+
    "\36\157\7\0\1\157\1\u010b\3\157\2\0\1\157\1\0"+
    "\1\157\1\0\10\157\1\u010d\23\157\1\u010c\20\0\4\157"+
    "\1\u010d\31\157\7\0\1\31\1\0\1\31\1\0\1\31"+
    "\2\0\1\31\3\0\2\31\1\0\6\31\1\u010e\22\31"+
    "\21\0\5\31\1\u010e\30\31\1\164\1\0\2\164\2\0"+
    "\127\164\50\0\1\u010f\50\0\1\u010f\45\0\1\u0110\50\0"+
    "\1\u0110\104\0\1\u0111\50\0\1\u0111\43\0\1\u0112\50\0"+
    "\1\u0112\45\0\1\u0113\2\0\1\u0113\4\0\5\u0113\45\0"+
    "\4\u0113\41\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\6\42\1\u0114\22\42\21\0"+
    "\5\42\1\u0114\30\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\5\42\1\u0115"+
    "\23\42\21\0\4\42\1\u0115\31\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\1\u0116\7\42\1\u0117\10\42\1\u0118\3\42\1\u0119\3\42"+
    "\21\0\1\u0116\6\42\1\u0117\10\42\1\u0118\3\42\1\u0119"+
    "\11\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\1\u011a\5\42\1\u011b\22\42"+
    "\21\0\1\u011a\4\42\1\u011b\30\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\6\42\1\u011c\14\42\1\u011d\1\42\1\u011e\3\42\21\0"+
    "\5\42\1\u011c\14\42\1\u011d\1\42\1\u011e\11\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u011f\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\10\42\1\u0120\14\42\1\u0121\3\42\21\0\7\42\1\u0120"+
    "\14\42\1\u0121\11\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\1\u0122\13\42"+
    "\1\u0123\14\42\21\0\1\u0122\12\42\1\u0123\22\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\14\42\1\u0124\14\42\21\0\13\42\1\u0124"+
    "\22\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\10\42\1\u0125\20\42\21\0"+
    "\7\42\1\u0125\26\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\3\42\1\u0126"+
    "\2\42\1\u0127\22\42\21\0\3\42\1\u0126\1\42\1\u0127"+
    "\30\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u0128\21\42\1\u0129\7\42\21\0"+
    "\20\42\1\u0129\15\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\1\42\1\u012a"+
    "\27\42\21\0\1\42\1\u012a\34\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\1\u012b\5\42\1\u012c\22\42\21\0\1\u012b\4\42\1\u012c"+
    "\30\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\1\u012d\7\42\1\u012e\13\42"+
    "\1\u012f\4\42\21\0\1\u012d\6\42\1\u012e\13\42\1\u012f"+
    "\12\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\1\u0130\7\42\1\u0131\5\42"+
    "\1\u0132\2\42\1\u0133\3\42\1\u0134\3\42\21\0\1\u0130"+
    "\6\42\1\u0131\5\42\1\u0132\2\42\1\u0133\3\42\1\u0134"+
    "\11\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\1\u0135\2\42\1\u0136\2\42"+
    "\1\u0137\4\42\1\u0138\15\42\21\0\1\u0135\2\42\1\u0136"+
    "\1\42\1\u0137\4\42\1\u0138\23\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\23\42\1\u0139\5\42\21\0\22\42\1\u0139\13\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\10\42\1\u013a\14\42\1\u013b\3\42\21\0"+
    "\7\42\1\u013a\14\42\1\u013b\11\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\1\u013c\13\42\1\u013d\14\42\21\0\1\u013c\12\42\1\u013d"+
    "\22\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\22\42\1\u013e\6\42\21\0"+
    "\21\42\1\u013e\14\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\14\42\1\u013f"+
    "\14\42\21\0\13\42\1\u013f\22\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\10\42\1\u0140\20\42\21\0\7\42\1\u0140\26\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\3\42\1\u0141\25\42\21\0\3\42\1\u0141"+
    "\32\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\5\42\1\u0142\23\42\21\0"+
    "\4\42\1\u0142\31\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\1\u0143\30\42"+
    "\21\0\1\u0143\35\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\1\u0144\5\42"+
    "\1\u0145\22\42\21\0\1\u0144\4\42\1\u0145\30\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\3\42\1\u0146\20\42\1\u0147\4\42\21\0"+
    "\3\42\1\u0146\17\42\1\u0147\12\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\10\42\1\u0148\20\42\21\0\7\42\1\u0148\26\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\5\42\1\u0149\23\42\21\0\4\42\1\u0149"+
    "\31\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\1\u014a\17\42\1\u014b\10\42"+
    "\21\0\1\u014a\16\42\1\u014b\16\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\5\42\1\u014c\23\42\21\0\4\42\1\u014c\31\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\3\42\1\u014d\20\42\1\u014e\4\42\21\0"+
    "\3\42\1\u014d\17\42\1\u014e\12\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\6\42\1\u014f\22\42\21\0\5\42\1\u014f\30\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\14\42\1\u0150\14\42\21\0\13\42\1\u0150"+
    "\22\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\31\42\21\0\32\42\1\u0151"+
    "\3\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\7\42\1\u0152\21\42\21\0"+
    "\6\42\1\u0152\27\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\7\42\1\u0153"+
    "\21\42\21\0\6\42\1\u0153\27\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\10\42\1\u0154\20\42\21\0\7\42\1\u0154\26\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\24\42\1\u0155\4\42\21\0\23\42\1\u0155"+
    "\12\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\16\42\1\u0156\12\42\21\0"+
    "\15\42\1\u0156\20\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\22\42\1\u0157"+
    "\6\42\21\0\21\42\1\u0157\14\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\21\42\1\u0158\7\42\21\0\20\42\1\u0158\15\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\7\42\1\u0159\21\42\21\0\6\42\1\u0159"+
    "\27\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u015a\10\42\1\u015b\20\42\21\0"+
    "\7\42\1\u015b\26\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\3\42\1\u015c"+
    "\2\42\1\u015d\1\42\1\u015e\1\u015f\1\u0160\1\u0161\3\42"+
    "\1\u0162\1\u0163\1\42\1\u0164\1\42\1\u0165\1\u0166\1\42"+
    "\1\u0167\1\42\21\0\3\42\1\u015c\1\42\1\u015d\1\42"+
    "\1\u015e\1\u015f\1\u0160\1\u0161\3\42\1\u0162\1\u0163\1\42"+
    "\1\u0164\1\42\1\u0165\1\u0166\1\42\1\u0167\7\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\25\42\1\u0168\3\42\21\0\24\42\1\u0168"+
    "\11\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u0169\1\42\1\u016a\27\42\21\0"+
    "\1\42\1\u016a\34\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\27\42\1\u016b"+
    "\1\42\21\0\26\42\1\u016b\7\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u016c"+
    "\31\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u016d\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\1\u016e\30\42\21\0\1\u016e"+
    "\35\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\13\42\1\u016f\15\42\21\0"+
    "\12\42\1\u016f\23\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\20\42\1\u0170"+
    "\10\42\21\0\17\42\1\u0170\16\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\7\42\1\u0171\21\42\21\0\6\42\1\u0171\27\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\24\42\1\u0172\4\42\21\0\23\42\1\u0172"+
    "\12\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\26\42\1\u0173\2\42\21\0"+
    "\25\42\1\u0173\10\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\10\42\1\u0174"+
    "\20\42\21\0\7\42\1\u0174\26\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\10\42\1\u0175\20\42\21\0\7\42\1\u0175\26\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\12\42\1\u0176\12\42\1\u0177\3\42\21\0"+
    "\11\42\1\u0176\12\42\1\u0177\11\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\14\42\1\u0178\7\42\1\u0179\4\42\21\0\13\42\1\u0178"+
    "\7\42\1\u0179\12\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\3\42\1\u017a"+
    "\25\42\21\0\3\42\1\u017a\32\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\20\42\1\u017b\10\42\21\0\17\42\1\u017b\16\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\u017c\3\0"+
    "\2\42\1\172\1\42\1\u017d\1\42\1\u017e\2\42\1\u017f"+
    "\1\u0180\1\u0181\1\42\1\u0182\4\42\1\u0183\1\u0184\1\42"+
    "\1\u0185\6\42\21\0\1\42\1\u017d\1\42\1\u017e\1\42"+
    "\1\u017f\1\u0180\1\u0181\1\42\1\u0182\4\42\1\u0183\1\u0184"+
    "\1\42\1\u0185\7\42\1\u0186\4\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\3\42\1\u0187\2\42\1\u0188\5\42\1\u0189\14\42\21\0"+
    "\3\42\1\u0187\1\42\1\u0188\5\42\1\u0189\22\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\24\42\1\u018a\4\42\21\0\23\42\1\u018a"+
    "\12\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\22\42\1\u018b\6\42\21\0"+
    "\21\42\1\u018b\14\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\17\42\1\u018c"+
    "\11\42\21\0\16\42\1\u018c\17\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\6\42\1\u018d\22\42\21\0\5\42\1\u018d\30\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\31\42\21\0\32\42\1\u018e\3\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\30\42\1\u018f\21\0\27\42\1\u018f\6\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\27\42\1\u0190\1\42\21\0\26\42"+
    "\1\u0190\7\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\3\42\1\u0191\25\42"+
    "\21\0\3\42\1\u0191\32\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\6\42"+
    "\1\u0192\22\42\21\0\5\42\1\u0192\30\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\5\42\1\u0193\4\42\1\u0194\16\42\21\0\4\42"+
    "\1\u0193\4\42\1\u0194\24\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\3\42"+
    "\1\u0195\16\42\1\u0196\2\42\1\u0197\3\42\21\0\3\42"+
    "\1\u0195\15\42\1\u0196\2\42\1\u0197\11\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\7\42\1\u0198\21\42\21\0\6\42\1\u0198\27\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\25\42\1\u0199\3\42\21\0\24\42"+
    "\1\u0199\11\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\u019a\12\42\1\u019b\1\42"+
    "\1\u019c\14\42\21\0\11\42\1\u019b\1\42\1\u019c\22\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\10\42\1\u019d\20\42\21\0\7\42"+
    "\1\u019d\26\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\12\42\1\u019e\16\42"+
    "\21\0\11\42\1\u019e\24\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\5\42"+
    "\1\u019f\23\42\21\0\4\42\1\u019f\31\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\22\42\1\u01a0\6\42\21\0\21\42\1\u01a0\14\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\14\42\1\u01a1\14\42\21\0\13\42"+
    "\1\u01a1\22\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\1\u01a2\30\42\21\0"+
    "\1\u01a2\35\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\u01a3\1\u01a4\23\42\1\u01a5"+
    "\4\42\21\0\1\u01a4\22\42\1\u01a5\12\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\1\u01a6\11\42\1\u01a7\4\42\1\u01a8\2\42\1\u01a9"+
    "\6\42\21\0\1\u01a6\10\42\1\u01a7\4\42\1\u01a8\2\42"+
    "\1\u01a9\14\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\3\42\1\u01aa\20\42"+
    "\1\u01ab\3\42\1\u01ac\21\0\3\42\1\u01aa\17\42\1\u01ab"+
    "\3\42\1\u01ac\6\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\1\u01ad\7\42"+
    "\1\u01ae\13\42\1\u01af\4\42\21\0\1\u01ad\6\42\1\u01ae"+
    "\13\42\1\u01af\12\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\25\42\1\u01b0"+
    "\3\42\21\0\24\42\1\u01b0\11\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\1\u01b1\30\42\21\0\1\u01b1\35\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\30\42\1\u01b2\21\0\27\42\1\u01b2\6\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\5\42\1\u01b3\23\42\21\0\4\42\1\u01b3\31\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\3\42\1\u01b4\25\42\21\0\3\42"+
    "\1\u01b4\32\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\3\42\1\u01b5\25\42"+
    "\21\0\3\42\1\u01b5\32\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\10\42"+
    "\1\u01b6\20\42\21\0\7\42\1\u01b6\26\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\10\42\1\u01b7\20\42\21\0\7\42\1\u01b7\26\42"+
    "\31\0\1\337\103\0\1\73\1\0\133\73\1\74\1\0"+
    "\133\74\1\105\1\0\133\105\1\107\1\0\133\107\7\0"+
    "\1\101\1\346\3\101\2\0\1\101\1\0\1\101\1\0"+
    "\25\101\1\u01b8\6\101\21\0\21\101\1\u01b8\14\101\7\0"+
    "\1\101\1\346\3\101\2\0\1\101\1\0\1\101\1\0"+
    "\11\101\1\u01b9\22\101\21\0\5\101\1\u01b9\30\101\7\0"+
    "\1\101\1\346\3\101\2\0\1\101\1\0\1\101\1\0"+
    "\2\101\1\u01ba\31\101\21\0\36\101\7\0\1\101\1\346"+
    "\3\101\2\0\1\101\1\0\1\101\1\0\2\101\1\u01bb"+
    "\31\101\21\0\36\101\7\0\1\101\1\346\3\101\2\0"+
    "\1\101\1\0\1\101\1\0\27\101\1\u01bc\4\101\21\0"+
    "\23\101\1\u01bc\12\101\7\0\1\101\1\346\3\101\2\0"+
    "\1\101\1\0\1\101\1\0\2\101\1\u01bd\31\101\21\0"+
    "\36\101\7\0\1\101\1\346\3\101\2\0\1\101\1\0"+
    "\1\101\1\0\11\101\1\u01be\22\101\21\0\5\101\1\u01be"+
    "\30\101\7\0\1\101\1\346\3\101\2\0\1\101\1\0"+
    "\1\101\1\0\25\101\1\u01bf\6\101\21\0\21\101\1\u01bf"+
    "\14\101\7\0\1\101\1\346\3\101\2\0\1\101\1\0"+
    "\1\101\1\0\27\101\1\u01c0\4\101\21\0\23\101\1\u01c0"+
    "\12\101\7\0\1\u0105\1\0\1\u0106\2\u0105\2\0\1\u0105"+
    "\1\0\1\u0105\1\0\1\u0105\1\u0106\1\u0105\4\u0106\1\u0105"+
    "\24\u0106\21\0\31\u0106\5\u0105\7\0\1\u0106\1\0\3\u0106"+
    "\2\0\1\u0106\1\0\1\u0106\1\0\2\u0106\1\u01c1\31\u0106"+
    "\21\0\36\u0106\51\0\1\u01c2\50\0\1\u01c2\12\0\1\147"+
    "\1\0\1\147\1\150\2\0\1\150\24\147\1\u01c3\50\147"+
    "\1\u01c3\31\147\1\0\1\147\1\150\2\0\1\150\26\147"+
    "\1\150\50\147\1\150\26\147\56\0\1\u010c\65\0\1\157"+
    "\1\u010b\3\157\2\0\1\157\1\0\1\157\1\0\11\157"+
    "\1\u01c4\22\157\1\u010c\20\0\5\157\1\u01c4\30\157\7\0"+
    "\1\31\1\0\1\31\1\0\1\31\2\0\1\31\3\0"+
    "\2\31\1\0\24\31\1\u01c5\4\31\21\0\23\31\1\u01c5"+
    "\12\31\53\0\1\u01c6\50\0\1\u01c6\43\0\1\u01c7\50\0"+
    "\1\u01c7\101\0\1\u01c8\50\0\1\u01c8\63\0\1\u01c9\50\0"+
    "\1\u01c9\21\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\7\42\1\u01ca\21\42\21\0"+
    "\6\42\1\u01ca\27\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\22\42\1\u01cb"+
    "\6\42\21\0\21\42\1\u01cb\14\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u01cc"+
    "\31\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u01cd\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u01ce\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u01cf\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u01d0"+
    "\31\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u01d1\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\25\42\1\u01d2\3\42\21\0"+
    "\24\42\1\u01d2\11\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u01d3\31\42\21\0"+
    "\36\42\15\0\1\u01d4\2\0\1\u01d4\4\0\5\u01d4\45\0"+
    "\4\u01d4\41\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u01d5\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u01d6\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u01d7"+
    "\31\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u01d8\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u01d9\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u01da\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u01db"+
    "\31\42\21\0\36\42\15\0\1\u01dc\2\0\1\u01dc\4\0"+
    "\5\u01dc\45\0\4\u01dc\41\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\22\42\1\u01dd"+
    "\6\42\21\0\21\42\1\u01dd\14\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u01de"+
    "\5\42\1\u01df\6\42\1\u01e0\6\42\1\u01e1\4\42\1\u01e2"+
    "\21\0\4\42\1\u01df\6\42\1\u01e0\6\42\1\u01e1\4\42"+
    "\1\u01e2\6\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\u01e3\31\42\21\0\36\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u01e4\31\42\21\0\36\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\1\u01e5"+
    "\1\42\1\172\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\25\42\1\u01e6\3\42\21\0\24\42\1\u01e6\11\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u01e7\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u01e8"+
    "\31\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u01e9\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u01ea\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u01eb\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u01ec"+
    "\31\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u01ed\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\24\42\1\u01ee\4\42\21\0"+
    "\23\42\1\u01ee\12\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u01ef\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\12\42\1\u01f0\16\42\21\0"+
    "\11\42\1\u01f0\24\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u01f1\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u01f2\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u01f3\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u01f4"+
    "\31\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u01f5\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\25\42\1\u01f6\3\42\21\0"+
    "\24\42\1\u01f6\11\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u01f7\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u01f8\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u01f9\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u01fa"+
    "\31\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\25\42\1\u01fb"+
    "\3\42\21\0\24\42\1\u01fb\11\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u01fc"+
    "\31\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u01fd\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u01fe\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u01ff\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\20\42\1\u0200\10\42\21\0\17\42\1\u0200\16\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u0201\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\25\42\1\u0202\3\42\21\0\24\42\1\u0202\11\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\16\42\1\u0203\12\42\21\0\15\42\1\u0203"+
    "\20\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\7\42\1\u0204\21\42\21\0"+
    "\6\42\1\u0204\27\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u0205\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u0206\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\7\42\1\u0207\21\42\21\0\6\42\1\u0207"+
    "\27\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\12\42\1\u0208\16\42\21\0"+
    "\11\42\1\u0208\24\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\31\42\21\0"+
    "\33\42\1\u0209\2\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u020a\2\42\1\u020b"+
    "\2\42\1\u020c\6\42\1\u020d\6\42\1\u020e\4\42\1\u020f"+
    "\21\0\2\42\1\u020b\1\42\1\u020c\6\42\1\u020d\6\42"+
    "\1\u020e\4\42\1\u020f\6\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\u0210\14\42"+
    "\1\u0211\14\42\21\0\13\42\1\u0211\22\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\12\42\1\u0212\16\42\21\0\11\42\1\u0212\24\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u0213\31\42\21\0\36\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\u0214\31\42\21\0\36\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\u0215\5\42"+
    "\1\u0216\6\42\1\u0217\2\42\1\u0218\11\42\21\0\4\42"+
    "\1\u0216\6\42\1\u0217\2\42\1\u0218\17\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\22\42\1\u0219\6\42\21\0\21\42\1\u0219\14\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\10\42\1\u021a\20\42\21\0\7\42"+
    "\1\u021a\26\42\15\0\1\u021b\2\0\1\u021b\4\0\5\u021b"+
    "\45\0\4\u021b\41\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\12\42\1\u021c\16\42"+
    "\21\0\11\42\1\u021c\24\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\1\u021d"+
    "\7\42\1\u021e\10\42\1\u021f\3\42\1\u0220\3\42\21\0"+
    "\1\u021d\6\42\1\u021e\10\42\1\u021f\3\42\1\u0220\11\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\1\u0221\5\42\1\u0222\22\42\21\0"+
    "\1\u0221\4\42\1\u0222\30\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\23\42"+
    "\1\u0223\5\42\21\0\22\42\1\u0223\13\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\u0224\31\42\21\0\36\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\10\42"+
    "\1\u0225\14\42\1\u0226\3\42\21\0\7\42\1\u0225\14\42"+
    "\1\u0226\11\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\1\u0227\13\42\1\u0228"+
    "\14\42\21\0\1\u0227\12\42\1\u0228\22\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\14\42\1\u0229\14\42\21\0\13\42\1\u0229\22\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\10\42\1\u022a\20\42\21\0\7\42"+
    "\1\u022a\26\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\3\42\1\u022b\25\42"+
    "\21\0\3\42\1\u022b\32\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\5\42"+
    "\1\u022c\23\42\21\0\4\42\1\u022c\31\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\u022d\31\42\21\0\36\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\1\u022e"+
    "\5\42\1\u022f\22\42\21\0\1\u022e\4\42\1\u022f\30\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\5\42\1\u0230\23\42\21\0\4\42"+
    "\1\u0230\31\42\15\0\1\u0231\2\0\1\u0231\4\0\5\u0231"+
    "\45\0\4\u0231\41\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\u0232\31\42\21\0\36\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\1\u0233\25\42\1\u0234\2\42\21\0"+
    "\1\u0233\24\42\1\u0234\10\42\15\0\1\u0235\2\0\1\u0235"+
    "\4\0\5\u0235\45\0\4\u0235\47\0\1\u0236\2\0\1\u0236"+
    "\4\0\5\u0236\45\0\4\u0236\41\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\10\42"+
    "\1\u0237\20\42\21\0\7\42\1\u0237\26\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\21\42\1\u0238\7\42\21\0\20\42\1\u0238\15\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\3\42\1\u0239\25\42\21\0\3\42"+
    "\1\u0239\32\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\6\42\1\u023a\5\42"+
    "\1\u023b\2\42\1\u023c\4\42\1\u023d\4\42\21\0\5\42"+
    "\1\u023a\5\42\1\u023b\2\42\1\u023c\4\42\1\u023d\12\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u023e\14\42\1\u023f\14\42\21\0\13\42"+
    "\1\u023f\22\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\24\42\1\u0240\4\42"+
    "\21\0\23\42\1\u0240\12\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\17\42"+
    "\1\u0241\11\42\21\0\16\42\1\u0241\17\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\20\42\1\u0242\10\42\21\0\17\42\1\u0242\16\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u0243\31\42\21\0\36\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\u0244\31\42\21\0\36\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\3\42"+
    "\1\u0245\25\42\21\0\3\42\1\u0245\32\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\10\42\1\u0246\20\42\21\0\7\42\1\u0246\26\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\25\42\1\u0247\3\42\21\0\24\42"+
    "\1\u0247\11\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\10\42\1\u0248\14\42"+
    "\1\u0249\3\42\21\0\7\42\1\u0248\14\42\1\u0249\11\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\23\42\1\u024a\5\42\21\0\22\42"+
    "\1\u024a\13\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\10\42\1\u024b\14\42"+
    "\1\u024c\3\42\21\0\7\42\1\u024b\14\42\1\u024c\11\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\5\42\1\u024d\6\42\1\u024e\14\42"+
    "\21\0\4\42\1\u024d\6\42\1\u024e\22\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\1\42\1\u024f\4\42\1\u0250\1\u0251\1\u0252\20\42"+
    "\21\0\1\42\1\u024f\3\42\1\u0250\1\u0251\1\u0252\26\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\u0253"+
    "\3\0\2\42\1\172\3\42\1\u0254\25\42\21\0\3\42"+
    "\1\u0254\32\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\14\42\1\u0255\14\42"+
    "\21\0\13\42\1\u0255\22\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\1\42"+
    "\1\u0256\1\42\1\u0257\3\42\1\u0258\21\42\21\0\1\42"+
    "\1\u0256\1\42\1\u0257\2\42\1\u0258\27\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\25\42\1\u0259\3\42\21\0\24\42\1\u0259\11\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u025a\31\42\21\0\36\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\22\42\1\u025b\6\42\21\0\21\42\1\u025b\14\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\13\42\1\u025c\10\42\1\u025d\4\42"+
    "\21\0\12\42\1\u025c\10\42\1\u025d\12\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\31\42\21\0\33\42\1\u025e\2\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\14\42\1\u025f\14\42\21\0\13\42\1\u025f\22\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\10\42\1\u0260\20\42\21\0\7\42"+
    "\1\u0260\26\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\1\u0261\25\42\1\u0262"+
    "\2\42\21\0\1\u0261\24\42\1\u0262\10\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\7\42\1\u0263\21\42\21\0\6\42\1\u0263\27\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\24\42\1\u0264\4\42\21\0\23\42"+
    "\1\u0264\12\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\u0265\30\42\1\u0266\21\0"+
    "\27\42\1\u0266\6\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\14\42\1\u0267"+
    "\14\42\21\0\13\42\1\u0267\22\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\5\42\1\u0268\23\42\21\0\4\42\1\u0268\31\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u0269\31\42\21\0\36\42\15\0\1\u026a\2\0"+
    "\1\u026a\4\0\5\u026a\45\0\4\u026a\41\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u026b"+
    "\31\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\20\42\1\u026c"+
    "\10\42\21\0\17\42\1\u026c\16\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\10\42\1\u026d\20\42\21\0\7\42\1\u026d\26\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u026e\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\1\u026f\30\42\21\0\1\u026f\35\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\20\42\1\u0270\10\42\21\0\17\42\1\u0270\16\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\13\42\1\u0271\15\42\21\0\12\42\1\u0271"+
    "\23\42\15\0\1\u0272\2\0\1\u0272\4\0\5\u0272\45\0"+
    "\4\u0272\41\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\10\42\1\u0273\20\42\21\0"+
    "\7\42\1\u0273\26\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\10\42\1\u0274"+
    "\20\42\21\0\7\42\1\u0274\26\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\10\42\1\u0275\20\42\21\0\7\42\1\u0275\26\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\25\42\1\u0276\3\42\21\0\24\42\1\u0276"+
    "\11\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u0277\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u0278\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\3\42\1\u0279\20\42\1\u027a\4\42\21\0\3\42\1\u0279"+
    "\17\42\1\u027a\12\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u027b\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u027c\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\25\42\1\u027d\3\42\21\0\24\42\1\u027d"+
    "\11\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\22\42\1\u027e\6\42\21\0"+
    "\21\42\1\u027e\14\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\16\42\1\u027f"+
    "\12\42\21\0\15\42\1\u027f\20\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\11\42\1\u0280\17\42\21\0\10\42\1\u0280\25\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\11\42\1\u0281\17\42\21\0\10\42\1\u0281"+
    "\25\42\7\0\1\101\1\346\3\101\1\0\1\u0282\1\101"+
    "\1\0\1\u0283\1\0\3\101\5\u0283\24\101\21\0\4\u0283"+
    "\32\101\7\0\1\101\1\346\3\101\1\0\1\u0284\1\101"+
    "\1\0\1\u0285\1\0\3\101\5\u0285\24\101\21\0\4\u0285"+
    "\32\101\7\0\1\101\1\346\3\101\1\0\1\u0286\1\101"+
    "\1\0\1\u0287\1\0\3\101\5\u0287\24\101\21\0\4\u0287"+
    "\32\101\33\0\1\u0288\50\0\1\u0288\30\0\1\147\1\0"+
    "\1\147\1\150\2\0\1\150\23\147\1\u0289\50\147\1\u0289"+
    "\31\147\7\0\1\157\1\u010b\3\157\2\0\1\157\1\0"+
    "\1\157\1\0\27\157\1\u028a\4\157\1\u010c\20\0\23\157"+
    "\1\u028a\12\157\7\0\1\31\1\0\1\31\1\0\1\31"+
    "\2\0\1\31\3\0\2\31\1\0\21\31\1\u028b\7\31"+
    "\21\0\20\31\1\u028b\15\31\51\0\1\u028c\50\0\1\u028c"+
    "\63\0\1\u028d\50\0\1\u028d\60\0\1\u028e\50\0\1\u028e"+
    "\24\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u028f\31\42\21\0\36\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\u0290\31\42\21\0\36\42\15\0\1\u0291\2\0\1\u0291"+
    "\4\0\5\u0291\45\0\4\u0291\47\0\1\u0292\2\0\1\u0292"+
    "\4\0\5\u0292\45\0\4\u0292\47\0\1\u0293\2\0\1\u0293"+
    "\4\0\5\u0293\45\0\4\u0293\47\0\1\u0294\2\0\1\u0294"+
    "\4\0\5\u0294\45\0\4\u0294\47\0\1\u0295\2\0\1\u0295"+
    "\4\0\5\u0295\45\0\4\u0295\47\0\1\u0296\2\0\1\u0296"+
    "\4\0\5\u0296\45\0\4\u0296\41\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\14\42"+
    "\1\u0297\14\42\21\0\13\42\1\u0297\22\42\15\0\1\u0298"+
    "\2\0\1\u0298\4\0\5\u0298\45\0\4\u0298\47\0\1\u0299"+
    "\2\0\1\u0299\4\0\5\u0299\45\0\4\u0299\47\0\1\u029a"+
    "\2\0\1\u029a\4\0\5\u029a\45\0\4\u029a\47\0\1\u029b"+
    "\2\0\1\u029b\4\0\5\u029b\45\0\4\u029b\47\0\1\u029c"+
    "\2\0\1\u029c\4\0\5\u029c\45\0\4\u029c\47\0\1\u029d"+
    "\2\0\1\u029d\4\0\5\u029d\45\0\4\u029d\47\0\1\u029e"+
    "\2\0\1\u029e\4\0\5\u029e\45\0\4\u029e\47\0\1\u029f"+
    "\2\0\1\u029f\4\0\5\u029f\45\0\4\u029f\47\0\1\u02a0"+
    "\2\0\1\u02a0\4\0\5\u02a0\45\0\4\u02a0\41\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\u02a1\31\42\21\0\36\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\u02a2\31\42"+
    "\21\0\36\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\u02a3\31\42\21\0\36\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u02a4\31\42\21\0\36\42\15\0\1\u02a5"+
    "\2\0\1\u02a5\4\0\5\u02a5\45\0\4\u02a5\47\0\1\u02a6"+
    "\2\0\1\u02a6\4\0\5\u02a6\45\0\4\u02a6\41\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\6\42\1\u02a7\2\42\1\u02a8\17\42\21\0\5\42"+
    "\1\u02a7\2\42\1\u02a8\25\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\u02a9\31\42"+
    "\21\0\36\42\15\0\1\u02aa\2\0\1\u02aa\4\0\5\u02aa"+
    "\45\0\4\u02aa\47\0\1\u02ab\2\0\1\u02ab\4\0\5\u02ab"+
    "\45\0\4\u02ab\47\0\1\u02ac\2\0\1\u02ac\4\0\5\u02ac"+
    "\45\0\4\u02ac\47\0\1\u02ad\2\0\1\u02ad\4\0\5\u02ad"+
    "\45\0\4\u02ad\47\0\1\u02ae\2\0\1\u02ae\4\0\5\u02ae"+
    "\45\0\4\u02ae\47\0\1\u02af\2\0\1\u02af\4\0\5\u02af"+
    "\45\0\4\u02af\47\0\1\u02b0\2\0\1\u02b0\4\0\5\u02b0"+
    "\45\0\4\u02b0\41\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\u02b1\31\42\21\0\36\42"+
    "\15\0\1\u02b2\2\0\1\u02b2\4\0\5\u02b2\45\0\4\u02b2"+
    "\41\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u02b3\31\42\21\0\36\42\15\0\1\u02b4"+
    "\2\0\1\u02b4\4\0\5\u02b4\45\0\4\u02b4\47\0\1\u02b5"+
    "\2\0\1\u02b5\4\0\5\u02b5\45\0\4\u02b5\47\0\1\u02b6"+
    "\2\0\1\u02b6\4\0\5\u02b6\45\0\4\u02b6\47\0\1\u02b7"+
    "\2\0\1\u02b7\4\0\5\u02b7\45\0\4\u02b7\47\0\1\u02b8"+
    "\2\0\1\u02b8\4\0\5\u02b8\45\0\4\u02b8\47\0\1\u02b9"+
    "\2\0\1\u02b9\4\0\5\u02b9\45\0\4\u02b9\47\0\1\u02ba"+
    "\2\0\1\u02ba\4\0\5\u02ba\45\0\4\u02ba\47\0\1\u02bb"+
    "\2\0\1\u02bb\4\0\5\u02bb\45\0\4\u02bb\47\0\1\u02bc"+
    "\2\0\1\u02bc\4\0\5\u02bc\45\0\4\u02bc\41\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\u02bd\31\42\21\0\36\42\15\0\1\u02be\2\0\1\u02be"+
    "\4\0\5\u02be\45\0\4\u02be\47\0\1\u02bf\2\0\1\u02bf"+
    "\4\0\5\u02bf\45\0\4\u02bf\47\0\1\u02c0\2\0\1\u02c0"+
    "\4\0\5\u02c0\45\0\4\u02c0\47\0\1\u02c1\2\0\1\u02c1"+
    "\4\0\5\u02c1\45\0\4\u02c1\47\0\1\u02c2\2\0\1\u02c2"+
    "\4\0\5\u02c2\45\0\4\u02c2\41\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\u02c3\31\42"+
    "\21\0\36\42\15\0\1\u02c4\2\0\1\u02c4\4\0\5\u02c4"+
    "\45\0\4\u02c4\47\0\1\u02c5\2\0\1\u02c5\4\0\5\u02c5"+
    "\45\0\4\u02c5\41\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\u02c6\31\42\21\0\36\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\20\42\1\u02c7\10\42\21\0\17\42"+
    "\1\u02c7\16\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\4\42\1\u02c8\24\42"+
    "\21\0\36\42\15\0\1\u02c9\2\0\1\u02c9\4\0\5\u02c9"+
    "\45\0\4\u02c9\41\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\5\42\1\u02ca\23\42"+
    "\21\0\4\42\1\u02ca\31\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\u02cb\31\42"+
    "\21\0\36\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\u02cc\31\42\21\0\36\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u02cd\31\42\21\0\36\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\u02ce\31\42\21\0\36\42\15\0\1\u02cf\2\0\1\u02cf"+
    "\4\0\5\u02cf\45\0\4\u02cf\41\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\u02d0\31\42"+
    "\21\0\36\42\15\0\1\u02d1\2\0\1\u02d1\4\0\5\u02d1"+
    "\45\0\4\u02d1\47\0\1\u02d2\2\0\1\u02d2\4\0\5\u02d2"+
    "\45\0\4\u02d2\47\0\1\u02d3\2\0\1\u02d3\4\0\5\u02d3"+
    "\45\0\4\u02d3\41\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\u02d4\31\42\21\0\36\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u02d5\31\42\21\0\36\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\u02d6\31\42\21\0\36\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\1\u02d7\1\42\1\172"+
    "\31\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u02d8\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u02d9\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u02da\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u02db"+
    "\31\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u02dc\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u02dd\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u02de\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u02df"+
    "\31\42\21\0\36\42\15\0\1\u02e0\2\0\1\u02e0\4\0"+
    "\5\u02e0\45\0\4\u02e0\41\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u02e1\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u02e2\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u02e3\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u02e4"+
    "\31\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u02e5\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u02e6\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\u02e7\31\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\u02e8"+
    "\31\42\21\0\36\42\15\0\1\u02e9\2\0\1\u02e9\4\0"+
    "\5\u02e9\45\0\4\u02e9\41\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\u02ea\31\42\21\0"+
    "\36\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\u02eb\31\42\21\0\36\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\1\u02ec\1\42\1\172\31\42\21\0\36\42\15\0\1\u02ed"+
    "\2\0\1\u02ed\4\0\5\u02ed\45\0\4\u02ed\41\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\u02ee\31\42\21\0\36\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\u02ef\31\42"+
    "\21\0\36\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\14\42\1\u02f0\14\42"+
    "\21\0\13\42\1\u02f0\22\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\14\42"+
    "\1\u02f1\14\42\21\0\13\42\1\u02f1\22\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\11\42\1\u02f2\17\42\21\0\10\42\1\u02f2\25\42"+
    "\15\0\1\u02f3\2\0\1\u02f3\4\0\5\u02f3\45\0\4\u02f3"+
    "\41\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u02f4\31\42\21\0\36\42\15\0\1\u02f5"+
    "\2\0\1\u02f5\4\0\5\u02f5\45\0\4\u02f5\47\0\1\u02f6"+
    "\2\0\1\u02f6\4\0\5\u02f6\45\0\4\u02f6\41\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\12\42\1\u02f7\16\42\21\0\11\42\1\u02f7\24\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\6\42\1\u02f8\22\42\21\0\5\42"+
    "\1\u02f8\30\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\20\42\1\u02f9\10\42"+
    "\21\0\17\42\1\u02f9\16\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\14\42"+
    "\1\u02fa\14\42\21\0\13\42\1\u02fa\22\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\26\42\1\u02fb\2\42\21\0\25\42\1\u02fb\10\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\14\42\1\u02fc\14\42\21\0\13\42"+
    "\1\u02fc\22\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\20\42\1\u02fd\10\42"+
    "\21\0\17\42\1\u02fd\16\42\15\0\1\u02fe\2\0\1\u02fe"+
    "\4\0\5\u02fe\45\0\4\u02fe\41\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\10\42"+
    "\1\u02ff\11\42\1\u0300\6\42\21\0\7\42\1\u02ff\11\42"+
    "\1\u0300\14\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\14\42\1\u0301\14\42"+
    "\21\0\13\42\1\u0301\22\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\21\42"+
    "\1\u0302\7\42\21\0\20\42\1\u0302\15\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\4\42\1\u0303\24\42\21\0\36\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\25\42\1\u0304\3\42\21\0\24\42\1\u0304\11\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u0305\1\u0306\4\42\1\u0307\1\u0308\10\42"+
    "\1\u0309\2\42\1\u030a\1\u030b\5\42\21\0\1\u0306\3\42"+
    "\1\u0307\1\u0308\10\42\1\u0309\2\42\1\u030a\1\u030b\13\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u030c\31\42\21\0\36\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\u030d\31\42\21\0\36\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\u030e\31\42"+
    "\21\0\36\42\2\0\1\u030f\2\0\1\u030f\1\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\31\42\21\0\36\42\15\0\1\u0310\2\0\1\u0310"+
    "\4\0\5\u0310\45\0\4\u0310\41\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\u0311\31\42"+
    "\21\0\36\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\1\u0312\30\42\21\0"+
    "\1\u0312\35\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\12\42\1\u0313\16\42"+
    "\21\0\11\42\1\u0313\24\42\15\0\1\u0314\2\0\1\u0314"+
    "\4\0\5\u0314\45\0\4\u0314\47\0\1\u0315\2\0\1\u0315"+
    "\4\0\5\u0315\45\0\4\u0315\47\0\1\u0316\2\0\1\u0316"+
    "\4\0\5\u0316\45\0\4\u0316\41\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\10\42"+
    "\1\u0317\20\42\21\0\7\42\1\u0317\26\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\25\42\1\u0318\3\42\21\0\24\42\1\u0318\11\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\1\u0319\30\42\21\0\1\u0319\35\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\25\42\1\u031a\3\42\21\0\24\42"+
    "\1\u031a\11\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\1\u031b\30\42\21\0"+
    "\1\u031b\35\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\25\42\1\u031c\3\42"+
    "\21\0\24\42\1\u031c\11\42\15\0\1\u031d\2\0\1\u031d"+
    "\4\0\5\u031d\45\0\4\u031d\47\0\1\u031e\2\0\1\u031e"+
    "\4\0\5\u031e\45\0\4\u031e\41\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\u031f\31\42"+
    "\21\0\36\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\u0320\31\42\21\0\36\42"+
    "\15\0\1\u0321\2\0\1\u0321\4\0\5\u0321\45\0\4\u0321"+
    "\47\0\1\u0322\2\0\1\u0322\4\0\5\u0322\45\0\4\u0322"+
    "\41\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\27\42\1\u0323\1\42\21\0\26\42"+
    "\1\u0323\7\42\32\0\1\u0324\50\0\1\u0324\31\0\1\147"+
    "\1\0\1\147\1\150\2\0\1\150\35\147\1\150\50\147"+
    "\1\150\17\147\7\0\1\157\1\u010b\3\157\2\0\1\157"+
    "\1\0\1\157\1\0\24\157\1\u0325\7\157\1\u010c\20\0"+
    "\20\157\1\u0325\15\157\46\0\1\u028c\50\0\1\u028c\32\0"+
    "\1\u0326\2\0\1\u0326\4\0\5\u0326\45\0\4\u0326\47\0"+
    "\1\u0327\2\0\1\u0327\4\0\5\u0327\45\0\4\u0327\41\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\21\42\1\u0328\7\42\21\0\20\42\1\u0328"+
    "\15\42\15\0\1\u0329\2\0\1\u0329\4\0\5\u0329\45\0"+
    "\4\u0329\47\0\1\u032a\2\0\1\u032a\4\0\5\u032a\45\0"+
    "\4\u032a\47\0\1\u032b\2\0\1\u032b\4\0\5\u032b\45\0"+
    "\4\u032b\47\0\1\u032c\2\0\1\u032c\4\0\5\u032c\45\0"+
    "\4\u032c\47\0\1\u032d\2\0\1\u032d\4\0\5\u032d\45\0"+
    "\4\u032d\47\0\1\u032e\2\0\1\u032e\4\0\5\u032e\45\0"+
    "\4\u032e\47\0\1\u032f\2\0\1\u032f\4\0\5\u032f\45\0"+
    "\4\u032f\47\0\1\u0330\2\0\1\u0330\4\0\5\u0330\45\0"+
    "\4\u0330\47\0\1\u0331\2\0\1\u0331\4\0\5\u0331\45\0"+
    "\4\u0331\47\0\1\u0332\2\0\1\u0332\4\0\5\u0332\45\0"+
    "\4\u0332\41\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\31\42\21\0\33\42\1\u0333"+
    "\2\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\25\42\1\u0334\3\42\21\0"+
    "\24\42\1\u0334\11\42\15\0\1\u0335\2\0\1\u0335\4\0"+
    "\5\u0335\45\0\4\u0335\47\0\1\u0336\2\0\1\u0336\4\0"+
    "\5\u0336\45\0\4\u0336\47\0\1\u0337\2\0\1\u0337\4\0"+
    "\5\u0337\45\0\4\u0337\47\0\1\u0338\2\0\1\u0338\4\0"+
    "\5\u0338\45\0\4\u0338\47\0\1\u0339\2\0\1\u0339\4\0"+
    "\5\u0339\45\0\4\u0339\47\0\1\u033a\2\0\1\u033a\4\0"+
    "\5\u033a\45\0\4\u033a\47\0\1\u033b\2\0\1\u033b\4\0"+
    "\5\u033b\45\0\4\u033b\47\0\1\u033c\2\0\1\u033c\4\0"+
    "\5\u033c\45\0\4\u033c\41\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\6\42\1\u033d"+
    "\2\42\1\u033e\17\42\21\0\5\42\1\u033d\2\42\1\u033e"+
    "\25\42\15\0\1\u033f\2\0\1\u033f\4\0\5\u033f\45\0"+
    "\4\u033f\47\0\1\u0340\2\0\1\u0340\4\0\5\u0340\45\0"+
    "\4\u0340\47\0\1\u0341\2\0\1\u0341\4\0\5\u0341\45\0"+
    "\4\u0341\47\0\1\u0342\2\0\1\u0342\4\0\5\u0342\45\0"+
    "\4\u0342\47\0\1\u0343\2\0\1\u0343\4\0\5\u0343\45\0"+
    "\4\u0343\47\0\1\u0344\2\0\1\u0344\4\0\5\u0344\45\0"+
    "\4\u0344\47\0\1\u0345\2\0\1\u0345\4\0\5\u0345\45\0"+
    "\4\u0345\47\0\1\u0346\2\0\1\u0346\4\0\5\u0346\45\0"+
    "\4\u0346\47\0\1\u0347\2\0\1\u0347\4\0\5\u0347\45\0"+
    "\4\u0347\47\0\1\u0348\2\0\1\u0348\4\0\5\u0348\45\0"+
    "\4\u0348\47\0\1\u0349\2\0\1\u0349\4\0\5\u0349\45\0"+
    "\4\u0349\47\0\1\u034a\2\0\1\u034a\4\0\5\u034a\45\0"+
    "\4\u034a\47\0\1\u034b\2\0\1\u034b\4\0\5\u034b\45\0"+
    "\4\u034b\47\0\1\u034c\2\0\1\u034c\4\0\5\u034c\45\0"+
    "\4\u034c\47\0\1\u034d\2\0\1\u034d\4\0\5\u034d\45\0"+
    "\4\u034d\47\0\1\u034e\2\0\1\u034e\4\0\5\u034e\45\0"+
    "\4\u034e\47\0\1\u034f\2\0\1\u034f\4\0\5\u034f\45\0"+
    "\4\u034f\47\0\1\u0350\2\0\1\u0350\4\0\5\u0350\45\0"+
    "\4\u0350\41\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\6\42\1\u0351\2\42\1\u0352"+
    "\17\42\21\0\5\42\1\u0351\2\42\1\u0352\25\42\15\0"+
    "\1\u0353\2\0\1\u0353\4\0\5\u0353\45\0\4\u0353\47\0"+
    "\1\u0354\2\0\1\u0354\4\0\5\u0354\45\0\4\u0354\41\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\11\42\1\u0355\17\42\21\0\10\42\1\u0355"+
    "\25\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\20\42\1\u0356\10\42\21\0"+
    "\17\42\1\u0356\16\42\15\0\1\u0357\2\0\1\u0357\4\0"+
    "\5\u0357\45\0\4\u0357\41\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\5\42\1\u0358"+
    "\23\42\21\0\4\42\1\u0358\31\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\24\42\1\u0359\4\42\21\0\23\42\1\u0359\12\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\10\42\1\u035a\20\42\21\0\7\42\1\u035a"+
    "\26\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\20\42\1\u035b\10\42\21\0"+
    "\17\42\1\u035b\16\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\7\42\1\u035c"+
    "\21\42\21\0\6\42\1\u035c\27\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\24\42\1\u035d\4\42\21\0\23\42\1\u035d\12\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\10\42\1\u035e\20\42\21\0\7\42\1\u035e"+
    "\26\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\24\42\1\u035f\4\42\21\0"+
    "\23\42\1\u035f\12\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\25\42\1\u0360"+
    "\3\42\21\0\24\42\1\u0360\11\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\20\42\1\u0361\10\42\21\0\17\42\1\u0361\16\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\u0362\3\0"+
    "\2\42\1\172\4\42\1\u0363\24\42\21\0\31\42\1\u0364"+
    "\1\u0365\1\42\1\u0366\1\u0367\15\0\1\u0368\2\0\1\u0368"+
    "\4\0\5\u0368\45\0\4\u0368\41\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\u0369\31\42"+
    "\21\0\36\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\u036a\31\42\21\0\36\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\u036b\31\42\21\0\36\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\u036c\31\42\21\0\36\42\7\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\u036d\31\42"+
    "\21\0\36\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\u036e\31\42\21\0\36\42"+
    "\15\0\1\u036f\2\0\1\u036f\4\0\5\u036f\45\0\4\u036f"+
    "\47\0\1\u0370\2\0\1\u0370\4\0\5\u0370\45\0\4\u0370"+
    "\47\0\1\u0371\2\0\1\u0371\4\0\5\u0371\45\0\4\u0371"+
    "\65\0\1\u0372\50\0\1\u0372\45\0\1\u0373\2\0\1\u0373"+
    "\4\0\5\u0373\45\0\4\u0373\41\0\1\42\1\0\1\42"+
    "\1\0\1\42\2\0\1\42\3\0\2\42\1\172\25\42"+
    "\1\u0374\3\42\21\0\24\42\1\u0374\11\42\7\0\1\42"+
    "\1\0\1\42\1\0\1\42\2\0\1\42\3\0\2\42"+
    "\1\172\10\42\1\u0375\20\42\21\0\7\42\1\u0375\26\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\6\42\1\u0376\22\42\21\0\5\42"+
    "\1\u0376\30\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\25\42\1\u0377\1\42"+
    "\1\u0378\1\42\21\0\24\42\1\u0377\1\42\1\u0378\7\42"+
    "\7\0\1\42\1\0\1\42\1\0\1\42\2\0\1\42"+
    "\3\0\2\42\1\172\10\42\1\u0379\20\42\21\0\7\42"+
    "\1\u0379\26\42\7\0\1\42\1\0\1\42\1\0\1\42"+
    "\2\0\1\42\3\0\2\42\1\172\10\42\1\u037a\20\42"+
    "\21\0\7\42\1\u037a\26\42\15\0\1\u037b\2\0\1\u037b"+
    "\4\0\5\u037b\45\0\4\u037b\47\0\1\u037c\2\0\1\u037c"+
    "\4\0\5\u037c\45\0\4\u037c\76\0\1\u010a\50\0\1\u010a"+
    "\21\0\1\u037d\2\0\1\u037d\1\0\1\157\1\u010b\3\157"+
    "\2\0\1\157\1\0\1\157\1\0\34\157\1\u010c\20\0"+
    "\36\157\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\20\42\1\u037e\10\42\21\0"+
    "\17\42\1\u037e\16\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\4\42\1\u037f"+
    "\24\42\21\0\36\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\6\42\1\u0380"+
    "\22\42\21\0\5\42\1\u0380\30\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\10\42\1\u0381\20\42\21\0\7\42\1\u0381\26\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\3\42\1\u0382\25\42\21\0\3\42\1\u0382"+
    "\32\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\21\42\1\u0383\7\42\21\0"+
    "\20\42\1\u0383\15\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\10\42\1\u0384"+
    "\20\42\21\0\7\42\1\u0384\26\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\5\42\1\u0385\23\42\21\0\4\42\1\u0385\31\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\24\42\1\u0386\4\42\21\0\23\42\1\u0386"+
    "\12\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\24\42\1\u0387\4\42\21\0"+
    "\23\42\1\u0387\12\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\10\42\1\u0388"+
    "\20\42\21\0\7\42\1\u0388\26\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\4\42\1\u0389\24\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\4\42\1\u038a\24\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\4\42\1\u038b\24\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\4\42\1\u038c\24\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\4\42\1\u038d\24\42\21\0\36\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\4\42\1\u038e\24\42\21\0\36\42\15\0\1\u038f\2\0"+
    "\1\u038f\4\0\5\u038f\45\0\4\u038f\47\0\1\u0390\2\0"+
    "\1\u0390\4\0\5\u0390\45\0\4\u0390\47\0\1\u0391\2\0"+
    "\1\u0391\4\0\5\u0391\45\0\4\u0391\47\0\1\u0392\2\0"+
    "\1\u0392\4\0\5\u0392\45\0\4\u0392\47\0\1\u0393\2\0"+
    "\1\u0393\4\0\5\u0393\45\0\4\u0393\47\0\1\u0394\2\0"+
    "\1\u0394\4\0\5\u0394\45\0\4\u0394\100\0\1\u0395\50\0"+
    "\1\u0395\24\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\25\42\1\u0396\3\42\21\0"+
    "\24\42\1\u0396\11\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\6\42\1\u0397"+
    "\22\42\21\0\5\42\1\u0397\30\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\25\42\1\u0398\3\42\21\0\24\42\1\u0398\11\42\2\0"+
    "\1\u037d\2\0\1\u037d\136\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\13\42\1\u0399"+
    "\15\42\21\0\12\42\1\u0399\23\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\7\42\1\u039a\10\42\1\u039b\10\42\21\0\6\42\1\u039a"+
    "\10\42\1\u039b\16\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\24\42\1\u039c"+
    "\4\42\21\0\23\42\1\u039c\12\42\34\0\1\u039d\50\0"+
    "\1\u039d\36\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\14\42\1\u039e\14\42\21\0"+
    "\13\42\1\u039e\22\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\25\42\1\u039f"+
    "\3\42\21\0\24\42\1\u039f\11\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\7\42\1\u03a0\21\42\21\0\6\42\1\u03a0\27\42\35\0"+
    "\1\u03a1\50\0\1\u03a1\35\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\21\42\1\u03a2"+
    "\7\42\21\0\20\42\1\u03a2\15\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\2\0\1\42\3\0\2\42\1\172"+
    "\14\42\1\u03a3\14\42\21\0\13\42\1\u03a3\22\42\7\0"+
    "\1\42\1\0\1\42\1\0\1\42\2\0\1\42\3\0"+
    "\2\42\1\172\20\42\1\u03a4\10\42\21\0\17\42\1\u03a4"+
    "\16\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\42\3\0\2\42\1\172\21\42\1\u03a5\7\42\21\0"+
    "\20\42\1\u03a5\15\42\7\0\1\42\1\0\1\42\1\0"+
    "\1\42\2\0\1\42\3\0\2\42\1\172\20\42\1\u03a6"+
    "\10\42\21\0\17\42\1\u03a6\16\42";

  private static int [] zzUnpackTrans() {
    int [] result = new int[59799];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\1\1\2\11\4\1\1\11\5\1\1\11\2\1"+
    "\2\11\2\1\1\11\32\1\1\11\23\1\3\11\1\1"+
    "\7\11\4\1\2\11\2\1\3\0\1\1\3\0\1\1"+
    "\6\0\2\1\6\0\141\1\1\0\5\11\3\0\1\1"+
    "\1\11\2\1\2\11\2\0\17\1\11\11\1\0\1\1"+
    "\3\0\1\11\1\0\1\11\1\0\1\1\2\0\1\1"+
    "\1\0\1\11\13\1\1\0\10\1\1\0\61\1\1\0"+
    "\16\1\1\0\2\1\2\0\54\1\1\0\10\1\1\0"+
    "\36\1\3\0\2\1\1\0\1\11\1\0\2\1\6\0"+
    "\1\1\1\0\1\11\7\0\1\11\1\1\1\0\4\1"+
    "\2\0\2\1\7\0\1\1\1\0\1\1\5\0\1\1"+
    "\4\0\1\1\4\0\1\1\1\0\3\1\2\0\3\1"+
    "\1\0\5\1\1\0\2\1\3\0\5\1\1\11\10\1"+
    "\1\0\10\1\1\0\3\1\1\11\1\0\2\1\2\11"+
    "\7\1\1\0\4\1\2\0\25\1\1\0\12\1\1\0"+
    "\3\1\1\0\1\11\1\0\2\1\1\0\3\1\1\11"+
    "\4\1\2\0\2\1\2\0\5\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\3\0\1\1\1\11\1\0\1\11"+
    "\2\0\6\11\1\1\11\11\4\0\2\11\2\1\1\0"+
    "\7\11\1\0\1\11\1\0\11\11\1\0\5\11\1\0"+
    "\2\11\1\0\2\1\1\11\1\1\4\0\1\11\1\0"+
    "\3\11\3\0\1\1\10\0\1\11\10\0\1\11\2\0"+
    "\1\1\1\11\2\0\3\1\1\11\1\0\2\11\7\1"+
    "\1\11\6\1\1\0\6\1\4\0\1\11\1\0\2\1"+
    "\3\11\6\1\2\11\2\0\2\11\1\1\2\0\2\11"+
    "\1\1\12\11\2\1\10\11\2\1\22\11\2\1\2\11"+
    "\2\1\1\11\20\1\1\11\6\0\3\11\1\0\1\11"+
    "\7\1\2\11\22\1\6\11\1\0\7\1\1\0\3\1"+
    "\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[934];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  public _M68kLexer() {
    this((java.io.Reader)null);
  }

  private boolean afterSpaceOrComma() {
    char previousChar = charAt(-1);
    return Character.isSpaceChar(previousChar) || previousChar == ',';
  }

  /**
   * Whether given {@code '*'} is "current PC" symbol instead of {@link MUL}.
   */
  private boolean isCurrentPcSymbol(){
    if (afterSpaceOrComma()) return true;
    
    char previousChar = charAt(-1);
    return previousChar == '-' || previousChar == '+';
  }

  /**
   * Push back DATA_SIZE token.
   */
  private void pushbackDataSize() {
    yypushback(2);
  }

  private char charAt(final int offset) {
    final int loc = getTokenStart() + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  int operandSpaceCount = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _M68kLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 312: break;
          case 2: 
            { operandSpaceCount = 0; yybegin(YYINITIAL); return LINEFEED;
            } 
            // fall through
          case 313: break;
          case 3: 
            { operandSpaceCount = 0; yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            } 
            // fall through
          case 314: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 315: break;
          case 5: 
            { operandSpaceCount = 0; yybegin(AFTER_LABEL); return ID;
            } 
            // fall through
          case 316: break;
          case 6: 
            { operandSpaceCount = 0; return DOT;
            } 
            // fall through
          case 317: break;
          case 7: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 318: break;
          case 8: 
            { yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            } 
            // fall through
          case 319: break;
          case 9: 
            { return DOLLAR;
            } 
            // fall through
          case 320: break;
          case 10: 
            { yybegin(IN_INSTRUCTION); return COLON;
            } 
            // fall through
          case 321: break;
          case 11: 
            { yybegin(IN_OPERAND); return EQ_DIRECTIVE;
            } 
            // fall through
          case 322: break;
          case 12: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 13;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 14;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yybegin(AFTER_INSTRUCTION); return MACRO_CALL_ID;
            } 
            // fall through
          case 323: break;
          case 13: 
            { yybegin(IN_OPERAND); return BACKSLASH;
            } 
            // fall through
          case 324: break;
          case 14: 
            { operandSpaceCount = 1; yybegin(IN_OPERAND); return WHITE_SPACE;
            } 
            // fall through
          case 325: break;
          case 15: 
            { yybegin(IN_OPERAND); return STRING;
            } 
            // fall through
          case 326: break;
          case 16: 
            { operandSpaceCount++; return WHITE_SPACE;
            } 
            // fall through
          case 327: break;
          case 17: 
            { if (operandSpaceCount++ == 1) { yybegin(AFTER_OPERAND); } return WHITE_SPACE;
            } 
            // fall through
          case 328: break;
          case 18: 
            { if (isCurrentPcSymbol()) { return ID; } return MUL;
            } 
            // fall through
          case 329: break;
          case 19: 
            { return DEC_NUMBER;
            } 
            // fall through
          case 330: break;
          case 20: 
            { return ID;
            } 
            // fall through
          case 331: break;
          case 21: 
            { return PERCENT;
            } 
            // fall through
          case 332: break;
          case 22: 
            { return PIPE;
            } 
            // fall through
          case 333: break;
          case 23: 
            { return STRING;
            } 
            // fall through
          case 334: break;
          case 24: 
            { yybegin(MACRO_PARAMETER); return BACKSLASH;
            } 
            // fall through
          case 335: break;
          case 25: 
            { return DOT;
            } 
            // fall through
          case 336: break;
          case 26: 
            { return EQ;
            } 
            // fall through
          case 337: break;
          case 27: 
            { return COMMA;
            } 
            // fall through
          case 338: break;
          case 28: 
            { return PLUS;
            } 
            // fall through
          case 339: break;
          case 29: 
            { return MINUS;
            } 
            // fall through
          case 340: break;
          case 30: 
            { return DIV;
            } 
            // fall through
          case 341: break;
          case 31: 
            { return POW;
            } 
            // fall through
          case 342: break;
          case 32: 
            { return HASH;
            } 
            // fall through
          case 343: break;
          case 33: 
            { return TILDE;
            } 
            // fall through
          case 344: break;
          case 34: 
            { return L_PAREN;
            } 
            // fall through
          case 345: break;
          case 35: 
            { return R_PAREN;
            } 
            // fall through
          case 346: break;
          case 36: 
            { return L_BRACKET;
            } 
            // fall through
          case 347: break;
          case 37: 
            { return R_BRACKET;
            } 
            // fall through
          case 348: break;
          case 38: 
            { return EXCLAMATION;
            } 
            // fall through
          case 349: break;
          case 39: 
            { return AMPERSAND;
            } 
            // fall through
          case 350: break;
          case 40: 
            { return LT;
            } 
            // fall through
          case 351: break;
          case 41: 
            { return GT;
            } 
            // fall through
          case 352: break;
          case 42: 
            { yybegin(IN_OPERAND); return DEC_NUMBER;
            } 
            // fall through
          case 353: break;
          case 43: 
            { yybegin(IN_OPERAND); return ID;
            } 
            // fall through
          case 354: break;
          case 44: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 9;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 12;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return WHITE_SPACE;
            } 
            // fall through
          case 355: break;
          case 45: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return SF;
            } 
            // fall through
          case 356: break;
          case 46: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return ST;
            } 
            // fall through
          case 357: break;
          case 47: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return DS;
            } 
            // fall through
          case 358: break;
          case 48: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return DC;
            } 
            // fall through
          case 359: break;
          case 49: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return DR;
            } 
            // fall through
          case 360: break;
          case 50: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return DX;
            } 
            // fall through
          case 361: break;
          case 51: 
            { yybegin(IN_OPERAND); return IF;
            } 
            // fall through
          case 362: break;
          case 52: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return OR;
            } 
            // fall through
          case 363: break;
          case 53: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return RS;
            } 
            // fall through
          case 364: break;
          case 54: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_S;
            } 
            // fall through
          case 365: break;
          case 55: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_B;
            } 
            // fall through
          case 366: break;
          case 56: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_W;
            } 
            // fall through
          case 367: break;
          case 57: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_L;
            } 
            // fall through
          case 368: break;
          case 58: 
            { return HEX_NUMBER;
            } 
            // fall through
          case 369: break;
          case 59: 
            { return OCT_NUMBER;
            } 
            // fall through
          case 370: break;
          case 60: 
            { return BIN_NUMBER;
            } 
            // fall through
          case 371: break;
          case 61: 
            { return PIPE_PIPE;
            } 
            // fall through
          case 372: break;
          case 62: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_S;
            } 
            // fall through
          case 373: break;
          case 63: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_B;
            } 
            // fall through
          case 374: break;
          case 64: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_W;
            } 
            // fall through
          case 375: break;
          case 65: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_L;
            } 
            // fall through
          case 376: break;
          case 66: 
            { return SP;
            } 
            // fall through
          case 377: break;
          case 67: 
            { return SR;
            } 
            // fall through
          case 378: break;
          case 68: 
            { return ADDRESS_REGISTER;
            } 
            // fall through
          case 379: break;
          case 69: 
            { return DATA_REGISTER;
            } 
            // fall through
          case 380: break;
          case 70: 
            { return PC;
            } 
            // fall through
          case 381: break;
          case 71: 
            { return EQ_EQ;
            } 
            // fall through
          case 382: break;
          case 72: 
            { return SLASH_SLASH;
            } 
            // fall through
          case 383: break;
          case 73: 
            { return EXCLAMATION_EQ;
            } 
            // fall through
          case 384: break;
          case 74: 
            { return AMPERSAND_AMPERSAND;
            } 
            // fall through
          case 385: break;
          case 75: 
            { return LT_EQ;
            } 
            // fall through
          case 386: break;
          case 76: 
            { return LT_LT;
            } 
            // fall through
          case 387: break;
          case 77: 
            { return LT_GT;
            } 
            // fall through
          case 388: break;
          case 78: 
            { return GT_EQ;
            } 
            // fall through
          case 389: break;
          case 79: 
            { return GT_GT;
            } 
            // fall through
          case 390: break;
          case 80: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 9;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 10;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return WHITE_SPACE;
            } 
            // fall through
          case 391: break;
          case 81: 
            { yybegin(IN_OPERAND); return EQU;
            } 
            // fall through
          case 392: break;
          case 82: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SLS;
            } 
            // fall through
          case 393: break;
          case 83: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SLE;
            } 
            // fall through
          case 394: break;
          case 84: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SLO;
            } 
            // fall through
          case 395: break;
          case 85: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SLT;
            } 
            // fall through
          case 396: break;
          case 86: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SCS;
            } 
            // fall through
          case 397: break;
          case 87: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SCC;
            } 
            // fall through
          case 398: break;
          case 88: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SEQ;
            } 
            // fall through
          case 399: break;
          case 89: 
            { yybegin(IN_OPERAND); return SET;
            } 
            // fall through
          case 400: break;
          case 90: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SGE;
            } 
            // fall through
          case 401: break;
          case 91: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SGT;
            } 
            // fall through
          case 402: break;
          case 92: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SHS;
            } 
            // fall through
          case 403: break;
          case 93: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SHI;
            } 
            // fall through
          case 404: break;
          case 94: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SMI;
            } 
            // fall through
          case 405: break;
          case 95: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SNE;
            } 
            // fall through
          case 406: break;
          case 96: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SPL;
            } 
            // fall through
          case 407: break;
          case 97: 
            { yybegin(IN_OPERAND); return SPC;
            } 
            // fall through
          case 408: break;
          case 98: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SUB;
            } 
            // fall through
          case 409: break;
          case 99: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SVS;
            } 
            // fall through
          case 410: break;
          case 100: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SVC;
            } 
            // fall through
          case 411: break;
          case 101: 
            { yybegin(AFTER_OPERAND); return BSS;
            } 
            // fall through
          case 412: break;
          case 102: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BSR;
            } 
            // fall through
          case 413: break;
          case 103: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLS;
            } 
            // fall through
          case 414: break;
          case 104: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLE;
            } 
            // fall through
          case 415: break;
          case 105: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLK;
            } 
            // fall through
          case 416: break;
          case 106: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLO;
            } 
            // fall through
          case 417: break;
          case 107: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLT;
            } 
            // fall through
          case 418: break;
          case 108: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BCS;
            } 
            // fall through
          case 419: break;
          case 109: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BCC;
            } 
            // fall through
          case 420: break;
          case 110: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BEQ;
            } 
            // fall through
          case 421: break;
          case 111: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BGE;
            } 
            // fall through
          case 422: break;
          case 112: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BGT;
            } 
            // fall through
          case 423: break;
          case 113: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BHS;
            } 
            // fall through
          case 424: break;
          case 114: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BHI;
            } 
            // fall through
          case 425: break;
          case 115: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BMI;
            } 
            // fall through
          case 426: break;
          case 116: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BNE;
            } 
            // fall through
          case 427: break;
          case 117: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BPL;
            } 
            // fall through
          case 428: break;
          case 118: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BRA;
            } 
            // fall through
          case 429: break;
          case 119: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BVS;
            } 
            // fall through
          case 430: break;
          case 120: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BVC;
            } 
            // fall through
          case 431: break;
          case 121: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return LSL;
            } 
            // fall through
          case 432: break;
          case 122: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return LSR;
            } 
            // fall through
          case 433: break;
          case 123: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return LEA;
            } 
            // fall through
          case 434: break;
          case 124: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ASL;
            } 
            // fall through
          case 435: break;
          case 125: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ASR;
            } 
            // fall through
          case 436: break;
          case 126: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ADD;
            } 
            // fall through
          case 437: break;
          case 127: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return AND;
            } 
            // fall through
          case 438: break;
          case 128: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return CLR;
            } 
            // fall through
          case 439: break;
          case 129: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return CHK;
            } 
            // fall through
          case 440: break;
          case 130: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return CMP;
            } 
            // fall through
          case 441: break;
          case 131: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return DBF;
            } 
            // fall through
          case 442: break;
          case 132: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return DBT;
            } 
            // fall through
          case 443: break;
          case 133: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return DCB;
            } 
            // fall through
          case 444: break;
          case 134: 
            { yybegin(AFTER_OPERAND); return END;
            } 
            // fall through
          case 445: break;
          case 135: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return EOR;
            } 
            // fall through
          case 446: break;
          case 136: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return EXG;
            } 
            // fall through
          case 447: break;
          case 137: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return EXT;
            } 
            // fall through
          case 448: break;
          case 138: 
            { yybegin(AFTER_OPERAND); return FAR;
            } 
            // fall through
          case 449: break;
          case 139: 
            { yybegin(IN_OPERAND); return IF1;
            } 
            // fall through
          case 450: break;
          case 140: 
            { yybegin(IN_OPERAND); return IFB;
            } 
            // fall through
          case 451: break;
          case 141: 
            { yybegin(IN_OPERAND); return IFC;
            } 
            // fall through
          case 452: break;
          case 142: 
            { yybegin(IN_OPERAND); return IFD;
            } 
            // fall through
          case 453: break;
          case 143: 
            { yybegin(IN_OPERAND); return IF2;
            } 
            // fall through
          case 454: break;
          case 144: 
            { yybegin(IN_OPERAND); return JSR;
            } 
            // fall through
          case 455: break;
          case 145: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return JMP;
            } 
            // fall through
          case 456: break;
          case 146: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return NEG;
            } 
            // fall through
          case 457: break;
          case 147: 
            { yybegin(AFTER_OPERAND); return NOP;
            } 
            // fall through
          case 458: break;
          case 148: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return NOT;
            } 
            // fall through
          case 459: break;
          case 149: 
            { yybegin(AFTER_OPERAND); return ODD;
            } 
            // fall through
          case 460: break;
          case 150: 
            { yybegin(IN_OPERAND); return OPT;
            } 
            // fall through
          case 461: break;
          case 151: 
            { yybegin(IN_OPERAND); return ORG;
            } 
            // fall through
          case 462: break;
          case 152: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ORI;
            } 
            // fall through
          case 463: break;
          case 153: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return PEA;
            } 
            // fall through
          case 464: break;
          case 154: 
            { yybegin(IN_OPERAND); return REG;
            } 
            // fall through
          case 465: break;
          case 155: 
            { yybegin(AFTER_OPERAND); return REM;
            } 
            // fall through
          case 466: break;
          case 156: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ROL;
            } 
            // fall through
          case 467: break;
          case 157: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ROR;
            } 
            // fall through
          case 468: break;
          case 158: 
            { yybegin(AFTER_OPERAND); return RTS;
            } 
            // fall through
          case 469: break;
          case 159: 
            { yybegin(AFTER_OPERAND); return RTE;
            } 
            // fall through
          case 470: break;
          case 160: 
            { yybegin(AFTER_OPERAND); return RTR;
            } 
            // fall through
          case 471: break;
          case 161: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return TST;
            } 
            // fall through
          case 472: break;
          case 162: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return TAS;
            } 
            // fall through
          case 473: break;
          case 163: 
            { yybegin(STRING_DIRECTIVE); return TTL;
            } 
            // fall through
          case 474: break;
          case 164: 
            { return SSP;
            } 
            // fall through
          case 475: break;
          case 165: 
            { return SFC;
            } 
            // fall through
          case 476: break;
          case 166: 
            { return CCR;
            } 
            // fall through
          case 477: break;
          case 167: 
            { return DFC;
            } 
            // fall through
          case 478: break;
          case 168: 
            { return USP;
            } 
            // fall through
          case 479: break;
          case 169: 
            { return VBR;
            } 
            // fall through
          case 480: break;
          case 170: 
            { yybegin(IN_OPERAND); return EQUR;
            } 
            // fall through
          case 481: break;
          case 171: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SBCD;
            } 
            // fall through
          case 482: break;
          case 172: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SWAP;
            } 
            // fall through
          case 483: break;
          case 173: 
            { yybegin(IN_OPERAND); return STOP;
            } 
            // fall through
          case 484: break;
          case 174: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SUBA;
            } 
            // fall through
          case 485: break;
          case 175: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SUBI;
            } 
            // fall through
          case 486: break;
          case 176: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SUBQ;
            } 
            // fall through
          case 487: break;
          case 177: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SUBX;
            } 
            // fall through
          case 488: break;
          case 178: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return BSET;
            } 
            // fall through
          case 489: break;
          case 179: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return BCLR;
            } 
            // fall through
          case 490: break;
          case 180: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return BCHG;
            } 
            // fall through
          case 491: break;
          case 181: 
            { yybegin(IN_OPERAND); return BKPT;
            } 
            // fall through
          case 492: break;
          case 182: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return BTST;
            } 
            // fall through
          case 493: break;
          case 183: 
            { yybegin(IN_OPERAND); return LLEN;
            } 
            // fall through
          case 494: break;
          case 184: 
            { yybegin(AFTER_OPERAND); return LIST;
            } 
            // fall through
          case 495: break;
          case 185: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return LINK;
            } 
            // fall through
          case 496: break;
          case 186: 
            { yybegin(IN_OPERAND); return LOAD;
            } 
            // fall through
          case 497: break;
          case 187: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ABCD;
            } 
            // fall through
          case 498: break;
          case 188: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ADDA;
            } 
            // fall through
          case 499: break;
          case 189: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ADDI;
            } 
            // fall through
          case 500: break;
          case 190: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ADDQ;
            } 
            // fall through
          case 501: break;
          case 191: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ADDX;
            } 
            // fall through
          case 502: break;
          case 192: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ANDI;
            } 
            // fall through
          case 503: break;
          case 193: 
            { yybegin(AFTER_OPERAND); return CSEG;
            } 
            // fall through
          case 504: break;
          case 194: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return CMPA;
            } 
            // fall through
          case 505: break;
          case 195: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return CMPI;
            } 
            // fall through
          case 506: break;
          case 196: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return CMPM;
            } 
            // fall through
          case 507: break;
          case 197: 
            { yybegin(IN_OPERAND); return CNOP;
            } 
            // fall through
          case 508: break;
          case 198: 
            { yybegin(AFTER_OPERAND); return CODE;
            } 
            // fall through
          case 509: break;
          case 199: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DSEG;
            } 
            // fall through
          case 510: break;
          case 200: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBLS;
            } 
            // fall through
          case 511: break;
          case 201: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBLE;
            } 
            // fall through
          case 512: break;
          case 202: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBLO;
            } 
            // fall through
          case 513: break;
          case 203: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBLT;
            } 
            // fall through
          case 514: break;
          case 204: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBCS;
            } 
            // fall through
          case 515: break;
          case 205: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBCC;
            } 
            // fall through
          case 516: break;
          case 206: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBEQ;
            } 
            // fall through
          case 517: break;
          case 207: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBGE;
            } 
            // fall through
          case 518: break;
          case 208: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBGT;
            } 
            // fall through
          case 519: break;
          case 209: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBHS;
            } 
            // fall through
          case 520: break;
          case 210: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBHI;
            } 
            // fall through
          case 521: break;
          case 211: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBMI;
            } 
            // fall through
          case 522: break;
          case 212: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBNE;
            } 
            // fall through
          case 523: break;
          case 213: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBPL;
            } 
            // fall through
          case 524: break;
          case 214: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBRA;
            } 
            // fall through
          case 525: break;
          case 215: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBVS;
            } 
            // fall through
          case 526: break;
          case 216: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBVC;
            } 
            // fall through
          case 527: break;
          case 217: 
            { yybegin(AFTER_OPERAND); return DATA;
            } 
            // fall through
          case 528: break;
          case 218: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DIVS;
            } 
            // fall through
          case 529: break;
          case 219: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DIVU;
            } 
            // fall through
          case 530: break;
          case 220: 
            { yybegin(AFTER_OPERAND); return ELSE;
            } 
            // fall through
          case 531: break;
          case 221: 
            { yybegin(STRING_DIRECTIVE); return ECHO;
            } 
            // fall through
          case 532: break;
          case 222: 
            { yybegin(AFTER_OPERAND); return ENDC;
            } 
            // fall through
          case 533: break;
          case 223: 
            { yybegin(AFTER_OPERAND); return ENDM;
            } 
            // fall through
          case 534: break;
          case 224: 
            { yybegin(AFTER_OPERAND); return ENDR;
            } 
            // fall through
          case 535: break;
          case 225: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return EORI;
            } 
            // fall through
          case 536: break;
          case 226: 
            { yybegin(AFTER_OPERAND); return EREM;
            } 
            // fall through
          case 537: break;
          case 227: 
            { yybegin(AFTER_OPERAND); return EVEN;
            } 
            // fall through
          case 538: break;
          case 228: 
            { yybegin(AFTER_OPERAND); return FAIL;
            } 
            // fall through
          case 539: break;
          case 229: 
            { yybegin(STRING_DIRECTIVE); return IDNT;
            } 
            // fall through
          case 540: break;
          case 230: 
            { yybegin(IN_OPERAND); return IFLE;
            } 
            // fall through
          case 541: break;
          case 231: 
            { yybegin(IN_OPERAND); return IFLT;
            } 
            // fall through
          case 542: break;
          case 232: 
            { yybegin(IN_OPERAND); return IFEQ;
            } 
            // fall through
          case 543: break;
          case 233: 
            { yybegin(IN_OPERAND); return IFGE;
            } 
            // fall through
          case 544: break;
          case 234: 
            { yybegin(IN_OPERAND); return IFGT;
            } 
            // fall through
          case 545: break;
          case 235: 
            { yybegin(IN_OPERAND); return IFMI;
            } 
            // fall through
          case 546: break;
          case 236: 
            { yybegin(IN_OPERAND); return IFNB;
            } 
            // fall through
          case 547: break;
          case 237: 
            { yybegin(IN_OPERAND); return IFNC;
            } 
            // fall through
          case 548: break;
          case 238: 
            { yybegin(IN_OPERAND); return IFND;
            } 
            // fall through
          case 549: break;
          case 239: 
            { yybegin(IN_OPERAND); return IFNE;
            } 
            // fall through
          case 550: break;
          case 240: 
            { yybegin(IN_OPERAND); return IFP1;
            } 
            // fall through
          case 551: break;
          case 241: 
            { yybegin(IN_OPERAND); return IFPL;
            } 
            // fall through
          case 552: break;
          case 242: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return MOVE;
            } 
            // fall through
          case 553: break;
          case 243: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return MULS;
            } 
            // fall through
          case 554: break;
          case 244: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return MULU;
            } 
            // fall through
          case 555: break;
          case 245: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return NBCD;
            } 
            // fall through
          case 556: break;
          case 246: 
            { yybegin(IN_OPERAND); return NEAR;
            } 
            // fall through
          case 557: break;
          case 247: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return NEGX;
            } 
            // fall through
          case 558: break;
          case 248: 
            { yybegin(IN_OPERAND); return PLEN;
            } 
            // fall through
          case 559: break;
          case 249: 
            { yybegin(AFTER_OPERAND); return PAGE;
            } 
            // fall through
          case 560: break;
          case 250: 
            { yybegin(IN_OPERAND); return REPT;
            } 
            // fall through
          case 561: break;
          case 251: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ROXL;
            } 
            // fall through
          case 562: break;
          case 252: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ROXR;
            } 
            // fall through
          case 563: break;
          case 253: 
            { yybegin(AFTER_OPERAND); return TEXT;
            } 
            // fall through
          case 564: break;
          case 254: 
            { yybegin(IN_OPERAND); return TRAP;
            } 
            // fall through
          case 565: break;
          case 255: 
            { yybegin(IN_OPERAND); return UNLK;
            } 
            // fall through
          case 566: break;
          case 256: 
            { yybegin(IN_OPERAND); return XDEF;
            } 
            // fall through
          case 567: break;
          case 257: 
            { yybegin(IN_OPERAND); return XREF;
            } 
            // fall through
          case 568: break;
          case 258: 
            { pushbackDataSize(); return SP;
            } 
            // fall through
          case 569: break;
          case 259: 
            { pushbackDataSize(); return ADDRESS_REGISTER;
            } 
            // fall through
          case 570: break;
          case 260: 
            { pushbackDataSize(); return DATA_REGISTER;
            } 
            // fall through
          case 571: break;
          case 261: 
            { return MACRO;
            } 
            // fall through
          case 572: break;
          case 262: 
            { yybegin(AFTER_OPERAND); return MACRO;
            } 
            // fall through
          case 573: break;
          case 263: 
            { yybegin(AFTER_OPERAND); return BSS_C;
            } 
            // fall through
          case 574: break;
          case 264: 
            { yybegin(AFTER_OPERAND); return BSS_F;
            } 
            // fall through
          case 575: break;
          case 265: 
            { yybegin(IN_OPERAND); return ALIGN;
            } 
            // fall through
          case 576: break;
          case 266: 
            { yybegin(AFTER_OPERAND); return ENDIF;
            } 
            // fall through
          case 577: break;
          case 267: 
            { yybegin(AFTER_OPERAND); return MEXIT;
            } 
            // fall through
          case 578: break;
          case 268: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVES;
            } 
            // fall through
          case 579: break;
          case 269: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEA;
            } 
            // fall through
          case 580: break;
          case 270: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEC;
            } 
            // fall through
          case 581: break;
          case 271: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEM;
            } 
            // fall through
          case 582: break;
          case 272: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEP;
            } 
            // fall through
          case 583: break;
          case 273: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEQ;
            } 
            // fall through
          case 584: break;
          case 274: 
            { yybegin(IN_OPERAND); return RSSET;
            } 
            // fall through
          case 585: break;
          case 275: 
            { yybegin(AFTER_OPERAND); return RESET;
            } 
            // fall through
          case 586: break;
          case 276: 
            { yybegin(AFTER_OPERAND); return TRAPV;
            } 
            // fall through
          case 587: break;
          case 277: 
            { yybegin(AFTER_OPERAND); return CODE_C;
            } 
            // fall through
          case 588: break;
          case 278: 
            { yybegin(AFTER_OPERAND); return CODE_F;
            } 
            // fall through
          case 589: break;
          case 279: 
            { yybegin(AFTER_OPERAND); return DATA_C;
            } 
            // fall through
          case 590: break;
          case 280: 
            { yybegin(AFTER_OPERAND); return DATA_F;
            } 
            // fall through
          case 591: break;
          case 281: 
            { yybegin(AFTER_OPERAND); return ELSEIF;
            } 
            // fall through
          case 592: break;
          case 282: 
            { yybegin(AFTER_OPERAND); return INLINE;
            } 
            // fall through
          case 593: break;
          case 283: 
            { yybegin(STRING_DIRECTIVE); return INCBIN;
            } 
            // fall through
          case 594: break;
          case 284: 
            { yybegin(STRING_DIRECTIVE); return INCDIR;
            } 
            // fall through
          case 595: break;
          case 285: 
            { yybegin(AFTER_OPERAND); return NOLIST;
            } 
            // fall through
          case 596: break;
          case 286: 
            { yybegin(AFTER_OPERAND); return NOPAGE;
            } 
            // fall through
          case 597: break;
          case 287: 
            { yybegin(STRING_DIRECTIVE); return PRINTT;
            } 
            // fall through
          case 598: break;
          case 288: 
            { yybegin(IN_OPERAND); return PRINTV;
            } 
            // fall through
          case 599: break;
          case 289: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 9;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 11;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yybegin(MACRO_DECLARATION); return WHITE_SPACE;
            } 
            // fall through
          case 600: break;
          case 290: 
            { yybegin(IN_OPERAND); return SECTION;
            } 
            // fall through
          case 601: break;
          case 291: 
            { yybegin(AFTER_OPERAND); return AC68080;
            } 
            // fall through
          case 602: break;
          case 292: 
            { yybegin(AFTER_OPERAND); return EINLINE;
            } 
            // fall through
          case 603: break;
          case 293: 
            { yybegin(AFTER_OPERAND); return ILLEGAL;
            } 
            // fall through
          case 604: break;
          case 294: 
            { yybegin(STRING_DIRECTIVE); return INCLUDE;
            } 
            // fall through
          case 605: break;
          case 295: 
            { yybegin(IN_OPERAND); return JUMPERR;
            } 
            // fall through
          case 606: break;
          case 296: 
            { yybegin(IN_OPERAND); return JUMPPTR;
            } 
            // fall through
          case 607: break;
          case 297: 
            { yybegin(IN_OPERAND); return MACHINE;
            } 
            // fall through
          case 608: break;
          case 298: 
            { yybegin(AFTER_OPERAND); return MC68010;
            } 
            // fall through
          case 609: break;
          case 299: 
            { yybegin(AFTER_OPERAND); return MC68000;
            } 
            // fall through
          case 610: break;
          case 300: 
            { yybegin(AFTER_OPERAND); return MC68020;
            } 
            // fall through
          case 611: break;
          case 301: 
            { yybegin(AFTER_OPERAND); return MC68060;
            } 
            // fall through
          case 612: break;
          case 302: 
            { yybegin(AFTER_OPERAND); return MC68030;
            } 
            // fall through
          case 613: break;
          case 303: 
            { yybegin(AFTER_OPERAND); return MC68040;
            } 
            // fall through
          case 614: break;
          case 304: 
            { yybegin(AFTER_OPERAND); return RSRESET;
            } 
            // fall through
          case 615: break;
          case 305: 
            { yybegin(IN_OPERAND); return ADDWATCH;
            } 
            // fall through
          case 616: break;
          case 306: 
            { yybegin(IN_OPERAND); return IFMACROD;
            } 
            // fall through
          case 617: break;
          case 307: 
            { yybegin(AFTER_OPERAND); return INITNEAR;
            } 
            // fall through
          case 618: break;
          case 308: 
            { yybegin(IN_OPERAND); return IFMACROND;
            } 
            // fall through
          case 619: break;
          case 309: 
            { yybegin(AFTER_OPERAND); return NEAR_CODE;
            } 
            // fall through
          case 620: break;
          case 310: 
            { yybegin(AFTER_OPERAND); return POPSECTION;
            } 
            // fall through
          case 621: break;
          case 311: 
            { yybegin(AFTER_OPERAND); return PUSHSECTION;
            } 
            // fall through
          case 622: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
