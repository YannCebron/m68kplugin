/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * Copyright 2021 The Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.yanncebron.m68kplugin.lexer;

import com.intellij.psi.tree.IElementType;

import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.yanncebron.m68kplugin.lang.psi.M68kTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/yann/idea-ultimate/m68kplugin/src/grammar/_M68kLexer.flex</tt>
 */
public class _M68kLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AFTER_LABEL = 2;
  public static final int IN_INSTRUCTION = 4;
  public static final int AFTER_INSTRUCTION = 6;
  public static final int STRING_DIRECTIVE = 8;
  public static final int IN_OPERAND = 10;
  public static final int AFTER_OPERAND = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 3968 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\17\5\1\6\1\7\11\5\1\10\1\11\1\5\1\12\1\13\11\5\1\14\14"+
    "\5\1\15\2\5\1\16\u01e2\5");

  /* The ZZ_CMAP_Y table has 960 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\56\5\1\6\3\5\1\7\6\5\1\6\14\5\1\10\3\5\1\10\3\5\1\10"+
    "\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\2\5\1\7\3"+
    "\5\1\7\2\5\1\6\10\5\1\6\1\5\1\7\72\5\1\6\1\7\11\5\1\10\3\5\1\7\5\5\1\11\5"+
    "\5\1\7\2\5\1\7\4\5\1\11\36\5\1\12\257\5\1\6\24\5\1\7\1\5\1\6\5\5\2\7\2\5\1"+
    "\7\14\5\1\7\130\5\1\7\2\13\52\5\1\6\35\5\1\10\3\5\1\7\1\5\1\14\4\5\1\7\10"+
    "\5\1\7\12\5\1\7\3\5\1\7\13\5\1\7\3\5\1\6\2\5\1\7\15\5\1\6\32\5\1\7\60\5\1"+
    "\6\6\5\1\7\143\5\1\15\1\16\12\5\1\7\65\5");

  /* The ZZ_CMAP_A table has 480 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\4\1\5\1\1\22\0\1\2\1\67\1\21\1\65\1\10\1\14\1\70\1\17\1\73"+
    "\1\74\1\6\1\61\1\60\1\62\1\22\1\63\2\16\6\13\2\7\1\56\1\3\1\71\1\57\1\72\1"+
    "\0\1\12\1\27\1\30\1\31\1\32\1\33\1\26\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1"+
    "\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\2\25\1\75\1\20\1\76"+
    "\1\64\1\23\1\0\1\27\1\30\1\31\1\32\1\33\1\26\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\2\25\1\0\1\15"+
    "\1\0\1\66\6\0\1\4\72\0\12\24\46\0\12\24\14\0\12\24\20\0\12\24\6\0\12\24\16"+
    "\0\2\4\27\0\6\11\57\0\12\24\16\0\62\24");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\1\1\13\1\1"+
    "\23\14\1\15\1\1\1\16\1\17\1\4\2\16\1\20"+
    "\1\21\1\22\2\1\1\23\1\24\1\25\1\26\1\25"+
    "\1\27\2\1\7\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\1\1\42\1\43\1\44"+
    "\1\45\1\12\4\0\32\14\1\46\1\14\1\47\10\14"+
    "\1\50\23\14\1\51\6\14\1\52\1\14\1\53\11\14"+
    "\1\54\12\14\1\55\1\56\1\57\1\60\1\16\3\0"+
    "\1\61\1\62\1\63\1\25\3\0\1\64\1\65\1\66"+
    "\1\67\1\70\1\30\1\71\1\72\1\73\1\74\2\30"+
    "\1\75\1\76\2\14\1\77\1\14\1\100\1\101\1\102"+
    "\1\103\2\14\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\14\1\123\1\124\1\14\1\125\1\126\1\127"+
    "\1\130\1\131\4\14\1\132\11\14\1\133\1\14\1\134"+
    "\4\14\1\135\1\136\1\137\2\14\1\140\1\141\1\142"+
    "\1\143\1\144\11\14\1\145\1\146\1\14\1\147\4\14"+
    "\1\150\1\151\5\14\1\152\1\14\1\153\1\154\1\155"+
    "\1\156\1\157\1\160\1\14\1\161\2\14\1\162\2\14"+
    "\1\163\1\164\3\14\1\165\1\166\1\167\1\14\1\170"+
    "\1\171\1\14\1\172\1\173\1\174\1\175\1\176\1\177"+
    "\1\200\1\201\1\202\1\203\1\204\1\205\1\206\1\207"+
    "\1\14\1\210\1\211\1\212\1\14\1\213\2\14\1\214"+
    "\3\14\1\215\1\216\1\217\1\220\1\221\1\222\1\223"+
    "\1\224\1\14\1\225\1\14\1\226\1\227\1\230\1\231"+
    "\1\14\1\232\1\233\1\234\1\235\1\236\1\237\1\240"+
    "\1\241\1\242\1\243\1\244\1\245\1\246\1\247\1\250"+
    "\1\251\1\252\1\253\1\254\1\255\1\256\1\257\1\260"+
    "\1\261\1\262\1\263\1\264\1\265\1\14\1\266\1\267"+
    "\1\14\1\270\1\271\1\272\1\273\1\274\1\275\1\276"+
    "\1\277\1\300\1\301\1\302\1\14\1\303\1\304\1\305"+
    "\1\306\1\307\1\310\6\14\1\311\1\312\1\313\1\314"+
    "\2\14\1\315\1\316\1\317\1\320\1\321\2\14\1\322"+
    "\1\323\1\14\1\324\1\14\1\325\1\326\2\14\1\327"+
    "\1\14\1\330\1\331\1\332\1\333\1\334\1\335\1\336"+
    "\1\337\1\340\1\341\1\342\1\14\1\343\1\344\1\345"+
    "\4\14\1\346\10\14\1\347\1\350\1\351\1\352\1\353"+
    "\1\354\3\14\1\355\1\14\1\356\1\14\1\357\1\14"+
    "\1\360\1\361\1\362\1\363\1\14\1\364\2\14\1\365"+
    "\1\366\1\14\1\367\2\14\1\370\1\371\1\372\1\373"+
    "\3\14\1\374\1\14\1\375\1\376\1\377\1\u0100\1\u0101"+
    "\1\u0102\1\u0103\1\u0104\1\14\1\u0105";

  private static int [] zzUnpackAction() {
    int [] result = new int[518];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u01b9\0\u02b5\0\u02f4\0\u0333"+
    "\0\u01b9\0\u01b9\0\u0372\0\u03b1\0\u01b9\0\u03f0\0\u042f\0\u046e"+
    "\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666"+
    "\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e"+
    "\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56"+
    "\0\u0a95\0\u01b9\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u01b9\0\u0bd0"+
    "\0\u01b9\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u01b9\0\u01b9\0\u01b9\0\u01b9"+
    "\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u0ec4\0\u0f03\0\u01b9"+
    "\0\u01b9\0\u01b9\0\u01b9\0\u0f42\0\u0276\0\u02b5\0\u03b1\0\u03f0"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a"+
    "\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332"+
    "\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a"+
    "\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12"+
    "\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02"+
    "\0\u1f41\0\u1f80\0\u042f\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb"+
    "\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3"+
    "\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u01b9"+
    "\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u24ab\0\u24ea\0\u0ccc\0\u0b13"+
    "\0\u0b52\0\u0b91\0\u01b9\0\u2529\0\u2568\0\u0c8d\0\u0d0b\0\u0d0b"+
    "\0\u0d0b\0\u0d0b\0\u0d0b\0\u25a7\0\u0d0b\0\u0d0b\0\u0d0b\0\u0d0b"+
    "\0\u25e6\0\u2625\0\u01b9\0\u01b9\0\u2664\0\u26a3\0\u26e2\0\u2721"+
    "\0\u2760\0\u042f\0\u042f\0\u042f\0\u279f\0\u27de\0\u042f\0\u042f"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u281d\0\u042f\0\u285c"+
    "\0\u289b\0\u042f\0\u042f\0\u042f\0\u042f\0\u28da\0\u2919\0\u2958"+
    "\0\u2997\0\u29d6\0\u042f\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11"+
    "\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u042f\0\u2c4c\0\u042f\0\u2c8b"+
    "\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u2ec2\0\u2f01\0\u2f40"+
    "\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u042f\0\u042f"+
    "\0\u30f9\0\u042f\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u042f\0\u042f"+
    "\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u342c\0\u042f\0\u346b"+
    "\0\u34aa\0\u042f\0\u34e9\0\u3528\0\u042f\0\u042f\0\u3567\0\u35a6"+
    "\0\u35e5\0\u042f\0\u042f\0\u042f\0\u3624\0\u042f\0\u042f\0\u3663"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u36a2\0\u36e1"+
    "\0\u042f\0\u042f\0\u3720\0\u042f\0\u375f\0\u379e\0\u042f\0\u37dd"+
    "\0\u381c\0\u385b\0\u0d0b\0\u0d0b\0\u0d0b\0\u042f\0\u042f\0\u042f"+
    "\0\u042f\0\u042f\0\u389a\0\u042f\0\u38d9\0\u042f\0\u042f\0\u042f"+
    "\0\u042f\0\u3918\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u3957"+
    "\0\u042f\0\u3996\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u39d5\0\u3a14"+
    "\0\u042f\0\u3a53\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u3a92\0\u042f\0\u042f"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e"+
    "\0\u3bcd\0\u3c0c\0\u042f\0\u042f\0\u042f\0\u042f\0\u3c4b\0\u3c8a"+
    "\0\u3cc9\0\u042f\0\u042f\0\u042f\0\u042f\0\u3d08\0\u3d47\0\u042f"+
    "\0\u042f\0\u3d86\0\u042f\0\u3dc5\0\u042f\0\u042f\0\u3e04\0\u3e43"+
    "\0\u042f\0\u3e82\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f"+
    "\0\u042f\0\u3ec1\0\u042f\0\u042f\0\u042f\0\u3f00\0\u042f\0\u042f"+
    "\0\u042f\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc\0\u042f\0\u403b\0\u407a"+
    "\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u042f\0\u042f"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u4233\0\u4272\0\u42b1\0\u042f"+
    "\0\u42f0\0\u042f\0\u432f\0\u042f\0\u436e\0\u042f\0\u042f\0\u042f"+
    "\0\u042f\0\u43ad\0\u042f\0\u43ec\0\u442b\0\u042f\0\u042f\0\u446a"+
    "\0\u042f\0\u44a9\0\u44e8\0\u042f\0\u042f\0\u042f\0\u042f\0\u4527"+
    "\0\u4566\0\u45a5\0\u042f\0\u45e4\0\u042f\0\u042f\0\u042f\0\u042f"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u4623\0\u042f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[518];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\10\1\12\1\13\1\14"+
    "\3\10\1\14\2\10\1\14\3\10\1\15\1\16\1\14"+
    "\31\17\22\10\1\11\1\20\1\13\1\10\1\20\1\13"+
    "\47\10\1\21\1\22\20\10\1\11\1\23\1\13\1\10"+
    "\1\23\1\13\1\24\3\10\1\24\2\10\1\24\1\10"+
    "\1\25\1\10\2\26\1\24\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\2\27\1\36\1\37\1\27\1\40"+
    "\1\41\1\42\1\43\1\44\1\27\1\45\1\46\1\47"+
    "\1\50\2\27\1\51\1\10\1\22\20\10\1\11\1\52"+
    "\2\10\1\52\14\10\1\53\54\10\1\54\1\11\1\55"+
    "\1\56\1\54\1\55\11\54\1\57\1\10\1\60\55\54"+
    "\1\10\1\11\1\61\1\13\1\10\1\61\1\62\1\63"+
    "\1\64\1\10\1\65\1\63\1\66\1\67\1\63\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\2\76\1\77\1\76"+
    "\1\100\1\101\12\76\1\102\2\76\1\103\1\76\1\104"+
    "\3\76\2\10\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\13\1\11\1\124\1\13\1\10\1\23\71\13"+
    "\101\0\1\12\1\13\1\0\1\12\1\13\70\0\1\13"+
    "\1\0\2\13\2\0\71\13\7\0\1\125\3\0\1\125"+
    "\2\0\1\125\5\0\1\125\31\17\30\0\1\125\3\0"+
    "\1\125\2\0\1\125\4\0\1\126\1\125\31\17\30\0"+
    "\1\17\3\0\1\17\2\0\1\17\4\0\33\17\23\0"+
    "\1\20\1\13\1\0\1\20\1\13\72\0\1\23\2\0"+
    "\1\23\100\0\1\127\3\0\1\127\2\0\1\127\5\0"+
    "\1\127\31\27\30\0\1\127\3\0\1\127\2\0\1\127"+
    "\4\0\1\130\1\127\31\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\33\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\4\27\1\131\26\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\5\27\1\132\1\27"+
    "\1\133\6\27\1\134\1\27\1\135\4\27\1\136\5\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\6\27"+
    "\1\137\1\27\1\140\1\141\1\142\3\27\1\143\1\144"+
    "\1\145\1\27\1\146\1\27\1\147\1\150\1\151\1\27"+
    "\1\152\2\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\12\27\1\153\3\27\1\154\1\155\1\156\1\157"+
    "\3\27\1\160\5\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\4\27\1\161\1\162\1\163\4\27\1\164"+
    "\11\27\1\165\5\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\13\27\1\166\2\27\1\167\1\27\1\170"+
    "\1\171\1\27\1\172\1\173\3\27\1\174\1\27\1\175"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\3\27"+
    "\1\176\12\27\1\177\1\27\1\200\12\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\17\27\1\201\5\27"+
    "\1\202\1\27\1\203\3\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\10\27\1\204\2\27\1\205\2\27"+
    "\1\206\2\27\1\207\3\27\1\210\5\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\4\27\1\211\3\27"+
    "\1\212\10\27\1\213\5\27\1\214\3\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\5\27\1\215\2\27"+
    "\1\216\10\27\1\217\11\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\7\27\1\220\12\27\1\221\1\27"+
    "\1\222\6\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\4\27\1\223\3\27\1\224\5\27\1\225\5\27"+
    "\1\226\6\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\10\27\1\227\10\27\1\230\3\27\1\231\1\232"+
    "\4\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\3\27\1\233\1\27\1\234\1\235\1\27\1\236\1\237"+
    "\1\240\3\27\1\241\1\242\1\243\1\27\1\244\3\27"+
    "\1\245\1\246\1\247\1\250\1\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\4\27\1\251\3\27\1\252"+
    "\13\27\1\253\1\254\5\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\20\27\1\255\12\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\7\27\1\256\14\27"+
    "\1\257\6\27\23\0\1\52\2\0\1\52\121\0\1\260"+
    "\10\0\1\261\6\0\1\262\3\0\1\263\22\0\1\54"+
    "\2\0\2\54\1\0\11\54\3\0\55\54\2\0\1\55"+
    "\1\13\1\0\1\55\1\13\70\0\1\56\1\0\1\13"+
    "\1\56\1\54\1\0\11\56\3\13\55\56\1\57\1\0"+
    "\15\57\1\264\1\265\56\57\1\60\1\0\16\60\1\266"+
    "\1\264\55\60\2\0\1\61\1\13\1\0\1\61\1\13"+
    "\77\0\1\63\3\0\1\63\2\0\1\63\5\0\1\267"+
    "\31\76\30\0\1\270\1\0\1\270\1\0\1\270\2\0"+
    "\1\270\5\0\1\270\1\0\6\270\56\0\1\271\2\0"+
    "\1\271\75\0\2\272\60\0\1\70\1\0\15\70\1\273"+
    "\1\274\56\70\1\72\1\0\16\72\1\275\1\273\55\72"+
    "\7\0\1\267\3\0\1\267\2\0\1\267\4\0\1\276"+
    "\1\267\3\76\1\277\10\76\1\300\6\76\1\301\3\76"+
    "\1\302\1\76\30\0\1\267\3\0\1\267\2\0\1\267"+
    "\4\0\1\276\1\267\31\76\30\0\1\267\3\0\1\267"+
    "\2\0\1\267\5\0\1\267\31\76\30\0\1\76\3\0"+
    "\1\76\2\0\1\76\4\0\33\76\30\0\1\76\3\0"+
    "\1\303\2\0\1\303\4\0\33\76\30\0\1\76\3\0"+
    "\1\76\2\0\1\76\4\0\6\76\1\304\24\76\30\0"+
    "\1\76\3\0\1\305\2\0\1\305\4\0\33\76\30\0"+
    "\1\76\3\0\1\76\2\0\1\76\4\0\6\76\1\306"+
    "\24\76\30\0\1\76\3\0\1\76\2\0\1\76\4\0"+
    "\22\76\1\307\1\76\1\310\1\311\5\76\30\0\1\76"+
    "\3\0\1\76\2\0\1\76\4\0\25\76\1\312\5\76"+
    "\112\0\1\313\77\0\1\314\4\0\1\13\1\0\1\124"+
    "\1\13\1\0\1\23\71\13\7\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\13\27\1\315\17\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\6\27\1\316\24\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\7\27"+
    "\1\317\23\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\13\27\1\320\17\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\7\27\1\321\23\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\16\27\1\322\5\27"+
    "\1\323\6\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\6\27\1\324\3\27\1\325\3\27\1\326\6\27"+
    "\1\327\5\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\23\27\1\330\7\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\10\27\1\331\15\27\1\332\4\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\13\27"+
    "\1\333\11\27\1\334\5\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\10\27\1\335\4\27\1\336\3\27"+
    "\1\337\3\27\1\340\1\341\4\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\13\27\1\342\17\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\10\27\1\343"+
    "\22\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\16\27\1\344\14\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\4\27\1\345\26\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\10\27\1\346\13\27\1\347"+
    "\1\350\5\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\25\27\1\351\5\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\6\27\1\352\16\27\1\353\5\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\15\27"+
    "\1\354\15\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\24\27\1\355\6\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\22\27\1\356\10\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\21\27\1\357\11\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\7\27"+
    "\1\360\23\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\10\27\1\361\22\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\26\27\1\362\4\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\3\27\1\363\2\27"+
    "\1\364\1\27\1\365\1\366\1\367\3\27\1\370\1\371"+
    "\1\372\1\27\1\373\1\27\1\374\1\27\1\375\1\27"+
    "\1\376\2\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\5\27\1\377\25\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\30\27\1\u0100\2\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\10\27\1\u0101\22\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\20\27"+
    "\1\u0102\12\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\25\27\1\u0103\5\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\7\27\1\u0104\23\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\24\27\1\u0105\6\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\27\27"+
    "\1\u0106\3\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\10\27\1\u0107\22\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\10\27\1\u0108\22\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\11\27\1\u0109\14\27"+
    "\1\u010a\4\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\5\27\1\u010b\1\u010c\1\u010d\1\u010e\1\u010f\4\27"+
    "\1\u0110\1\u0111\1\u0112\1\27\1\u0113\10\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\16\27\1\u0114\14\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\6\27"+
    "\1\u0115\7\27\1\u0116\14\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\22\27\1\u0117\10\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\24\27\1\u0118\6\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\17\27"+
    "\1\u0119\13\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\4\27\1\u011a\26\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\20\27\1\u011b\4\27\1\u011c\5\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\10\27"+
    "\1\u011d\22\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\4\27\1\u011e\26\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\16\27\1\u011f\5\27\1\u0120\6\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\6\27"+
    "\1\u0121\24\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\32\27\1\u0122\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\30\27\1\u0123\2\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\16\27\1\u0124\14\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\6\27\1\u0125"+
    "\24\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\11\27\1\u0126\21\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\16\27\1\u0127\3\27\1\u0128\3\27\1\u0129"+
    "\4\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\7\27\1\u012a\23\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\26\27\1\u012b\4\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\11\27\1\u012c\1\27\1\u012d"+
    "\17\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\11\27\1\u012e\21\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\4\27\1\u012f\26\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\10\27\1\u0130\22\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\13\27\1\u0131"+
    "\17\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\17\27\1\u0132\2\27\1\u0133\2\27\1\u0134\5\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\16\27\1\u0135"+
    "\5\27\1\u0136\5\27\1\u0137\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\24\27\1\u0138\1\u0139\5\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\10\27\1\u013a"+
    "\13\27\1\u013b\1\u013c\5\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\6\27\1\u013d\24\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\6\27\1\u013e\16\27"+
    "\1\u013f\5\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\6\27\1\u0140\14\27\1\u0141\2\27\1\u0142\4\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\10\27"+
    "\1\u0143\15\27\1\u0144\4\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\13\27\1\u0145\11\27\1\u0146\5\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\10\27"+
    "\1\u0147\10\27\1\u0148\3\27\1\u0149\1\u014a\4\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\13\27\1\u014b"+
    "\17\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\10\27\1\u014c\22\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\6\27\1\u014d\7\27\1\u014e\14\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\21\27\1\u014f"+
    "\11\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\5\27\1\u0150\25\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\6\27\1\u0151\16\27\1\u0152\5\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\4\27\1\u0153"+
    "\26\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\25\27\1\u0154\5\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\32\27\1\u0155\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\4\27\1\u0156\26\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\26\27\1\u0157\4\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\16\27"+
    "\1\u0158\14\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\10\27\1\u0159\22\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\10\27\1\u015a\22\27\21\0\1\57"+
    "\1\0\75\57\1\60\1\0\75\60\1\70\1\0\75\70"+
    "\1\72\1\0\75\72\7\0\1\76\3\0\1\76\2\0"+
    "\1\76\4\0\24\76\1\u015b\6\76\30\0\1\76\3\0"+
    "\1\76\2\0\1\76\4\0\22\76\1\u015c\10\76\30\0"+
    "\1\76\3\0\1\76\2\0\1\76\4\0\22\76\1\u015d"+
    "\10\76\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\16\27\1\u015e\14\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\7\27\1\u015f\23\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\4\27\1\u0160\6\27\1\u0161"+
    "\7\27\1\u0162\5\27\1\u0163\1\u0164\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\11\27\1\u0165\21\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\13\27\1\u0166"+
    "\17\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\11\27\1\u0167\21\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\24\27\1\u0168\6\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\26\27\1\u0169\4\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\1\u016a\32\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\26\27"+
    "\1\u016b\4\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\4\27\1\u016c\6\27\1\u016d\3\27\1\u016e\13\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\22\27"+
    "\1\u016f\10\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\10\27\1\u0170\22\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\11\27\1\u0171\21\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\4\27\1\u0172\26\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\6\27"+
    "\1\u0173\16\27\1\u0174\5\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\23\27\1\u0175\7\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\10\27\1\u0176\15\27"+
    "\1\u0177\4\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\13\27\1\u0178\11\27\1\u0179\5\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\10\27\1\u017a\10\27"+
    "\1\u017b\3\27\1\u017c\1\u017d\4\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\13\27\1\u017e\17\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\10\27\1\u017f"+
    "\22\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\16\27\1\u0180\14\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\4\27\1\u0181\26\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\6\27\1\u0182\16\27\1\u0183"+
    "\5\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\25\27\1\u0184\1\27\1\u0185\3\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\11\27\1\u0186\21\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\16\27\1\u0187"+
    "\14\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\10\27\1\u0188\22\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\6\27\1\u0189\4\27\1\u018a\3\27\1\u018b"+
    "\4\27\1\u018c\6\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\13\27\1\u018d\17\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\24\27\1\u018e\6\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\17\27\1\u018f"+
    "\13\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\20\27\1\u0190\12\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\23\27\1\u0191\7\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\10\27\1\u0192\15\27\1\u0193"+
    "\4\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\10\27\1\u0194\15\27\1\u0195\4\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\4\27\1\u0196\6\27\1\u0197"+
    "\17\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\5\27\1\u0198\1\u0199\1\u019a\1\u019b\22\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\16\27\1\u019c\14\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\10\27"+
    "\1\u019d\22\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\5\27\1\u019e\1\27\1\u019f\6\27\1\u01a0\14\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\13\27"+
    "\1\u01a1\17\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\22\27\1\u01a2\10\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\15\27\1\u01a3\15\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\26\27\1\u01a4\4\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\20\27"+
    "\1\u01a5\12\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\7\27\1\u01a6\23\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\24\27\1\u01a7\6\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\13\27\1\u01a8\17\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\10\27"+
    "\1\u01a9\22\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\25\27\1\u01aa\1\27\1\u01ab\3\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\7\27\1\u01ac\23\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\32\27"+
    "\1\u01ad\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\13\27\1\u01ae\17\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\4\27\1\u01af\26\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\10\27\1\u01b0\22\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\20\27\1\u01b1"+
    "\12\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\20\27\1\u01b2\12\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\26\27\1\u01b3\4\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\10\27\1\u01b4\22\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\16\27\1\u01b5"+
    "\5\27\1\u01b6\6\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\10\27\1\u01b7\22\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\10\27\1\u01b8\22\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\7\27\1\u01b9"+
    "\23\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\26\27\1\u01ba\4\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\22\27\1\u01bb\10\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\4\27\1\u01bc\6\27\1\u01bd"+
    "\7\27\1\u01be\6\27\1\u01bf\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\22\27\1\u01c0\10\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\26\27\1\u01c1\4\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\22\27"+
    "\1\u01c2\10\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\15\27\1\u01c3\15\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\3\27\1\u01c4\27\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\3\27\1\u01c5\27\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\4\27"+
    "\1\u01c6\26\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\20\27\1\u01c7\12\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\3\27\1\u01c8\2\27\1\u01c9\24\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\1\u01ca"+
    "\32\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\1\u01cb\32\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\13\27\1\u01cc\17\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\13\27\1\u01cd\17\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\3\27\1\u01ce\27\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\6\27"+
    "\1\u01cf\24\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\11\27\1\u01d0\21\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\13\27\1\u01d1\17\27\30\0\1\27"+
    "\3\0\1\27\2\0\1\27\4\0\13\27\1\u01d2\17\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\27\27"+
    "\1\u01d3\3\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\20\27\1\u01d4\12\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\10\27\1\u01d5\11\27\1\u01d6\10\27"+
    "\30\0\1\27\3\0\1\27\2\0\1\27\4\0\21\27"+
    "\1\u01d7\11\27\30\0\1\27\3\0\1\27\2\0\1\27"+
    "\4\0\26\27\1\u01d8\4\27\30\0\1\27\3\0\1\27"+
    "\2\0\1\27\4\0\4\27\1\u01d9\12\27\1\u01da\2\27"+
    "\1\u01db\1\u01dc\7\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\25\27\1\u01dd\5\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\11\27\1\u01de\21\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\26\27\1\u01df"+
    "\4\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\26\27\1\u01e0\4\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\25\27\1\u01e1\5\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\26\27\1\u01e2\4\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\13\27\1\u01e3"+
    "\17\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\30\27\1\u01e4\2\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\26\27\1\u01e5\4\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\3\27\1\u01e6\2\27\1\u01e7"+
    "\24\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\3\27\1\u01e8\2\27\1\u01e9\24\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\20\27\1\u01ea\12\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\3\27\1\u01eb"+
    "\27\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\24\27\1\u01ec\6\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\4\27\1\u01ed\26\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\20\27\1\u01ee\12\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\24\27\1\u01ef"+
    "\6\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\7\27\1\u01f0\23\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\10\27\1\u01f1\22\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\24\27\1\u01f2\6\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\26\27\1\u01f3"+
    "\4\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\26\27\1\u01f4\4\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\10\27\1\u01f5\22\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\26\27\1\u01f6\1\27\1\u01f7"+
    "\2\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\10\27\1\u01f8\22\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\21\27\1\u01f9\11\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\6\27\1\u01fa\24\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\10\27\1\u01fb"+
    "\22\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\21\27\1\u01fc\11\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\16\27\1\u01fd\14\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\10\27\1\u01fe\22\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\24\27\1\u01ff"+
    "\6\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\24\27\1\u0200\6\27\30\0\1\27\3\0\1\27\2\0"+
    "\1\27\4\0\26\27\1\u0201\4\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\20\27\1\u0202\12\27\30\0"+
    "\1\27\3\0\1\27\2\0\1\27\4\0\12\27\1\u0203"+
    "\20\27\30\0\1\27\3\0\1\27\2\0\1\27\4\0"+
    "\7\27\1\u0204\10\27\1\u0205\12\27\30\0\1\27\3\0"+
    "\1\27\2\0\1\27\4\0\7\27\1\u0206\23\27\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18018];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\3\1\1\11\3\1\2\11\2\1\1\11"+
    "\34\1\1\11\4\1\1\11\1\1\1\11\13\1\11\11"+
    "\2\1\4\11\1\1\4\0\127\1\5\11\3\0\3\1"+
    "\1\11\3\0\14\1\2\11\u013a\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[518];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _M68kLexer() {
    this((java.io.Reader)null);
  }

  private char previousChar() {
    int loc = getTokenStart() - 1;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  private boolean afterSpaceOrComma(){
    char previousChar = previousChar();
    return Character.isSpaceChar(previousChar) || previousChar == ',';
  }

  int operandSpaceCount = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _M68kLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 262: break;
          case 2: 
            { operandSpaceCount = 0; yybegin(YYINITIAL); return LINEFEED;
            } 
            // fall through
          case 263: break;
          case 3: 
            { operandSpaceCount = 0; yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            } 
            // fall through
          case 264: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 265: break;
          case 5: 
            { operandSpaceCount = 0; return DOT;
            } 
            // fall through
          case 266: break;
          case 6: 
            { operandSpaceCount = 0; yybegin(AFTER_LABEL); return ID;
            } 
            // fall through
          case 267: break;
          case 7: 
            { yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            } 
            // fall through
          case 268: break;
          case 8: 
            { yybegin(IN_INSTRUCTION); return COLON;
            } 
            // fall through
          case 269: break;
          case 9: 
            { yybegin(IN_OPERAND); return EQ;
            } 
            // fall through
          case 270: break;
          case 10: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 271: break;
          case 11: 
            { yybegin(IN_OPERAND); return BACKSLASH;
            } 
            // fall through
          case 272: break;
          case 12: 
            { yybegin(IN_OPERAND); return MACRO_CALL_ID;
            } 
            // fall through
          case 273: break;
          case 13: 
            { operandSpaceCount = 1; yybegin(IN_OPERAND); return WHITE_SPACE;
            } 
            // fall through
          case 274: break;
          case 14: 
            { yybegin(IN_OPERAND); return STRING;
            } 
            // fall through
          case 275: break;
          case 15: 
            { operandSpaceCount++; return WHITE_SPACE;
            } 
            // fall through
          case 276: break;
          case 16: 
            { if (operandSpaceCount++ == 1) { yybegin(AFTER_OPERAND); } return WHITE_SPACE;
            } 
            // fall through
          case 277: break;
          case 17: 
            { return MUL;
            } 
            // fall through
          case 278: break;
          case 18: 
            { return DEC_NUMBER;
            } 
            // fall through
          case 279: break;
          case 19: 
            { return PERCENT;
            } 
            // fall through
          case 280: break;
          case 20: 
            { return PIPE;
            } 
            // fall through
          case 281: break;
          case 21: 
            { return STRING;
            } 
            // fall through
          case 282: break;
          case 22: 
            { return BACKSLASH;
            } 
            // fall through
          case 283: break;
          case 23: 
            { return DOT;
            } 
            // fall through
          case 284: break;
          case 24: 
            { return ID;
            } 
            // fall through
          case 285: break;
          case 25: 
            { return COMMA;
            } 
            // fall through
          case 286: break;
          case 26: 
            { return PLUS;
            } 
            // fall through
          case 287: break;
          case 27: 
            { return MINUS;
            } 
            // fall through
          case 288: break;
          case 28: 
            { return DIV;
            } 
            // fall through
          case 289: break;
          case 29: 
            { return POW;
            } 
            // fall through
          case 290: break;
          case 30: 
            { return HASH;
            } 
            // fall through
          case 291: break;
          case 31: 
            { return TILDE;
            } 
            // fall through
          case 292: break;
          case 32: 
            { return EXCLAMATION;
            } 
            // fall through
          case 293: break;
          case 33: 
            { return AMPERSAND;
            } 
            // fall through
          case 294: break;
          case 34: 
            { return L_PAREN;
            } 
            // fall through
          case 295: break;
          case 35: 
            { return R_PAREN;
            } 
            // fall through
          case 296: break;
          case 36: 
            { return L_BRACKET;
            } 
            // fall through
          case 297: break;
          case 37: 
            { return R_BRACKET;
            } 
            // fall through
          case 298: break;
          case 38: 
            { yybegin(AFTER_INSTRUCTION); return DC;
            } 
            // fall through
          case 299: break;
          case 39: 
            { yybegin(AFTER_INSTRUCTION); return DS;
            } 
            // fall through
          case 300: break;
          case 40: 
            { yybegin(IN_OPERAND); return IF;
            } 
            // fall through
          case 301: break;
          case 41: 
            { yybegin(AFTER_INSTRUCTION); return OR;
            } 
            // fall through
          case 302: break;
          case 42: 
            { yybegin(AFTER_INSTRUCTION); return RS;
            } 
            // fall through
          case 303: break;
          case 43: 
            { yybegin(AFTER_INSTRUCTION); return SF;
            } 
            // fall through
          case 304: break;
          case 44: 
            { yybegin(AFTER_INSTRUCTION); return ST;
            } 
            // fall through
          case 305: break;
          case 45: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_B;
            } 
            // fall through
          case 306: break;
          case 46: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_L;
            } 
            // fall through
          case 307: break;
          case 47: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_S;
            } 
            // fall through
          case 308: break;
          case 48: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_W;
            } 
            // fall through
          case 309: break;
          case 49: 
            { return HEX_NUMBER;
            } 
            // fall through
          case 310: break;
          case 50: 
            { return OCT_NUMBER;
            } 
            // fall through
          case 311: break;
          case 51: 
            { return BIN_NUMBER;
            } 
            // fall through
          case 312: break;
          case 52: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_B;
            } 
            // fall through
          case 313: break;
          case 53: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_L;
            } 
            // fall through
          case 314: break;
          case 54: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_S;
            } 
            // fall through
          case 315: break;
          case 55: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_W;
            } 
            // fall through
          case 316: break;
          case 56: 
            { return ADDRESS_REGISTER;
            } 
            // fall through
          case 317: break;
          case 57: 
            { return DATA_REGISTER;
            } 
            // fall through
          case 318: break;
          case 58: 
            { return PC;
            } 
            // fall through
          case 319: break;
          case 59: 
            { return SP;
            } 
            // fall through
          case 320: break;
          case 60: 
            { return SR;
            } 
            // fall through
          case 321: break;
          case 61: 
            { return SHIFT_L;
            } 
            // fall through
          case 322: break;
          case 62: 
            { return SHIFT_R;
            } 
            // fall through
          case 323: break;
          case 63: 
            { yybegin(AFTER_INSTRUCTION); return ADD;
            } 
            // fall through
          case 324: break;
          case 64: 
            { yybegin(AFTER_INSTRUCTION); return AND;
            } 
            // fall through
          case 325: break;
          case 65: 
            { yybegin(AFTER_INSTRUCTION); return ASL;
            } 
            // fall through
          case 326: break;
          case 66: 
            { yybegin(AFTER_INSTRUCTION); return ASR;
            } 
            // fall through
          case 327: break;
          case 67: 
            { yybegin(AFTER_INSTRUCTION); return BCC;
            } 
            // fall through
          case 328: break;
          case 68: 
            { yybegin(AFTER_INSTRUCTION); return BCS;
            } 
            // fall through
          case 329: break;
          case 69: 
            { yybegin(AFTER_INSTRUCTION); return BEQ;
            } 
            // fall through
          case 330: break;
          case 70: 
            { yybegin(AFTER_INSTRUCTION); return BGE;
            } 
            // fall through
          case 331: break;
          case 71: 
            { yybegin(AFTER_INSTRUCTION); return BGT;
            } 
            // fall through
          case 332: break;
          case 72: 
            { yybegin(AFTER_INSTRUCTION); return BHI;
            } 
            // fall through
          case 333: break;
          case 73: 
            { yybegin(AFTER_INSTRUCTION); return BHS;
            } 
            // fall through
          case 334: break;
          case 74: 
            { yybegin(AFTER_INSTRUCTION); return BLE;
            } 
            // fall through
          case 335: break;
          case 75: 
            { yybegin(AFTER_INSTRUCTION); return BLK;
            } 
            // fall through
          case 336: break;
          case 76: 
            { yybegin(AFTER_INSTRUCTION); return BLO;
            } 
            // fall through
          case 337: break;
          case 77: 
            { yybegin(AFTER_INSTRUCTION); return BLS;
            } 
            // fall through
          case 338: break;
          case 78: 
            { yybegin(AFTER_INSTRUCTION); return BLT;
            } 
            // fall through
          case 339: break;
          case 79: 
            { yybegin(AFTER_INSTRUCTION); return BMI;
            } 
            // fall through
          case 340: break;
          case 80: 
            { yybegin(AFTER_INSTRUCTION); return BNE;
            } 
            // fall through
          case 341: break;
          case 81: 
            { yybegin(AFTER_INSTRUCTION); return BPL;
            } 
            // fall through
          case 342: break;
          case 82: 
            { yybegin(AFTER_INSTRUCTION); return BRA;
            } 
            // fall through
          case 343: break;
          case 83: 
            { yybegin(AFTER_INSTRUCTION); return BSR;
            } 
            // fall through
          case 344: break;
          case 84: 
            { yybegin(AFTER_OPERAND); return BSS;
            } 
            // fall through
          case 345: break;
          case 85: 
            { yybegin(AFTER_INSTRUCTION); return BVC;
            } 
            // fall through
          case 346: break;
          case 86: 
            { yybegin(AFTER_INSTRUCTION); return BVS;
            } 
            // fall through
          case 347: break;
          case 87: 
            { yybegin(AFTER_INSTRUCTION); return CHK;
            } 
            // fall through
          case 348: break;
          case 88: 
            { yybegin(AFTER_INSTRUCTION); return CLR;
            } 
            // fall through
          case 349: break;
          case 89: 
            { yybegin(AFTER_INSTRUCTION); return CMP;
            } 
            // fall through
          case 350: break;
          case 90: 
            { yybegin(AFTER_INSTRUCTION); return DBF;
            } 
            // fall through
          case 351: break;
          case 91: 
            { yybegin(AFTER_INSTRUCTION); return DBT;
            } 
            // fall through
          case 352: break;
          case 92: 
            { yybegin(AFTER_INSTRUCTION); return DCB;
            } 
            // fall through
          case 353: break;
          case 93: 
            { yybegin(AFTER_OPERAND); return END;
            } 
            // fall through
          case 354: break;
          case 94: 
            { yybegin(AFTER_INSTRUCTION); return EOR;
            } 
            // fall through
          case 355: break;
          case 95: 
            { yybegin(IN_OPERAND); return EQU;
            } 
            // fall through
          case 356: break;
          case 96: 
            { yybegin(AFTER_INSTRUCTION); return EXG;
            } 
            // fall through
          case 357: break;
          case 97: 
            { yybegin(AFTER_INSTRUCTION); return EXT;
            } 
            // fall through
          case 358: break;
          case 98: 
            { yybegin(IN_OPERAND); return IFB;
            } 
            // fall through
          case 359: break;
          case 99: 
            { yybegin(IN_OPERAND); return IFC;
            } 
            // fall through
          case 360: break;
          case 100: 
            { yybegin(IN_OPERAND); return IFD;
            } 
            // fall through
          case 361: break;
          case 101: 
            { yybegin(AFTER_INSTRUCTION); return JMP;
            } 
            // fall through
          case 362: break;
          case 102: 
            { yybegin(IN_OPERAND); return JSR;
            } 
            // fall through
          case 363: break;
          case 103: 
            { yybegin(AFTER_INSTRUCTION); return LEA;
            } 
            // fall through
          case 364: break;
          case 104: 
            { yybegin(AFTER_INSTRUCTION); return LSL;
            } 
            // fall through
          case 365: break;
          case 105: 
            { yybegin(AFTER_INSTRUCTION); return LSR;
            } 
            // fall through
          case 366: break;
          case 106: 
            { yybegin(AFTER_INSTRUCTION); return NEG;
            } 
            // fall through
          case 367: break;
          case 107: 
            { yybegin(AFTER_OPERAND); return NOP;
            } 
            // fall through
          case 368: break;
          case 108: 
            { yybegin(AFTER_INSTRUCTION); return NOT;
            } 
            // fall through
          case 369: break;
          case 109: 
            { yybegin(AFTER_OPERAND); return ODD;
            } 
            // fall through
          case 370: break;
          case 110: 
            { yybegin(IN_OPERAND); return OPT;
            } 
            // fall through
          case 371: break;
          case 111: 
            { yybegin(IN_OPERAND); return ORG;
            } 
            // fall through
          case 372: break;
          case 112: 
            { yybegin(AFTER_INSTRUCTION); return ORI;
            } 
            // fall through
          case 373: break;
          case 113: 
            { yybegin(AFTER_INSTRUCTION); return PEA;
            } 
            // fall through
          case 374: break;
          case 114: 
            { yybegin(AFTER_OPERAND); return REM;
            } 
            // fall through
          case 375: break;
          case 115: 
            { yybegin(AFTER_INSTRUCTION); return ROL;
            } 
            // fall through
          case 376: break;
          case 116: 
            { yybegin(AFTER_INSTRUCTION); return ROR;
            } 
            // fall through
          case 377: break;
          case 117: 
            { yybegin(AFTER_OPERAND); return RTE;
            } 
            // fall through
          case 378: break;
          case 118: 
            { yybegin(AFTER_OPERAND); return RTR;
            } 
            // fall through
          case 379: break;
          case 119: 
            { yybegin(AFTER_OPERAND); return RTS;
            } 
            // fall through
          case 380: break;
          case 120: 
            { yybegin(AFTER_INSTRUCTION); return SCC;
            } 
            // fall through
          case 381: break;
          case 121: 
            { yybegin(AFTER_INSTRUCTION); return SCS;
            } 
            // fall through
          case 382: break;
          case 122: 
            { yybegin(AFTER_INSTRUCTION); return SEQ;
            } 
            // fall through
          case 383: break;
          case 123: 
            { yybegin(IN_OPERAND); return SET;
            } 
            // fall through
          case 384: break;
          case 124: 
            { yybegin(AFTER_INSTRUCTION); return SGE;
            } 
            // fall through
          case 385: break;
          case 125: 
            { yybegin(AFTER_INSTRUCTION); return SGT;
            } 
            // fall through
          case 386: break;
          case 126: 
            { yybegin(AFTER_INSTRUCTION); return SHI;
            } 
            // fall through
          case 387: break;
          case 127: 
            { yybegin(AFTER_INSTRUCTION); return SHS;
            } 
            // fall through
          case 388: break;
          case 128: 
            { yybegin(AFTER_INSTRUCTION); return SLE;
            } 
            // fall through
          case 389: break;
          case 129: 
            { yybegin(AFTER_INSTRUCTION); return SLO;
            } 
            // fall through
          case 390: break;
          case 130: 
            { yybegin(AFTER_INSTRUCTION); return SLS;
            } 
            // fall through
          case 391: break;
          case 131: 
            { yybegin(AFTER_INSTRUCTION); return SLT;
            } 
            // fall through
          case 392: break;
          case 132: 
            { yybegin(AFTER_INSTRUCTION); return SMI;
            } 
            // fall through
          case 393: break;
          case 133: 
            { yybegin(AFTER_INSTRUCTION); return SNE;
            } 
            // fall through
          case 394: break;
          case 134: 
            { yybegin(IN_OPERAND); return SPC;
            } 
            // fall through
          case 395: break;
          case 135: 
            { yybegin(AFTER_INSTRUCTION); return SPL;
            } 
            // fall through
          case 396: break;
          case 136: 
            { yybegin(AFTER_INSTRUCTION); return SUB;
            } 
            // fall through
          case 397: break;
          case 137: 
            { yybegin(AFTER_INSTRUCTION); return SVC;
            } 
            // fall through
          case 398: break;
          case 138: 
            { yybegin(AFTER_INSTRUCTION); return SVS;
            } 
            // fall through
          case 399: break;
          case 139: 
            { yybegin(AFTER_INSTRUCTION); return TAS;
            } 
            // fall through
          case 400: break;
          case 140: 
            { yybegin(AFTER_INSTRUCTION); return TST;
            } 
            // fall through
          case 401: break;
          case 141: 
            { return CCR;
            } 
            // fall through
          case 402: break;
          case 142: 
            { return SSP;
            } 
            // fall through
          case 403: break;
          case 143: 
            { return USP;
            } 
            // fall through
          case 404: break;
          case 144: 
            { yybegin(AFTER_OPERAND); return FAIL;
            } 
            // fall through
          case 405: break;
          case 145: 
            { yybegin(AFTER_INSTRUCTION); return ABCD;
            } 
            // fall through
          case 406: break;
          case 146: 
            { yybegin(AFTER_INSTRUCTION); return ADDA;
            } 
            // fall through
          case 407: break;
          case 147: 
            { yybegin(AFTER_INSTRUCTION); return ADDI;
            } 
            // fall through
          case 408: break;
          case 148: 
            { yybegin(AFTER_INSTRUCTION); return ADDQ;
            } 
            // fall through
          case 409: break;
          case 149: 
            { yybegin(AFTER_INSTRUCTION); return ADDX;
            } 
            // fall through
          case 410: break;
          case 150: 
            { yybegin(AFTER_INSTRUCTION); return ANDI;
            } 
            // fall through
          case 411: break;
          case 151: 
            { yybegin(AFTER_INSTRUCTION); return BCHG;
            } 
            // fall through
          case 412: break;
          case 152: 
            { yybegin(AFTER_INSTRUCTION); return BCLR;
            } 
            // fall through
          case 413: break;
          case 153: 
            { yybegin(AFTER_INSTRUCTION); return BSET;
            } 
            // fall through
          case 414: break;
          case 154: 
            { yybegin(AFTER_INSTRUCTION); return BTST;
            } 
            // fall through
          case 415: break;
          case 155: 
            { yybegin(AFTER_INSTRUCTION); return CMPA;
            } 
            // fall through
          case 416: break;
          case 156: 
            { yybegin(AFTER_INSTRUCTION); return CMPI;
            } 
            // fall through
          case 417: break;
          case 157: 
            { yybegin(AFTER_INSTRUCTION); return CMPM;
            } 
            // fall through
          case 418: break;
          case 158: 
            { yybegin(IN_OPERAND); return CNOP;
            } 
            // fall through
          case 419: break;
          case 159: 
            { yybegin(AFTER_OPERAND); return CODE;
            } 
            // fall through
          case 420: break;
          case 160: 
            { yybegin(AFTER_OPERAND); return CSEG;
            } 
            // fall through
          case 421: break;
          case 161: 
            { yybegin(AFTER_OPERAND); return DATA;
            } 
            // fall through
          case 422: break;
          case 162: 
            { yybegin(AFTER_INSTRUCTION); return DBCC;
            } 
            // fall through
          case 423: break;
          case 163: 
            { yybegin(AFTER_INSTRUCTION); return DBCS;
            } 
            // fall through
          case 424: break;
          case 164: 
            { yybegin(AFTER_INSTRUCTION); return DBEQ;
            } 
            // fall through
          case 425: break;
          case 165: 
            { yybegin(AFTER_INSTRUCTION); return DBGE;
            } 
            // fall through
          case 426: break;
          case 166: 
            { yybegin(AFTER_INSTRUCTION); return DBGT;
            } 
            // fall through
          case 427: break;
          case 167: 
            { yybegin(AFTER_INSTRUCTION); return DBHI;
            } 
            // fall through
          case 428: break;
          case 168: 
            { yybegin(AFTER_INSTRUCTION); return DBHS;
            } 
            // fall through
          case 429: break;
          case 169: 
            { yybegin(AFTER_INSTRUCTION); return DBLE;
            } 
            // fall through
          case 430: break;
          case 170: 
            { yybegin(AFTER_INSTRUCTION); return DBLO;
            } 
            // fall through
          case 431: break;
          case 171: 
            { yybegin(AFTER_INSTRUCTION); return DBLS;
            } 
            // fall through
          case 432: break;
          case 172: 
            { yybegin(AFTER_INSTRUCTION); return DBLT;
            } 
            // fall through
          case 433: break;
          case 173: 
            { yybegin(AFTER_INSTRUCTION); return DBMI;
            } 
            // fall through
          case 434: break;
          case 174: 
            { yybegin(AFTER_INSTRUCTION); return DBNE;
            } 
            // fall through
          case 435: break;
          case 175: 
            { yybegin(AFTER_INSTRUCTION); return DBPL;
            } 
            // fall through
          case 436: break;
          case 176: 
            { yybegin(AFTER_INSTRUCTION); return DBRA;
            } 
            // fall through
          case 437: break;
          case 177: 
            { yybegin(AFTER_INSTRUCTION); return DBVC;
            } 
            // fall through
          case 438: break;
          case 178: 
            { yybegin(AFTER_INSTRUCTION); return DBVS;
            } 
            // fall through
          case 439: break;
          case 179: 
            { yybegin(AFTER_INSTRUCTION); return DIVS;
            } 
            // fall through
          case 440: break;
          case 180: 
            { yybegin(AFTER_INSTRUCTION); return DIVU;
            } 
            // fall through
          case 441: break;
          case 181: 
            { yybegin(AFTER_INSTRUCTION); return DSEG;
            } 
            // fall through
          case 442: break;
          case 182: 
            { yybegin(AFTER_OPERAND); return ELSE;
            } 
            // fall through
          case 443: break;
          case 183: 
            { yybegin(AFTER_OPERAND); return ENDC;
            } 
            // fall through
          case 444: break;
          case 184: 
            { yybegin(AFTER_OPERAND); return ENDM;
            } 
            // fall through
          case 445: break;
          case 185: 
            { yybegin(AFTER_OPERAND); return ENDR;
            } 
            // fall through
          case 446: break;
          case 186: 
            { yybegin(AFTER_INSTRUCTION); return EORI;
            } 
            // fall through
          case 447: break;
          case 187: 
            { yybegin(IN_OPERAND); return EQUR;
            } 
            // fall through
          case 448: break;
          case 188: 
            { yybegin(AFTER_OPERAND); return EREM;
            } 
            // fall through
          case 449: break;
          case 189: 
            { yybegin(AFTER_OPERAND); return EVEN;
            } 
            // fall through
          case 450: break;
          case 190: 
            { yybegin(IN_OPERAND); return IFEQ;
            } 
            // fall through
          case 451: break;
          case 191: 
            { yybegin(IN_OPERAND); return IFGE;
            } 
            // fall through
          case 452: break;
          case 192: 
            { yybegin(IN_OPERAND); return IFGT;
            } 
            // fall through
          case 453: break;
          case 193: 
            { yybegin(IN_OPERAND); return IFLE;
            } 
            // fall through
          case 454: break;
          case 194: 
            { yybegin(IN_OPERAND); return IFLT;
            } 
            // fall through
          case 455: break;
          case 195: 
            { yybegin(IN_OPERAND); return IFMI;
            } 
            // fall through
          case 456: break;
          case 196: 
            { yybegin(IN_OPERAND); return IFNB;
            } 
            // fall through
          case 457: break;
          case 197: 
            { yybegin(IN_OPERAND); return IFNC;
            } 
            // fall through
          case 458: break;
          case 198: 
            { yybegin(IN_OPERAND); return IFND;
            } 
            // fall through
          case 459: break;
          case 199: 
            { yybegin(IN_OPERAND); return IFNE;
            } 
            // fall through
          case 460: break;
          case 200: 
            { yybegin(IN_OPERAND); return IFPL;
            } 
            // fall through
          case 461: break;
          case 201: 
            { yybegin(IN_OPERAND); return LINK;
            } 
            // fall through
          case 462: break;
          case 202: 
            { yybegin(AFTER_OPERAND); return LIST;
            } 
            // fall through
          case 463: break;
          case 203: 
            { yybegin(IN_OPERAND); return LLEN;
            } 
            // fall through
          case 464: break;
          case 204: 
            { yybegin(IN_OPERAND); return LOAD;
            } 
            // fall through
          case 465: break;
          case 205: 
            { yybegin(AFTER_INSTRUCTION); return MOVE;
            } 
            // fall through
          case 466: break;
          case 206: 
            { yybegin(AFTER_INSTRUCTION); return MULS;
            } 
            // fall through
          case 467: break;
          case 207: 
            { yybegin(AFTER_INSTRUCTION); return MULU;
            } 
            // fall through
          case 468: break;
          case 208: 
            { yybegin(AFTER_INSTRUCTION); return NBCD;
            } 
            // fall through
          case 469: break;
          case 209: 
            { yybegin(AFTER_INSTRUCTION); return NEGX;
            } 
            // fall through
          case 470: break;
          case 210: 
            { yybegin(AFTER_OPERAND); return PAGE;
            } 
            // fall through
          case 471: break;
          case 211: 
            { yybegin(IN_OPERAND); return PLEN;
            } 
            // fall through
          case 472: break;
          case 212: 
            { yybegin(IN_OPERAND); return REPT;
            } 
            // fall through
          case 473: break;
          case 213: 
            { yybegin(AFTER_INSTRUCTION); return ROXL;
            } 
            // fall through
          case 474: break;
          case 214: 
            { yybegin(AFTER_INSTRUCTION); return ROXR;
            } 
            // fall through
          case 475: break;
          case 215: 
            { yybegin(AFTER_INSTRUCTION); return SBCD;
            } 
            // fall through
          case 476: break;
          case 216: 
            { yybegin(IN_OPERAND); return STOP;
            } 
            // fall through
          case 477: break;
          case 217: 
            { yybegin(AFTER_INSTRUCTION); return SUBA;
            } 
            // fall through
          case 478: break;
          case 218: 
            { yybegin(AFTER_INSTRUCTION); return SUBI;
            } 
            // fall through
          case 479: break;
          case 219: 
            { yybegin(AFTER_INSTRUCTION); return SUBQ;
            } 
            // fall through
          case 480: break;
          case 220: 
            { yybegin(AFTER_INSTRUCTION); return SUBX;
            } 
            // fall through
          case 481: break;
          case 221: 
            { yybegin(AFTER_INSTRUCTION); return SWAP;
            } 
            // fall through
          case 482: break;
          case 222: 
            { yybegin(AFTER_OPERAND); return TEXT;
            } 
            // fall through
          case 483: break;
          case 223: 
            { yybegin(IN_OPERAND); return TRAP;
            } 
            // fall through
          case 484: break;
          case 224: 
            { yybegin(IN_OPERAND); return UNLK;
            } 
            // fall through
          case 485: break;
          case 225: 
            { yybegin(IN_OPERAND); return XDEF;
            } 
            // fall through
          case 486: break;
          case 226: 
            { yybegin(IN_OPERAND); return XREF;
            } 
            // fall through
          case 487: break;
          case 227: 
            { yybegin(IN_OPERAND); return ALIGN;
            } 
            // fall through
          case 488: break;
          case 228: 
            { yybegin(AFTER_OPERAND); return BSS_F;
            } 
            // fall through
          case 489: break;
          case 229: 
            { yybegin(AFTER_OPERAND); return BSS_C;
            } 
            // fall through
          case 490: break;
          case 230: 
            { yybegin(AFTER_OPERAND); return ENDIF;
            } 
            // fall through
          case 491: break;
          case 231: 
            { yybegin(AFTER_OPERAND); return MACRO;
            } 
            // fall through
          case 492: break;
          case 232: 
            { yybegin(AFTER_OPERAND); return MEXIT;
            } 
            // fall through
          case 493: break;
          case 233: 
            { yybegin(AFTER_INSTRUCTION); return MOVEA;
            } 
            // fall through
          case 494: break;
          case 234: 
            { yybegin(AFTER_INSTRUCTION); return MOVEM;
            } 
            // fall through
          case 495: break;
          case 235: 
            { yybegin(AFTER_INSTRUCTION); return MOVEP;
            } 
            // fall through
          case 496: break;
          case 236: 
            { yybegin(AFTER_INSTRUCTION); return MOVEQ;
            } 
            // fall through
          case 497: break;
          case 237: 
            { yybegin(AFTER_OPERAND); return RESET;
            } 
            // fall through
          case 498: break;
          case 238: 
            { yybegin(IN_OPERAND); return RSSET;
            } 
            // fall through
          case 499: break;
          case 239: 
            { yybegin(AFTER_OPERAND); return TRAPV;
            } 
            // fall through
          case 500: break;
          case 240: 
            { yybegin(AFTER_OPERAND); return CODE_F;
            } 
            // fall through
          case 501: break;
          case 241: 
            { yybegin(AFTER_OPERAND); return CODE_C;
            } 
            // fall through
          case 502: break;
          case 242: 
            { yybegin(AFTER_OPERAND); return DATA_F;
            } 
            // fall through
          case 503: break;
          case 243: 
            { yybegin(AFTER_OPERAND); return DATA_C;
            } 
            // fall through
          case 504: break;
          case 244: 
            { yybegin(AFTER_OPERAND); return ELSEIF;
            } 
            // fall through
          case 505: break;
          case 245: 
            { yybegin(STRING_DIRECTIVE); return INCBIN;
            } 
            // fall through
          case 506: break;
          case 246: 
            { yybegin(STRING_DIRECTIVE); return INCDIR;
            } 
            // fall through
          case 507: break;
          case 247: 
            { yybegin(AFTER_OPERAND); return INLINE;
            } 
            // fall through
          case 508: break;
          case 248: 
            { yybegin(AFTER_OPERAND); return NOLIST;
            } 
            // fall through
          case 509: break;
          case 249: 
            { yybegin(AFTER_OPERAND); return NOPAGE;
            } 
            // fall through
          case 510: break;
          case 250: 
            { yybegin(STRING_DIRECTIVE); return PRINTT;
            } 
            // fall through
          case 511: break;
          case 251: 
            { yybegin(IN_OPERAND); return PRINTV;
            } 
            // fall through
          case 512: break;
          case 252: 
            { yybegin(AFTER_OPERAND); return EINLINE;
            } 
            // fall through
          case 513: break;
          case 253: 
            { yybegin(AFTER_OPERAND); return ILLEGAL;
            } 
            // fall through
          case 514: break;
          case 254: 
            { yybegin(STRING_DIRECTIVE); return INCLUDE;
            } 
            // fall through
          case 515: break;
          case 255: 
            { yybegin(IN_OPERAND); return JUMPERR;
            } 
            // fall through
          case 516: break;
          case 256: 
            { yybegin(IN_OPERAND); return JUMPPTR;
            } 
            // fall through
          case 517: break;
          case 257: 
            { yybegin(AFTER_OPERAND); return RSRESET;
            } 
            // fall through
          case 518: break;
          case 258: 
            { yybegin(IN_OPERAND); return SECTION;
            } 
            // fall through
          case 519: break;
          case 259: 
            { yybegin(IN_OPERAND); return ADDWATCH;
            } 
            // fall through
          case 520: break;
          case 260: 
            { yybegin(IN_OPERAND); return IFMACROD;
            } 
            // fall through
          case 521: break;
          case 261: 
            { yybegin(IN_OPERAND); return IFMACROND;
            } 
            // fall through
          case 522: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
