/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * Copyright 2021 The Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.yanncebron.m68kplugin.lexer;

import com.intellij.psi.tree.IElementType;

import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.yanncebron.m68kplugin.lang.psi.M68kTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/yann/idea-ultimate/m68kplugin/src/grammar/_M68kLexer.flex</tt>
 */
public class _M68kLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AFTER_LABEL = 2;
  public static final int IN_INSTRUCTION = 4;
  public static final int AFTER_INSTRUCTION = 6;
  public static final int STRING_DIRECTIVE = 8;
  public static final int IN_OPERAND = 10;
  public static final int AFTER_OPERAND = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15232 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\13\21\1\72\1\73\4\21\1\74\3\21\1\75\2\21\1\76\1\77\7\21"+
    "\123\26\1\100\7\26\1\101\1\102\12\26\1\103\24\21\1\26\1\104\u0702\21");

  /* The ZZ_CMAP_Y table has 4416 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\10\1\13\1\14\4\0"+
    "\1\15\1\16\1\15\2\17\1\20\3\17\1\20\71\17\1\21\1\17\1\22\1\0\1\23\1\24\12"+
    "\0\1\16\5\0\1\25\1\26\1\27\1\30\2\17\1\31\11\17\1\32\21\17\1\22\1\33\24\17"+
    "\1\34\3\17\1\20\1\35\1\34\4\17\5\0\1\17\1\32\1\36\1\0\3\17\2\37\3\0\1\17\1"+
    "\37\7\17\1\34\1\40\1\41\14\17\1\42\1\23\1\34\1\43\1\40\1\44\2\0\6\17\1\0\1"+
    "\45\14\17\1\22\1\0\1\40\1\46\3\17\1\37\1\47\1\15\3\17\1\33\1\17\1\23\2\0\3"+
    "\17\1\50\10\0\2\17\1\25\1\51\2\0\1\52\1\17\1\53\1\22\11\17\1\42\1\17\1\25"+
    "\1\43\1\17\1\54\1\40\1\34\1\17\1\42\1\55\1\56\2\17\1\57\1\60\1\61\1\55\1\62"+
    "\1\63\1\64\1\54\1\40\1\22\1\0\1\65\1\66\1\56\2\17\1\57\1\67\1\21\1\66\1\70"+
    "\1\35\1\71\1\72\1\40\1\51\1\0\1\65\1\32\1\31\2\17\1\57\1\73\1\61\1\32\1\74"+
    "\1\50\1\0\1\54\1\40\1\0\1\35\1\65\1\55\1\56\2\17\1\57\1\73\1\61\1\55\1\70"+
    "\1\75\1\64\1\54\1\40\1\35\1\0\1\76\1\77\1\100\1\101\1\102\1\77\1\17\1\21\1"+
    "\77\1\103\1\104\1\0\1\72\1\40\2\0\1\42\1\25\1\57\2\17\1\57\1\17\1\61\1\25"+
    "\1\103\1\105\1\37\1\54\1\40\2\0\1\42\1\25\1\57\2\17\1\57\1\42\1\61\1\25\1"+
    "\103\1\105\1\27\1\54\1\40\1\106\1\0\1\65\1\25\1\57\4\17\1\107\1\25\1\110\1"+
    "\52\1\63\1\54\1\40\1\0\1\33\1\76\1\17\1\20\1\33\2\17\1\31\1\111\1\20\1\63"+
    "\1\112\1\17\1\72\1\40\1\113\1\0\1\34\6\17\1\37\1\20\1\16\1\40\1\114\4\0\1"+
    "\115\1\116\1\52\1\34\1\117\1\76\1\17\1\120\1\112\1\16\1\40\1\121\4\0\1\50"+
    "\3\0\1\40\1\114\2\0\1\17\1\34\3\17\1\23\1\34\1\17\1\22\2\17\1\34\3\17\1\23"+
    "\10\0\6\17\1\20\1\56\1\40\1\114\2\17\1\107\1\122\2\17\1\20\1\27\1\40\1\123"+
    "\4\17\1\32\1\16\5\17\1\124\51\17\1\100\1\20\1\100\5\17\1\100\4\17\1\100\1"+
    "\20\1\100\1\17\1\20\7\17\1\100\10\17\1\66\4\0\2\17\2\0\12\17\2\51\1\34\114"+
    "\17\1\55\2\17\1\34\2\17\1\37\11\17\1\77\1\17\1\50\1\17\1\25\1\125\1\0\2\17"+
    "\1\125\1\0\2\17\1\125\1\0\1\17\1\25\1\126\1\0\6\17\1\127\2\17\1\50\1\63\1"+
    "\130\1\40\1\114\4\0\1\40\1\114\13\17\1\0\5\17\1\37\10\17\1\51\1\0\3\17\1\20"+
    "\1\17\1\125\1\17\1\50\1\72\1\40\3\17\1\51\1\23\1\0\5\17\1\125\3\17\1\22\1"+
    "\40\1\114\4\0\3\17\1\125\7\17\1\20\1\34\1\17\1\23\1\0\1\40\1\114\1\40\1\114"+
    "\1\63\13\0\6\17\1\42\1\17\1\42\1\125\1\40\1\114\4\0\5\17\1\131\1\40\1\46\4"+
    "\17\1\32\1\17\1\22\1\0\6\17\1\51\1\0\1\40\1\132\1\40\1\46\3\17\1\51\1\17\1"+
    "\50\13\0\1\133\1\134\1\0\30\17\4\0\1\63\1\17\1\23\1\0\42\17\2\51\4\17\2\51"+
    "\1\17\1\135\3\17\1\51\6\17\1\25\1\112\1\136\1\23\1\127\1\125\1\17\1\23\1\136"+
    "\1\23\5\0\1\137\10\0\1\35\1\63\2\0\1\17\1\23\14\0\1\140\1\33\1\111\1\141\1"+
    "\24\1\142\1\17\1\131\1\45\1\143\2\0\5\17\1\50\144\0\1\75\6\17\1\22\42\0\5"+
    "\17\1\20\5\17\1\20\20\17\1\23\1\144\1\113\1\0\4\17\1\32\1\16\7\17\1\63\2\0"+
    "\2\17\1\20\1\0\10\20\4\17\5\0\1\63\72\0\1\45\3\0\1\34\1\22\1\141\1\23\1\34"+
    "\11\17\1\20\1\45\1\34\12\17\1\124\1\45\4\17\1\51\1\34\12\17\1\20\2\0\3\17"+
    "\1\37\6\0\170\17\1\51\11\0\72\17\1\51\5\0\21\17\1\23\10\0\5\17\1\51\41\17"+
    "\1\23\2\17\1\40\1\145\2\0\5\17\1\20\1\52\1\146\16\17\4\0\1\63\1\17\1\33\14"+
    "\17\1\56\3\17\1\20\1\17\7\0\1\63\1\17\1\147\1\124\3\17\3\0\6\17\1\125\1\0"+
    "\10\17\1\111\1\0\1\40\1\114\2\0\1\33\1\150\1\40\1\46\3\17\1\37\4\17\1\37\1"+
    "\0\3\17\1\23\6\17\1\124\1\17\1\0\1\63\1\40\1\114\1\25\1\17\1\40\1\151\6\17"+
    "\1\20\1\0\1\17\1\51\1\40\1\114\2\17\1\20\1\152\7\17\1\20\1\153\2\0\1\154\2"+
    "\17\1\155\1\0\3\156\1\0\2\20\5\17\1\124\1\51\1\0\17\17\1\37\1\40\1\114\64"+
    "\17\1\125\1\0\2\17\1\20\1\53\5\17\1\125\40\0\55\17\1\51\15\17\1\22\4\0\1\20"+
    "\1\0\1\53\1\45\1\17\1\57\1\20\1\112\1\157\15\17\1\22\3\0\1\53\54\17\1\51\2"+
    "\0\10\17\1\33\6\17\5\0\1\17\1\125\16\0\1\25\20\17\1\23\2\0\1\40\1\114\1\160"+
    "\2\17\1\37\1\160\2\17\1\37\1\75\12\17\1\20\3\33\1\161\4\0\1\17\1\42\2\17\1"+
    "\20\2\17\1\162\1\17\1\51\1\17\1\51\4\0\17\17\1\37\10\0\6\17\1\23\41\0\3\17"+
    "\1\23\6\17\1\50\5\0\4\17\2\0\3\17\1\37\5\17\1\37\3\17\1\51\4\17\1\125\1\17"+
    "\1\141\5\0\23\17\1\51\1\40\1\114\4\17\1\125\4\17\1\125\5\17\1\0\6\17\1\125"+
    "\23\0\46\17\1\20\1\0\2\17\1\51\1\0\1\17\23\0\1\51\1\57\4\17\1\32\1\163\2\17"+
    "\1\51\1\0\2\17\1\20\1\0\3\17\1\20\10\0\2\17\1\164\1\0\2\17\1\51\1\0\3\17\1"+
    "\22\10\0\7\17\1\75\10\0\1\134\1\52\1\42\1\34\2\17\1\125\5\0\3\17\1\23\3\17"+
    "\1\23\4\0\1\17\1\34\2\17\1\23\3\0\6\17\1\51\1\0\2\17\1\51\1\0\2\17\1\37\1"+
    "\0\2\17\1\22\15\0\11\17\1\50\6\0\6\17\1\37\1\0\6\17\1\37\41\0\10\17\1\51\3"+
    "\0\1\72\1\40\2\0\1\33\6\17\1\50\2\0\3\17\1\50\1\40\1\114\6\17\1\165\1\40\2"+
    "\0\4\17\1\166\1\0\10\17\1\167\1\0\1\40\1\170\4\0\2\17\1\31\3\17\1\55\1\27"+
    "\10\0\1\20\1\142\1\17\1\32\1\17\1\50\7\17\1\50\1\40\1\114\1\42\1\55\1\56\2"+
    "\17\1\57\1\73\1\61\1\55\1\70\1\104\1\45\1\125\23\0\10\17\1\147\1\37\1\40\1"+
    "\114\4\0\10\17\1\171\1\0\1\40\1\114\24\0\6\17\1\51\1\20\3\0\1\51\4\0\7\17"+
    "\1\20\1\172\1\0\1\40\1\114\4\0\6\17\1\51\1\0\1\40\1\114\6\0\3\17\1\61\1\17"+
    "\1\37\1\40\1\114\54\0\10\17\1\40\1\114\1\0\1\63\70\0\7\17\1\50\40\0\1\17\1"+
    "\57\4\17\2\20\1\50\1\0\1\40\1\114\2\0\1\33\3\17\1\33\2\17\1\34\1\20\51\0\63"+
    "\17\1\22\14\0\15\17\1\20\2\0\30\17\1\125\27\0\5\17\1\20\72\0\10\17\1\20\67"+
    "\0\7\17\1\50\3\17\1\20\1\40\1\114\14\0\3\17\1\51\2\0\6\17\1\20\1\0\1\125\1"+
    "\0\1\40\1\114\1\53\2\17\1\45\2\17\56\0\10\17\1\23\1\0\5\17\1\20\2\0\1\53\1"+
    "\17\10\0\1\50\3\0\75\17\1\23\2\0\36\17\1\37\41\0\1\22\77\0\15\17\1\37\1\17"+
    "\1\23\1\17\1\50\1\17\1\143\54\0\12\17\1\25\10\17\1\25\1\173\1\133\1\17\1\174"+
    "\1\42\7\17\1\32\1\107\2\25\3\17\1\175\1\112\1\33\1\57\51\17\1\51\3\17\1\57"+
    "\2\17\1\124\3\17\1\124\2\17\1\25\3\17\1\25\2\17\1\20\3\17\1\20\3\17\1\57\3"+
    "\17\1\57\2\17\1\124\1\54\6\40\1\20\2\17\1\56\1\157\1\37\72\0\30\17\1\23\7"+
    "\0\10\17\1\146\1\0\1\40\1\114\24\0\1\42\3\17\1\115\1\34\1\124\1\176\1\140"+
    "\1\177\1\115\1\135\1\115\2\124\1\71\1\17\1\31\1\17\1\125\1\65\1\31\1\17\1"+
    "\125\116\0\3\17\1\22\3\17\1\22\3\17\1\22\16\0\32\17\1\20\5\0\106\17\1\23\1"+
    "\0\33\17\1\51\120\17\1\22\53\0\3\17\1\51\74\0");

  /* The ZZ_CMAP_A table has 1024 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\4\1\5\1\1\2\0\1\2\1\72\1\21\1\64\1\10\1\14\1\73\1\17\1\66"+
    "\1\67\1\6\1\60\1\57\1\61\1\24\1\62\1\100\1\16\1\101\1\102\1\103\1\13\1\76"+
    "\1\13\1\77\1\7\1\55\1\3\1\74\1\56\1\75\1\0\1\12\1\31\1\26\1\32\1\33\1\34\1"+
    "\35\1\36\1\37\1\40\1\41\1\42\1\30\1\43\1\44\1\45\1\46\1\47\1\50\1\25\1\51"+
    "\1\52\1\53\1\27\1\54\2\23\1\70\1\20\1\71\1\63\1\22\1\0\1\31\1\26\1\32\1\33"+
    "\1\34\1\35\1\36\1\54\2\23\1\0\1\15\1\0\1\65\6\0\1\4\4\0\1\23\12\0\1\23\2\0"+
    "\17\23\1\0\2\23\4\0\4\23\6\0\5\23\7\0\1\23\1\0\1\23\1\0\5\23\1\0\2\23\2\0"+
    "\4\23\1\0\1\23\6\0\1\23\1\0\3\23\1\0\1\23\1\0\4\23\1\0\13\23\1\0\1\23\2\0"+
    "\6\23\1\0\7\23\1\0\1\23\7\0\2\23\1\0\2\23\1\0\4\23\5\0\12\7\4\0\6\23\1\0\4"+
    "\23\4\0\3\23\2\7\3\23\2\0\1\23\5\0\3\23\2\7\6\23\4\0\2\23\2\0\1\23\7\0\6\23"+
    "\6\0\4\23\3\0\11\23\2\0\2\7\5\23\2\0\2\23\2\0\6\23\1\0\7\23\1\0\1\23\3\0\4"+
    "\23\3\0\4\23\2\0\2\23\1\0\1\23\10\0\1\23\4\0\2\23\1\0\1\23\1\0\3\23\1\0\6"+
    "\23\4\0\2\23\1\0\2\23\1\0\2\23\1\0\1\23\2\0\2\23\4\0\4\23\1\0\1\23\7\0\2\7"+
    "\1\23\1\0\2\23\1\0\5\23\1\0\2\23\11\0\2\23\2\0\2\23\1\0\6\23\3\0\3\23\1\0"+
    "\4\23\3\0\2\23\1\0\1\23\1\0\2\23\3\0\2\23\3\0\1\23\1\0\3\23\3\0\1\23\6\0\1"+
    "\23\5\0\2\23\2\0\2\23\5\0\3\23\2\0\4\23\1\0\3\23\1\0\1\23\1\0\4\23\1\0\1\23"+
    "\2\0\5\23\1\0\1\23\3\0\2\23\4\0\2\7\7\0\2\23\1\0\1\23\2\0\2\23\1\0\1\23\2"+
    "\0\1\23\3\0\3\23\1\0\1\23\1\0\3\23\1\0\3\23\2\0\2\7\2\0\5\23\5\0\2\23\2\7"+
    "\2\0\2\23\2\0\3\23\1\0\10\23\4\0\1\23\1\0\2\23\4\0\4\23\2\0\2\23\4\0\1\23"+
    "\3\0\2\23\2\0\4\23\2\7\3\0\3\23\1\0\4\23\1\0\6\23\1\0\2\23\2\0\1\23\1\0\1"+
    "\23\1\0\1\23\1\0\1\23\2\0\3\23\1\0\2\23\2\4\10\0\1\23\4\0\1\23\1\0\5\23\2"+
    "\0\1\23\1\0\4\23\1\0\3\23\4\0\1\23\4\0\4\23\1\0\2\7\2\23\4\0\4\23\3\0\3\23"+
    "\1\0\3\23\1\0\1\23\3\0\1\23\1\0\1\23\2\0\2\7\5\23\3\0\1\23\3\0\3\23\1\0\1"+
    "\23\10\0\3\23\4\0\4\23\3\0\6\23\1\0\2\23\1\0\2\23\1\0\2\23\1\0\6\11\1\23\2"+
    "\0\3\23\3\0\3\23\1\0\2\23\1\0\2\23\3\0\1\23\2\0\4\23\1\0\2\23\2\0\3\23\3\0"+
    "\2\7\3\23\3\0\1\23\2\0\4\23\3\0\2\7\1\23\1\0\1\23\3\0\2\23\2\0\2\23\1\0\2"+
    "\23\3\0\1\23\5\0\1\23\2\0\2\23\1\0\2\23\1\0\1\23\1\0\5\23\1\0\4\23\2\0\1\23"+
    "\1\0\1\23\5\0\1\23\1\0\1\23\1\0\3\23");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\1\1\14\1\15"+
    "\22\14\1\16\1\1\1\17\1\20\1\4\2\17\1\21"+
    "\1\22\1\23\1\1\1\24\1\1\1\25\1\26\1\27"+
    "\1\30\1\27\1\1\1\31\6\24\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\13\2\0\6\14"+
    "\1\52\5\14\1\53\37\14\1\54\2\14\1\55\1\14"+
    "\1\56\14\14\1\57\16\14\1\60\6\14\1\61\13\14"+
    "\1\62\1\63\1\64\1\65\1\17\3\0\1\66\1\24"+
    "\1\67\1\70\1\71\1\27\2\0\1\72\1\73\1\74"+
    "\1\75\1\24\1\76\1\77\1\100\1\24\1\101\1\102"+
    "\1\24\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\2\14\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\14\1\122\1\123\1\14\1\124\1\125\1\126"+
    "\1\127\1\130\1\131\1\132\1\133\2\14\1\134\1\135"+
    "\1\136\1\137\1\14\1\140\1\141\1\142\1\143\1\144"+
    "\1\145\1\146\1\14\1\147\1\14\1\150\1\151\1\152"+
    "\1\153\1\154\1\155\1\156\1\157\1\160\1\14\1\161"+
    "\1\162\1\163\1\164\1\14\1\165\3\14\1\166\1\167"+
    "\3\14\1\170\1\171\1\14\1\172\1\173\1\174\7\14"+
    "\1\175\6\14\1\176\3\14\1\177\5\14\1\200\1\201"+
    "\1\202\2\14\1\203\1\204\1\14\1\205\2\14\1\206"+
    "\1\14\1\207\1\210\10\14\1\211\1\212\10\14\1\213"+
    "\1\14\1\214\1\215\1\216\1\217\1\14\1\220\1\221"+
    "\2\14\1\222\7\14\1\223\1\224\1\14\1\225\1\226"+
    "\1\14\1\227\1\230\1\231\1\232\1\233\2\14\1\234"+
    "\3\14\1\235\2\24\1\236\1\24\1\237\1\240\1\241"+
    "\10\14\2\52\7\14\2\53\1\242\1\14\1\243\1\244"+
    "\1\245\1\246\3\14\1\247\7\14\1\250\1\14\1\251"+
    "\11\14\1\252\4\14\1\253\1\14\1\254\1\255\1\256"+
    "\2\14\1\257\4\14\1\260\1\261\1\262\1\263\1\14"+
    "\1\264\1\265\3\14\1\266\1\267\1\270\1\271\1\272"+
    "\2\54\1\273\1\274\1\275\1\276\1\277\1\300\1\301"+
    "\1\302\1\14\1\303\1\304\1\305\1\306\1\307\1\310"+
    "\1\311\1\312\1\14\1\313\1\314\1\315\2\55\1\14"+
    "\1\316\1\317\2\56\1\320\1\321\1\14\1\322\1\14"+
    "\1\323\1\324\1\14\1\325\1\326\1\327\1\330\2\14"+
    "\1\331\1\14\1\332\1\333\1\334\1\335\1\336\1\337"+
    "\1\14\1\340\1\341\1\342\1\343\1\344\1\345\13\14"+
    "\1\346\1\347\1\350\1\351\1\352\1\14\1\353\3\14"+
    "\2\60\1\14\1\354\1\355\4\14\2\61\3\14\1\356"+
    "\2\14\1\357\1\360\2\14\1\361\1\362\1\363\1\364"+
    "\1\365\2\366\2\367\2\370\2\14\2\114\2\115\2\116"+
    "\2\117\2\120\2\121\1\14\2\122\2\124\2\125\2\126"+
    "\2\127\2\130\2\131\2\132\2\134\4\14\2\135\2\136"+
    "\1\371\1\372\1\14\2\140\2\141\2\142\2\143\2\144"+
    "\2\145\2\146\1\14\2\147\1\14\2\150\2\151\2\152"+
    "\2\153\2\154\2\155\2\156\2\157\2\160\1\14\2\161"+
    "\2\162\2\163\2\164\2\165\1\14\2\166\2\167\1\14"+
    "\1\373\1\14\2\170\5\14\2\171\1\14\2\172\2\173"+
    "\2\174\14\14\2\175\10\14\2\176\3\14\2\177\4\14"+
    "\1\374\2\201\1\14\2\203\2\204\7\14\2\212\3\14"+
    "\1\375\1\14\1\376\1\14\1\377\1\u0100\1\u0101\1\u0102"+
    "\3\14\1\0\2\213\3\14\2\215\2\221\2\222\3\14"+
    "\1\u0103\1\14\1\u0104\2\225\2\226\2\14\2\232\2\233"+
    "\1\u0105\2\240\2\241\1\14\2\243\2\244\2\245\2\246"+
    "\2\247\2\250\2\251\2\252\2\255\2\257\2\14\2\260"+
    "\2\261\2\262\2\263\2\264\2\266\2\267\2\270\1\u0106"+
    "\1\u0107\2\273\2\274\2\275\2\276\2\277\2\300\2\301"+
    "\2\302\2\303\2\304\2\305\2\306\2\307\2\310\2\311"+
    "\2\312\2\313\2\314\1\u0108\1\u0109\2\316\2\317\1\u010a"+
    "\1\14\2\325\2\14\1\u010b\1\u010c\1\14\1\u010d\12\14"+
    "\2\346\4\14\2\347\2\350\2\351\1\0\2\353\1\u010e"+
    "\1\u010f\1\14\1\u0110\1\u0111\2\14\2\357\2\360\1\u0112"+
    "\1\u0113\1\14\1\u0114\1\u0115\1\14\1\u0116\1\14\1\u0117"+
    "\1\u0118\1\u0119\1\u011a\1\u011b\1\u011c\1\u011d\1\u011e\1\u011f"+
    "\2\377\2\u0100\2\u0101\2\u0102\1\0\2\14\1\u0120\1\u0121"+
    "\1\u0122\1\14\1\u0123\1\0\2\14\1\u0124\1\u0125\2\14"+
    "\1\u0126\1\14\1\u0127";

  private static int [] zzUnpackAction() {
    int [] result = new int[962];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u01dc\0\u0330\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u0374\0\u03b8\0\u03fc\0\u03b8\0\u0440\0\u0484"+
    "\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4"+
    "\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4"+
    "\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4"+
    "\0\u01dc\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0"+
    "\0\u0d04\0\u0d48\0\u0d04\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\u01dc\0\u01dc\0\u01dc\0\u0fac\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u0ff0\0\u1034"+
    "\0\u1078\0\u10bc\0\u1100\0\u02a8\0\u03b8\0\u01dc\0\u1144\0\u1188"+
    "\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8"+
    "\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8"+
    "\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08"+
    "\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28"+
    "\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48"+
    "\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068"+
    "\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288"+
    "\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8"+
    "\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8"+
    "\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8"+
    "\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u2a80\0\u2ac4\0\u0d04\0\u0b6c\0\u01dc\0\u0bf4"+
    "\0\u0c38\0\u01dc\0\u01dc\0\u2b08\0\u2b4c\0\u0bb0\0\u0bb0\0\u0bb0"+
    "\0\u0bb0\0\u2b90\0\u2bd4\0\u0bb0\0\u2c18\0\u2c5c\0\u2ca0\0\u0bb0"+
    "\0\u2ce4\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c"+
    "\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u03fc\0\u2fd0\0\u3014\0\u3058"+
    "\0\u309c\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u03fc\0\u31f0\0\u3234"+
    "\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454"+
    "\0\u3498\0\u34dc\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674"+
    "\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894"+
    "\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4"+
    "\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4"+
    "\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4"+
    "\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114"+
    "\0\u4158\0\u419c\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334"+
    "\0\u4378\0\u43bc\0\u4400\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554"+
    "\0\u4598\0\u45dc\0\u4620\0\u4664\0\u46a8\0\u03fc\0\u46ec\0\u4730"+
    "\0\u03fc\0\u4774\0\u03fc\0\u03fc\0\u47b8\0\u47fc\0\u4840\0\u4884"+
    "\0\u48c8\0\u490c\0\u4950\0\u4994\0\u03fc\0\u49d8\0\u4a1c\0\u4a60"+
    "\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80"+
    "\0\u4cc4\0\u4d08\0\u03fc\0\u03fc\0\u4d4c\0\u03fc\0\u4d90\0\u4dd4"+
    "\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4"+
    "\0\u5038\0\u03fc\0\u03fc\0\u507c\0\u50c0\0\u5104\0\u5148\0\u03fc"+
    "\0\u03fc\0\u03fc\0\u518c\0\u51d0\0\u5214\0\u5258\0\u03fc\0\u529c"+
    "\0\u52e0\0\u5324\0\u0bb0\0\u5368\0\u53ac\0\u0bb0\0\u53f0\0\u0bb0"+
    "\0\u5434\0\u5478\0\u54bc\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610"+
    "\0\u5654\0\u5698\0\u01dc\0\u03fc\0\u56dc\0\u5720\0\u5764\0\u57a8"+
    "\0\u57ec\0\u5830\0\u5874\0\u01dc\0\u03fc\0\u03fc\0\u58b8\0\u58fc"+
    "\0\u5940\0\u5984\0\u59c8\0\u5a0c\0\u5a50\0\u5a94\0\u5ad8\0\u5b1c"+
    "\0\u5b60\0\u5ba4\0\u5be8\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8\0\u5d3c"+
    "\0\u5d80\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90\0\u5ed4\0\u5f18\0\u5f5c"+
    "\0\u5fa0\0\u5fe4\0\u6028\0\u606c\0\u60b0\0\u60f4\0\u6138\0\u03fc"+
    "\0\u617c\0\u03fc\0\u61c0\0\u03fc\0\u6204\0\u6248\0\u628c\0\u62d0"+
    "\0\u6314\0\u6358\0\u639c\0\u63e0\0\u6424\0\u6468\0\u64ac\0\u64f0"+
    "\0\u6534\0\u03fc\0\u6578\0\u65bc\0\u6600\0\u6644\0\u6688\0\u66cc"+
    "\0\u03fc\0\u6710\0\u01dc\0\u03fc\0\u6754\0\u6798\0\u67dc\0\u6820"+
    "\0\u6864\0\u68a8\0\u68ec\0\u6930\0\u6974\0\u69b8\0\u69fc\0\u6a40"+
    "\0\u6a84\0\u6ac8\0\u6b0c\0\u6b50\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60"+
    "\0\u6ca4\0\u01dc\0\u03fc\0\u6ce8\0\u6d2c\0\u6d70\0\u01dc\0\u03fc"+
    "\0\u6db4\0\u03fc\0\u6df8\0\u03fc\0\u6e3c\0\u03fc\0\u03fc\0\u6e80"+
    "\0\u6ec4\0\u03fc\0\u03fc\0\u03fc\0\u6f08\0\u6f4c\0\u03fc\0\u6f90"+
    "\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u6fd4\0\u03fc"+
    "\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u7018\0\u705c\0\u70a0"+
    "\0\u70e4\0\u7128\0\u716c\0\u71b0\0\u71f4\0\u7238\0\u727c\0\u72c0"+
    "\0\u7304\0\u7348\0\u738c\0\u73d0\0\u7414\0\u7458\0\u749c\0\u74e0"+
    "\0\u7524\0\u7568\0\u01dc\0\u03fc\0\u75ac\0\u03fc\0\u03fc\0\u75f0"+
    "\0\u7634\0\u7678\0\u76bc\0\u01dc\0\u03fc\0\u7700\0\u7744\0\u7788"+
    "\0\u03fc\0\u77cc\0\u7810\0\u7854\0\u7898\0\u78dc\0\u7920\0\u03fc"+
    "\0\u7964\0\u03fc\0\u03fc\0\u03fc\0\u01dc\0\u0bb0\0\u01dc\0\u0bb0"+
    "\0\u01dc\0\u0bb0\0\u79a8\0\u79ec\0\u01dc\0\u03fc\0\u01dc\0\u03fc"+
    "\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc"+
    "\0\u7a30\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u7a74\0\u7ab8\0\u7afc\0\u7b40\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u03fc\0\u03fc\0\u7b84\0\u01dc\0\u03fc"+
    "\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc"+
    "\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u7bc8\0\u01dc\0\u03fc\0\u7c0c"+
    "\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc"+
    "\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc"+
    "\0\u01dc\0\u03fc\0\u7c50\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u7c94\0\u01dc\0\u03fc"+
    "\0\u01dc\0\u03fc\0\u7cd8\0\u03fc\0\u7d1c\0\u01dc\0\u03fc\0\u7d60"+
    "\0\u7da4\0\u7de8\0\u7e2c\0\u7e70\0\u01dc\0\u03fc\0\u7eb4\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u7ef8\0\u7f3c\0\u7f80"+
    "\0\u7fc4\0\u8008\0\u804c\0\u8090\0\u80d4\0\u8118\0\u815c\0\u81a0"+
    "\0\u81e4\0\u01dc\0\u03fc\0\u8228\0\u826c\0\u82b0\0\u82f4\0\u8338"+
    "\0\u837c\0\u83c0\0\u8404\0\u01dc\0\u03fc\0\u8448\0\u848c\0\u84d0"+
    "\0\u01dc\0\u03fc\0\u8514\0\u8558\0\u859c\0\u85e0\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u8624\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u8668\0\u86ac"+
    "\0\u86f0\0\u8734\0\u8778\0\u87bc\0\u8800\0\u01dc\0\u03fc\0\u8844"+
    "\0\u8888\0\u88cc\0\u03fc\0\u8910\0\u03fc\0\u8954\0\u8998\0\u89dc"+
    "\0\u8a20\0\u8a64\0\u8aa8\0\u8aec\0\u8b30\0\u8b74\0\u01dc\0\u03fc"+
    "\0\u8bb8\0\u8bfc\0\u8c40\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u8c84\0\u8cc8\0\u8d0c\0\u03fc\0\u8d50\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u8d94\0\u8dd8\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u8e1c\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u8e60\0\u8ea4\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u03fc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u01dc\0\u03fc\0\u03fc\0\u03fc\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u03fc\0\u8ee8\0\u01dc\0\u03fc\0\u8f2c\0\u8f70\0\u03fc"+
    "\0\u03fc\0\u8fb4\0\u03fc\0\u8ff8\0\u903c\0\u9080\0\u90c4\0\u9108"+
    "\0\u914c\0\u9190\0\u91d4\0\u9218\0\u925c\0\u01dc\0\u03fc\0\u92a0"+
    "\0\u92e4\0\u9328\0\u936c\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc"+
    "\0\u03fc\0\u93b0\0\u01dc\0\u03fc\0\u03fc\0\u03fc\0\u93f4\0\u03fc"+
    "\0\u03fc\0\u9438\0\u947c\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u03fc"+
    "\0\u03fc\0\u94c0\0\u03fc\0\u03fc\0\u9504\0\u03fc\0\u9548\0\u03fc"+
    "\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u03fc"+
    "\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc\0\u01dc\0\u03fc"+
    "\0\u958c\0\u95d0\0\u9614\0\u03fc\0\u03fc\0\u03fc\0\u9658\0\u03fc"+
    "\0\u969c\0\u96e0\0\u9724\0\u03fc\0\u01dc\0\u9768\0\u97ac\0\u03fc"+
    "\0\u97f0\0\u03fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[962];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\10\1\12\1\13\1\14"+
    "\1\10\1\15\2\14\2\10\1\14\1\10\1\14\1\10"+
    "\1\14\1\15\1\16\30\15\21\10\6\14\1\10\1\11"+
    "\1\17\1\13\1\10\1\17\1\13\1\10\1\20\44\10"+
    "\1\21\1\22\26\10\1\11\1\23\1\13\1\10\1\23"+
    "\1\13\1\24\1\10\1\25\2\24\2\10\1\24\1\10"+
    "\1\26\1\10\1\24\1\25\1\24\1\27\1\30\1\25"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\2\25\1\37"+
    "\1\40\1\25\1\41\1\42\1\43\1\44\1\25\1\45"+
    "\1\46\1\47\1\25\1\50\1\10\1\22\17\10\6\24"+
    "\1\10\1\11\1\51\2\10\1\51\16\10\1\52\57\10"+
    "\1\53\1\11\1\54\1\55\1\53\1\54\11\53\1\56"+
    "\1\10\1\57\62\53\1\10\1\11\1\60\1\13\1\10"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\62\1\66"+
    "\1\67\1\62\1\70\1\71\1\72\1\73\1\64\1\74"+
    "\1\75\3\64\1\76\1\77\1\100\12\64\1\101\3\64"+
    "\1\102\2\64\1\10\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\6\62\1\13\1\11\1\123\1\13"+
    "\1\10\1\23\76\13\106\0\1\12\1\13\1\0\1\12"+
    "\1\13\75\0\1\13\1\0\2\13\2\0\76\13\7\0"+
    "\1\124\1\0\1\15\2\124\2\0\1\124\1\0\1\124"+
    "\1\0\1\124\1\15\1\0\30\15\21\0\6\124\7\0"+
    "\1\15\1\0\3\15\2\0\1\15\1\0\1\15\1\0"+
    "\33\15\21\0\6\15\2\0\1\17\1\13\1\0\1\17"+
    "\1\13\77\0\1\23\2\0\1\23\105\0\1\125\1\0"+
    "\1\25\2\125\2\0\1\125\1\0\1\125\1\0\1\125"+
    "\1\25\1\0\30\25\21\0\6\125\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\33\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\4\25\1\127\1\130\1\131\1\25\1\132"+
    "\1\25\1\133\1\134\1\135\1\136\3\25\1\137\1\140"+
    "\1\25\1\141\2\25\1\142\1\143\1\144\1\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\3\25\1\145\2\25\1\146\1\25\1\147"+
    "\1\25\1\150\1\25\1\151\1\152\3\25\1\153\1\154"+
    "\1\25\1\155\1\25\1\156\1\157\1\25\1\160\1\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\3\25\1\161\2\25\1\162\3\25"+
    "\1\163\3\25\1\164\4\25\1\165\7\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\3\25\1\166\1\167\1\25\1\170\1\25\1\171"+
    "\1\172\10\25\1\173\10\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\174\2\25\1\175\6\25\1\176\3\25\1\177\1\200"+
    "\1\201\7\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\3\25\1\202\1\203"+
    "\2\25\1\204\1\205\5\25\1\206\7\25\1\207\4\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\6\25\1\210\1\25\1\211\5\25"+
    "\1\212\3\25\1\213\1\214\1\25\1\215\1\216\2\25"+
    "\1\217\1\220\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\7\25\1\221\23\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\6\25\1\222\2\25\1\223\1\25"+
    "\1\224\6\25\1\225\10\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\226\15\25\1\227\6\25\1\230\2\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\7\25\1\231\1\232\1\25\1\233\10\25\1\234"+
    "\4\25\1\235\2\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\4\25\1\236"+
    "\5\25\1\237\10\25\1\240\7\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\11\25\1\241\12\25\1\242\1\25\1\243\4\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\6\25\1\244\1\245\2\25\1\246\10\25"+
    "\1\247\2\25\1\250\1\25\1\251\2\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\3\25\1\252\6\25\1\253\10\25\1\254\3\25"+
    "\1\255\3\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\3\25\1\256\3\25"+
    "\1\257\2\25\1\260\13\25\1\261\1\262\3\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\22\25\1\263\10\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\11\25\1\264\14\25\1\265\4\25\21\0\6\25\2\0"+
    "\1\51\2\0\1\51\123\0\1\266\1\267\1\270\1\271"+
    "\53\0\1\53\2\0\2\53\1\0\11\53\3\0\62\53"+
    "\2\0\1\54\1\13\1\0\1\54\1\13\75\0\1\55"+
    "\1\0\1\13\1\55\1\53\1\0\11\55\3\13\62\55"+
    "\1\56\1\0\15\56\1\272\1\273\63\56\1\57\1\0"+
    "\16\57\1\274\1\272\62\57\2\0\1\60\2\0\1\60"+
    "\105\0\1\62\1\0\1\64\1\275\1\62\2\0\1\62"+
    "\1\0\1\275\1\0\1\275\1\64\1\0\30\64\21\0"+
    "\6\62\7\0\1\276\1\0\1\276\1\0\1\276\2\0"+
    "\1\276\7\0\1\276\2\0\5\276\40\0\6\276\7\0"+
    "\1\64\1\277\3\64\2\0\1\64\1\0\1\64\1\0"+
    "\33\64\21\0\6\64\7\0\1\275\1\0\1\64\1\275"+
    "\1\300\2\0\1\300\1\0\1\275\1\0\1\275\1\64"+
    "\1\0\30\64\21\0\1\300\1\275\4\300\15\0\2\301"+
    "\61\0\1\301\20\0\1\302\66\0\1\70\1\0\15\70"+
    "\1\303\1\304\63\70\7\0\1\275\1\0\1\64\2\275"+
    "\2\0\1\275\1\0\1\275\1\0\1\275\1\64\1\0"+
    "\30\64\21\0\6\275\1\72\1\0\16\72\1\305\1\303"+
    "\62\72\7\0\1\275\1\0\1\64\2\275\2\0\1\275"+
    "\1\0\1\275\1\0\1\275\1\64\1\0\1\306\1\307"+
    "\1\310\1\311\24\64\21\0\6\275\7\0\1\64\1\277"+
    "\3\64\2\0\1\64\1\0\1\64\1\0\3\64\1\312"+
    "\20\64\1\313\1\64\1\314\4\64\21\0\6\64\7\0"+
    "\1\64\1\277\2\64\1\315\2\0\1\315\1\0\1\64"+
    "\1\0\33\64\21\0\1\315\1\64\4\315\7\0\1\64"+
    "\1\277\3\64\2\0\1\64\1\0\1\64\1\0\10\64"+
    "\1\316\22\64\21\0\6\64\7\0\1\64\1\277\2\64"+
    "\1\317\2\0\1\317\1\0\1\64\1\0\33\64\21\0"+
    "\1\317\1\64\4\317\7\0\1\64\1\277\3\64\2\0"+
    "\1\64\1\0\1\64\1\0\10\64\1\320\22\64\21\0"+
    "\6\64\7\0\1\64\1\277\3\64\2\0\1\64\1\0"+
    "\1\64\1\0\3\64\1\321\27\64\21\0\6\64\56\0"+
    "\1\322\107\0\1\323\77\0\1\324\120\0\1\325\66\0"+
    "\1\326\15\0\1\327\1\330\64\0\1\331\16\0\1\332"+
    "\6\0\1\13\1\0\1\123\1\13\1\0\1\23\76\13"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\10\25\1\333\22\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\7\25"+
    "\1\334\23\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\3\25\1\335\6\25"+
    "\1\336\10\25\1\337\3\25\1\340\3\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\3\25\1\341\4\25\1\342\22\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\10\25\1\343\14\25\1\344\1\25\1\345\3\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\346\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\12\25\1\347\14\25\1\350\3\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\3\25\1\351\12\25\1\352\14\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\16\25\1\353\14\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\12\25"+
    "\1\354\20\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\6\25\1\355\1\25"+
    "\1\356\22\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\357\20\25"+
    "\1\360\7\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\4\25\1\361\26\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\3\25\1\362\4\25\1\363\22\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\3\25\1\364\6\25\1\365\13\25"+
    "\1\366\4\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\3\25\1\367\6\25"+
    "\1\370\5\25\1\371\2\25\1\372\3\25\1\373\3\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\3\25\1\374\2\25\1\375\1\25"+
    "\1\376\4\25\1\377\15\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\25\25"+
    "\1\u0100\5\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\12\25\1\u0101\14\25"+
    "\1\u0102\3\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\3\25\1\u0103\12\25"+
    "\1\u0104\14\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\16\25\1\u0105\14\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\12\25\1\u0106\20\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\6\25\1\u0107\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\7\25"+
    "\1\u0108\23\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\3\25\1\u0109\27\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\3\25\1\u010a\4\25\1\u010b\22\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\6\25\1\u010c\17\25\1\u010d\4\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\12\25\1\u010e\20\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\7\25\1\u010f\23\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\u0110\16\25\1\u0111\10\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\7\25"+
    "\1\u0112\23\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\6\25\1\u0113\17\25"+
    "\1\u0114\4\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\10\25\1\u0115\22\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\16\25\1\u0116\14\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\33\25\21\0\1\u0117\5\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\11\25\1\u0118"+
    "\21\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\11\25\1\u0119\21\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\12\25\1\u011a\20\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\26\25\1\u011b\4\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\20\25\1\u011c"+
    "\12\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\24\25\1\u011d\6\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\23\25\1\u011e\7\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\11\25\1\u011f\21\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u0120"+
    "\7\25\1\u0121\20\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\6\25\1\u0122"+
    "\1\25\1\u0123\1\25\1\u0124\1\u0125\1\u0126\1\u0127\3\25"+
    "\1\u0128\1\u0129\1\25\1\u012a\1\25\1\u012b\1\u012c\1\25"+
    "\1\u012d\1\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\27\25\1\u012e\3\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u012f\1\25\1\u0130\26\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\31\25\1\u0131\1\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u0132\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\u0133\27\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\15\25\1\u0134\15\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\22\25\1\u0135\10\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\11\25\1\u0136\21\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\26\25"+
    "\1\u0137\4\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\30\25\1\u0138\2\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\12\25\1\u0139\20\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\12\25\1\u013a\20\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\14\25"+
    "\1\u013b\12\25\1\u013c\3\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\16\25"+
    "\1\u013d\7\25\1\u013e\4\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\6\25"+
    "\1\u013f\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\22\25\1\u0140\10\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\4\25\1\u0141\1\25\1\u0142\1\25"+
    "\1\u0143\1\u0144\1\u0145\1\25\1\u0146\4\25\1\u0147\1\u0148"+
    "\1\25\1\u0149\6\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\6\25\1\u014a"+
    "\1\25\1\u014b\5\25\1\u014c\14\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\26\25\1\u014d\4\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\24\25\1\u014e"+
    "\6\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\21\25\1\u014f\11\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\10\25\1\u0150\22\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\33\25\21\0\1\u0151\5\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\32\25\1\u0152\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\31\25\1\u0153\1\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\6\25\1\u0154\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\10\25\1\u0155"+
    "\22\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\7\25\1\u0156\4\25\1\u0157"+
    "\16\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\6\25\1\u0158\15\25\1\u0159"+
    "\2\25\1\u015a\3\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\11\25\1\u015b"+
    "\21\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\27\25\1\u015c\3\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u015d\11\25\1\u015e\1\25\1\u015f"+
    "\14\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\12\25\1\u0160\20\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\14\25\1\u0161\16\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\7\25\1\u0162\23\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\24\25\1\u0163"+
    "\6\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\16\25\1\u0164\14\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\3\25\1\u0165\27\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u0166\1\u0167\22\25\1\u0168\4\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\3\25\1\u0169\10\25\1\u016a\4\25\1\u016b\2\25"+
    "\1\u016c\6\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\6\25\1\u016d\17\25"+
    "\1\u016e\3\25\1\u016f\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\3\25\1\u0170"+
    "\6\25\1\u0171\13\25\1\u0172\4\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\27\25\1\u0173\3\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\3\25\1\u0174"+
    "\27\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\32\25\1\u0175\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\7\25\1\u0176\23\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\6\25"+
    "\1\u0177\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\6\25\1\u0178\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\12\25\1\u0179\20\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\12\25\1\u017a\20\25\21\0\6\25\1\56\1\0"+
    "\102\56\1\57\1\0\102\57\1\70\1\0\102\70\1\72"+
    "\1\0\102\72\7\0\1\64\1\277\3\64\2\0\1\64"+
    "\1\0\1\64\1\0\24\64\1\u017b\6\64\21\0\6\64"+
    "\7\0\1\64\1\277\3\64\2\0\1\64\1\0\1\64"+
    "\1\0\2\64\1\u017c\30\64\21\0\6\64\7\0\1\64"+
    "\1\277\3\64\2\0\1\64\1\0\1\64\1\0\2\64"+
    "\1\u017d\30\64\21\0\6\64\7\0\1\64\1\277\3\64"+
    "\2\0\1\64\1\0\1\64\1\0\26\64\1\u017e\4\64"+
    "\21\0\6\64\7\0\1\64\1\277\3\64\2\0\1\64"+
    "\1\0\1\64\1\0\2\64\1\u017f\30\64\21\0\6\64"+
    "\7\0\1\64\1\277\3\64\2\0\1\64\1\0\1\64"+
    "\1\0\24\64\1\u0180\6\64\21\0\6\64\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\11\25"+
    "\1\u0181\21\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\24\25\1\u0182\6\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u0183\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u0184\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u0185\30\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u0186\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u0187\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u0188\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\27\25"+
    "\1\u0189\3\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u018a\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u018b"+
    "\1\25\1\0\1\25\1\0\3\25\4\u018c\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u018d\30\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u018e\30\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u018f"+
    "\30\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u0190\30\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u0191\30\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u0192\30\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u0193"+
    "\30\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u0194\1\25\1\0\1\25\1\0\3\25\4\u0195\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\24\25\1\u0196\6\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u0197\4\25\1\u0198\6\25\1\u0199\6\25"+
    "\1\u019a\4\25\1\u019b\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u019c"+
    "\30\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u019d\30\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\1\u019e\32\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\27\25"+
    "\1\u019f\3\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u01a0\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01a1\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u01a2\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01a3\30\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u01a4\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01a5\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u01a6\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\26\25"+
    "\1\u01a7\4\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u01a8\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\14\25\1\u01a9\16\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u01aa\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01ab\30\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u01ac\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01ad\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u01ae\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01af\30\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u01b0\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01b1\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u01b2\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\27\25"+
    "\1\u01b3\3\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u01b4\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01b5\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u01b6\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01b7\30\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\22\25\1\u01b8\10\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01b9\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\27\25\1\u01ba\3\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\20\25"+
    "\1\u01bb\12\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\11\25\1\u01bc\21\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u01bd\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u01be\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\11\25"+
    "\1\u01bf\21\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\14\25\1\u01c0\16\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\33\25\21\0\1\25\1\u01c1\4\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u01c2\2\25\1\u01c3\1\25\1\u01c4\6\25"+
    "\1\u01c5\6\25\1\u01c6\4\25\1\u01c7\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u01c8\13\25\1\u01c9\14\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\14\25\1\u01ca\16\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u01cb"+
    "\30\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u01cc\30\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u01cd\4\25\1\u01ce\6\25\1\u01cf"+
    "\2\25\1\u01d0\11\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\24\25\1\u01d1"+
    "\6\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\12\25\1\u01d2\20\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u01d3\1\25"+
    "\1\0\1\25\1\0\3\25\4\u01d4\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\14\25\1\u01d5\16\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\u01d6\6\25\1\u01d7\10\25\1\u01d8\3\25\1\u01d9\3\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\3\25\1\u01da\4\25\1\u01db\22\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\25\25\1\u01dc\5\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u01dd\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\12\25"+
    "\1\u01de\14\25\1\u01df\3\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\u01e0\12\25\1\u01e1\14\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\16\25"+
    "\1\u01e2\14\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\12\25\1\u01e3\20\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\6\25\1\u01e4\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\7\25\1\u01e5\23\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01e6\30\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\3\25\1\u01e7\4\25"+
    "\1\u01e8\22\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\7\25\1\u01e9\23\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u01ea"+
    "\1\25\1\0\1\25\1\0\3\25\4\u01eb\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u01ec\30\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\3\25\1\u01ed\24\25\1\u01ee\2\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u01ef\1\25\1\0\1\25"+
    "\1\0\3\25\4\u01f0\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\12\25"+
    "\1\u01f1\20\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\23\25\1\u01f2\7\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\6\25\1\u01f3\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\10\25\1\u01f4\5\25\1\u01f5\2\25\1\u01f6\4\25"+
    "\1\u01f7\4\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u01f8\13\25"+
    "\1\u01f9\14\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\26\25\1\u01fa\4\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\21\25\1\u01fb\11\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\22\25\1\u01fc\10\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u01fd\30\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u01fe\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\6\25\1\u01ff\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\12\25\1\u0200\20\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\27\25"+
    "\1\u0201\3\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\12\25\1\u0202\14\25"+
    "\1\u0203\3\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\25\25\1\u0204\5\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\12\25\1\u0205\14\25\1\u0206\3\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\7\25\1\u0207\6\25\1\u0208\14\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\4\25\1\u0209\3\25\1\u020a\1\u020b"+
    "\1\u020c\20\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\6\25\1\u020d\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\16\25\1\u020e\14\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\4\25\1\u020f\1\25\1\u0210\2\25\1\u0211\21\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\27\25\1\u0212\3\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u0213\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\24\25"+
    "\1\u0214\6\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\15\25\1\u0215\10\25"+
    "\1\u0216\4\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\33\25\21\0\1\25"+
    "\1\u0217\4\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\16\25\1\u0218\14\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\12\25\1\u0219\20\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\u021a\24\25\1\u021b\2\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\11\25"+
    "\1\u021c\21\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\26\25\1\u021d\4\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u021e\27\25\1\u021f\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\16\25\1\u0220\14\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\7\25\1\u0221\23\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u0222"+
    "\30\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u0223\1\25\1\0\1\25\1\0\3\25\4\u0224\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u0225\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\22\25\1\u0226\10\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\12\25"+
    "\1\u0227\20\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u0228\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\3\25\1\u0229\27\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\22\25\1\u022a\10\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\15\25"+
    "\1\u022b\15\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u022c\1\25\1\0\1\25\1\0\3\25\4\u022d"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\12\25\1\u022e\20\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\12\25\1\u022f\20\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\12\25\1\u0230\20\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\27\25\1\u0231"+
    "\3\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u0232\30\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u0233\30\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\6\25\1\u0234\17\25\1\u0235\4\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u0236\30\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u0237"+
    "\30\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\27\25\1\u0238\3\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\24\25\1\u0239\6\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\20\25\1\u023a\12\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\13\25\1\u023b"+
    "\17\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\13\25\1\u023c\17\25\21\0"+
    "\6\25\7\0\1\64\1\277\3\64\1\0\1\u023d\1\64"+
    "\1\0\1\64\1\0\3\64\4\u023e\24\64\21\0\6\64"+
    "\7\0\1\64\1\277\3\64\1\0\1\u023f\1\64\1\0"+
    "\1\64\1\0\3\64\4\u0240\24\64\21\0\6\64\7\0"+
    "\1\64\1\277\3\64\1\0\1\u0241\1\64\1\0\1\64"+
    "\1\0\3\64\4\u0242\24\64\21\0\6\64\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u0243\30\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u0244\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u0245"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0246\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u0247\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0248\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u0249\1\25\1\0"+
    "\1\25\1\0\3\25\4\u024a\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u024b\1\25\1\0\1\25"+
    "\1\0\3\25\4\u024c\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\1\0\1\u024d\1\25\1\0\1\25\1\0"+
    "\3\25\4\u024e\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u024f\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0250\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\16\25\1\u0251\14\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u0252"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0253\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u0254\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0255\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u0256\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0257\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u0258\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0259\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\1\0\1\u025a\1\25\1\0\1\25\1\0"+
    "\3\25\4\u025b\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u025c\1\25\1\0\1\25\1\0\3\25"+
    "\4\u025d\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u025e\1\25\1\0\1\25\1\0\3\25\4\u025f"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u0260\1\25\1\0\1\25\1\0\3\25\4\u0261\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u0262"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0263\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u0264\30\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u0265\30\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u0266"+
    "\30\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u0267\30\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u0268\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0269\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u026a\1\25\1\0"+
    "\1\25\1\0\3\25\4\u026b\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\10\25\1\u026c\2\25\1\u026d\17\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u026e\30\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u026f\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0270\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u0271\1\25\1\0\1\25\1\0\3\25\4\u0272"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u0273\1\25\1\0\1\25\1\0\3\25\4\u0274\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u0275"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0276\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u0277\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0278\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u0279\1\25\1\0"+
    "\1\25\1\0\3\25\4\u027a\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u027b\1\25\1\0\1\25"+
    "\1\0\3\25\4\u027c\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u027d\30\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u027e\1\25\1\0\1\25\1\0\3\25\4\u027f"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u0280\30\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u0281\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0282\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u0283\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0284\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u0285\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0286\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\1\0\1\u0287\1\25\1\0\1\25\1\0"+
    "\3\25\4\u0288\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u0289\1\25\1\0\1\25\1\0\3\25"+
    "\4\u028a\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u028b\1\25\1\0\1\25\1\0\3\25\4\u028c"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u028d\1\25\1\0\1\25\1\0\3\25\4\u028e\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u028f"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0290\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u0291\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0292\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u0293\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\1\0\1\u0294\1\25\1\0\1\25\1\0"+
    "\3\25\4\u0295\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u0296\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0297\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u0298\1\25\1\0\1\25\1\0\3\25\4\u0299"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u029a\1\25\1\0\1\25\1\0\3\25\4\u029b\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u029c"+
    "\1\25\1\0\1\25\1\0\3\25\4\u029d\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u029e\30\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u029f\1\25\1\0\1\25"+
    "\1\0\3\25\4\u02a0\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\1\0\1\u02a1\1\25\1\0\1\25\1\0"+
    "\3\25\4\u02a2\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u02a3"+
    "\30\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\22\25\1\u02a4\10\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\33\25\21\0\2\25\1\u02a5\3\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u02a6\1\25\1\0\1\25"+
    "\1\0\3\25\4\u02a7\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\7\25"+
    "\1\u02a8\23\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u02a9\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u02aa\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u02ab\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u02ac\30\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u02ad\1\25\1\0\1\25\1\0\3\25\4\u02ae"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u02af\30\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u02b0\1\25"+
    "\1\0\1\25\1\0\3\25\4\u02b1\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u02b2\1\25\1\0"+
    "\1\25\1\0\3\25\4\u02b3\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u02b4\1\25\1\0\1\25"+
    "\1\0\3\25\4\u02b5\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u02b6\30\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u02b7\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u02b8\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\1\u02b9\32\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u02ba"+
    "\30\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u02bb\30\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u02bc\30\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u02bd\30\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u02be"+
    "\30\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u02bf\30\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u02c0\30\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u02c1\30\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u02c2\1\25\1\0\1\25\1\0\3\25"+
    "\4\u02c3\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u02c4\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u02c5\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u02c6\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u02c7\30\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u02c8\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u02c9\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u02ca\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u02cb\30\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u02cc\1\25\1\0\1\25\1\0\3\25\4\u02cd"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u02ce\30\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u02cf\30\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\1\u02d0\32\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u02d1\1\25\1\0\1\25\1\0\3\25\4\u02d2"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u02d3\30\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u02d4\30\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\16\25\1\u02d5\14\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\16\25\1\u02d6"+
    "\14\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\13\25\1\u02d7\17\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u02d8\1\25"+
    "\1\0\1\25\1\0\3\25\4\u02d9\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u02da\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\1\0\1\u02db\1\25\1\0\1\25\1\0"+
    "\3\25\4\u02dc\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u02dd\1\25\1\0\1\25\1\0\3\25"+
    "\4\u02de\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\14\25\1\u02df\16\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\10\25\1\u02e0\22\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\22\25\1\u02e1\10\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\16\25"+
    "\1\u02e2\14\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\30\25\1\u02e3\2\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\16\25\1\u02e4\14\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\22\25\1\u02e5\10\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\1\0\1\u02e6\1\25\1\0\1\25\1\0"+
    "\3\25\4\u02e7\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\12\25\1\u02e8"+
    "\11\25\1\u02e9\6\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\16\25\1\u02ea"+
    "\14\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\23\25\1\u02eb\7\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\33\25\21\0\2\25\1\u02ec\3\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\27\25\1\u02ed\3\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u02ee"+
    "\4\25\1\u02ef\11\25\1\u02f0\2\25\1\u02f1\1\u02f2\5\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u02f3\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\2\25\1\u02f4\30\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\2\25"+
    "\1\u02f5\30\25\21\0\6\25\2\0\1\u02f6\2\0\1\u02f6"+
    "\1\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\33\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u02f7\1\25\1\0\1\25\1\0\3\25\4\u02f8"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u02f9\30\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\3\25\1\u02fa\27\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\14\25\1\u02fb\16\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u02fc\1\25\1\0\1\25\1\0\3\25"+
    "\4\u02fd\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u02fe\1\25\1\0\1\25\1\0\3\25\4\u02ff"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u0300\1\25\1\0\1\25\1\0\3\25\4\u0301\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\12\25\1\u0302\20\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\27\25\1\u0303\3\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\u0304\27\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\27\25\1\u0305\3\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\3\25\1\u0306\27\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\27\25\1\u0307\3\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\1\0\1\u0308\1\25\1\0\1\25\1\0"+
    "\3\25\4\u0309\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u030a\1\25\1\0\1\25\1\0\3\25"+
    "\4\u030b\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\2\25\1\u030c\30\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\u030d\30\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u030e\1\25\1\0"+
    "\1\25\1\0\3\25\4\u030f\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u0310\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0311\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\31\25"+
    "\1\u0312\1\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u0313\1\25\1\0\1\25\1\0\3\25\4\u0314"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u0315\1\25\1\0\1\25\1\0\3\25\4\u0316\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\23\25\1\u0317\7\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u0318\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0319\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u031a\1\25\1\0\1\25"+
    "\1\0\3\25\4\u031b\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\1\0\1\u031c\1\25\1\0\1\25\1\0"+
    "\3\25\4\u031d\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u031e\1\25\1\0\1\25\1\0\3\25"+
    "\4\u031f\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u0320\1\25\1\0\1\25\1\0\3\25\4\u0321"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u0322\1\25\1\0\1\25\1\0\3\25\4\u0323\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u0324"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0325\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u0326\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0327\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u0328\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0329\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u032a\1\25\1\0\1\25"+
    "\1\0\3\25\4\u032b\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\33\25"+
    "\21\0\1\25\1\u032c\4\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\27\25\1\u032d\3\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u032e"+
    "\1\25\1\0\1\25\1\0\3\25\4\u032f\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u0330\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0331\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u0332\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0333\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u0334\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0335\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\1\0\1\u0336\1\25\1\0\1\25\1\0"+
    "\3\25\4\u0337\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u0338\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0339\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u033a\1\25\1\0\1\25\1\0\3\25\4\u033b"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u033c\1\25\1\0\1\25\1\0\3\25\4\u033d\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\2\0\1\25"+
    "\1\0\1\25\1\0\10\25\1\u033e\2\25\1\u033f\17\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u0340"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0341\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u0342\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0343\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u0344\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0345\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u0346\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0347\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\1\0\1\u0348\1\25\1\0\1\25\1\0"+
    "\3\25\4\u0349\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u034a\1\25\1\0\1\25\1\0\3\25"+
    "\4\u034b\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u034c\1\25\1\0\1\25\1\0\3\25\4\u034d"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u034e\1\25\1\0\1\25\1\0\3\25\4\u034f\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u0350"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0351\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u0352\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0353\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u0354\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0355\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u0356\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0357\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\1\0\1\u0358\1\25\1\0\1\25\1\0"+
    "\3\25\4\u0359\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u035a\1\25\1\0\1\25\1\0\3\25"+
    "\4\u035b\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u035c\1\25\1\0\1\25\1\0\3\25\4\u035d"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u035e\1\25\1\0\1\25\1\0\3\25\4\u035f\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u0360"+
    "\1\25\1\0\1\25\1\0\3\25\4\u0361\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u0362\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0363\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\2\0\1\25\1\0\1\25"+
    "\1\0\10\25\1\u0364\2\25\1\u0365\17\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u0366\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0367\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\1\0\1\u0368\1\25\1\0\1\25"+
    "\1\0\3\25\4\u0369\24\25\21\0\6\25\7\0\1\25"+
    "\1\126\3\25\2\0\1\25\1\0\1\25\1\0\13\25"+
    "\1\u036a\17\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\2\0\1\25\1\0\1\25\1\0\22\25\1\u036b\10\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u036c"+
    "\1\25\1\0\1\25\1\0\3\25\4\u036d\24\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\7\25\1\u036e\23\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\26\25\1\u036f\4\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\12\25\1\u0370"+
    "\20\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\22\25\1\u0371\10\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\11\25\1\u0372\21\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\26\25\1\u0373\4\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\12\25\1\u0374"+
    "\20\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\26\25\1\u0375\4\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\27\25\1\u0376\3\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\22\25\1\u0377\10\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\u0378\1\0\1\25\1\0\33\25\21\0"+
    "\1\u0379\1\25\1\u037a\1\u037b\1\u037c\1\u037d\7\0\1\25"+
    "\1\126\3\25\1\0\1\u037e\1\25\1\0\1\25\1\0"+
    "\3\25\4\u037f\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\u0380"+
    "\30\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\2\25\1\u0381\30\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\2\25\1\u0382\30\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\2\25\1\u0383\30\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u0384\1\25\1\0\1\25\1\0\3\25"+
    "\4\u0385\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u0386\1\25\1\0\1\25\1\0\3\25\4\u0387"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u0388\1\25\1\0\1\25\1\0\3\25\4\u0389\24\25"+
    "\21\0\6\25\32\0\1\u038a\60\0\1\25\1\126\3\25"+
    "\1\0\1\u038b\1\25\1\0\1\25\1\0\3\25\4\u038c"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\27\25\1\u038d\3\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\12\25\1\u038e\20\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\10\25\1\u038f\22\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\27\25\1\u0390"+
    "\1\25\1\u0391\1\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\12\25\1\u0392"+
    "\20\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\12\25\1\u0393\20\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\1\0\1\u0394\1\25"+
    "\1\0\1\25\1\0\3\25\4\u0395\24\25\21\0\6\25"+
    "\7\0\1\25\1\126\3\25\1\0\1\u0396\1\25\1\0"+
    "\1\25\1\0\3\25\4\u0397\24\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\22\25\1\u0398\10\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\33\25\21\0"+
    "\2\25\1\u0399\3\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\10\25\1\u039a\22\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\12\25\1\u039b\20\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\6\25\1\u039c\24\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\23\25\1\u039d"+
    "\7\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\12\25\1\u039e\20\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\7\25\1\u039f\23\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\26\25\1\u03a0\4\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\26\25\1\u03a1"+
    "\4\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\12\25\1\u03a2\20\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\33\25\21\0\2\25\1\u03a3\3\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\33\25\21\0\2\25\1\u03a4\3\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\33\25\21\0"+
    "\2\25\1\u03a5\3\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\33\25\21\0\2\25\1\u03a6"+
    "\3\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\33\25\21\0\2\25\1\u03a7\3\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\33\25\21\0\2\25\1\u03a8\3\25\7\0\1\25\1\126"+
    "\3\25\1\0\1\u03a9\1\25\1\0\1\25\1\0\3\25"+
    "\4\u03aa\24\25\21\0\6\25\7\0\1\25\1\126\3\25"+
    "\1\0\1\u03ab\1\25\1\0\1\25\1\0\3\25\4\u03ac"+
    "\24\25\21\0\6\25\7\0\1\25\1\126\3\25\1\0"+
    "\1\u03ad\1\25\1\0\1\25\1\0\3\25\4\u03ae\24\25"+
    "\21\0\6\25\7\0\1\25\1\126\3\25\1\0\1\u03af"+
    "\1\25\1\0\1\25\1\0\3\25\4\u03b0\24\25\21\0"+
    "\6\25\45\0\1\u03b1\45\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\27\25\1\u03b2\3\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\10\25\1\u03b3\22\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\27\25\1\u03b4\3\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\15\25\1\u03b5"+
    "\15\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\11\25\1\u03b6\10\25\1\u03b7"+
    "\10\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\26\25\1\u03b8\4\25\21\0"+
    "\6\25\33\0\1\u03b9\57\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\16\25\1\u03ba\14\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\27\25\1\u03bb\3\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\11\25\1\u03bc\21\25\21\0\6\25\34\0\1\u03bd\56\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\23\25\1\u03be\7\25\21\0\6\25\7\0\1\25\1\126"+
    "\3\25\2\0\1\25\1\0\1\25\1\0\16\25\1\u03bf"+
    "\14\25\21\0\6\25\7\0\1\25\1\126\3\25\2\0"+
    "\1\25\1\0\1\25\1\0\22\25\1\u03c0\10\25\21\0"+
    "\6\25\7\0\1\25\1\126\3\25\2\0\1\25\1\0"+
    "\1\25\1\0\23\25\1\u03c1\7\25\21\0\6\25\7\0"+
    "\1\25\1\126\3\25\2\0\1\25\1\0\1\25\1\0"+
    "\22\25\1\u03c2\10\25\21\0\6\25";

  private static int [] zzUnpackTrans() {
    int [] result = new int[38964];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\4\1\1\11\1\1\3\11\36\1\1\11"+
    "\22\1\3\11\1\1\7\11\5\1\2\0\1\11\137\1"+
    "\5\11\3\0\1\1\1\11\2\1\2\11\2\0\14\1"+
    "\11\11\260\1\1\11\10\1\1\11\76\1\1\11\26\1"+
    "\1\11\4\1\1\11\63\1\1\11\10\1\1\11\20\1"+
    "\1\11\1\1\1\11\1\1\1\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\2\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\5\1\1\11\1\1\1\11\4\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\2\1\1\11\2\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\2\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\1\1\1\11\4\1"+
    "\1\11\6\1\1\11\2\1\1\11\1\1\1\11\1\1"+
    "\1\11\15\1\1\11\11\1\1\11\4\1\1\11\6\1"+
    "\1\11\2\1\1\11\1\1\1\11\10\1\1\11\17\1"+
    "\1\0\1\11\4\1\1\11\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\1\1\1\11\3\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\3\1\1\11\1\1\1\11"+
    "\3\1\1\11\21\1\1\11\5\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\11\10\1\1\11\1\1"+
    "\1\11\22\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\7\1\1\0\3\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[962];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _M68kLexer() {
    this((java.io.Reader)null);
  }

  private boolean afterSpaceOrComma() {
    char previousChar = charAt(-1);
    return Character.isSpaceChar(previousChar) || previousChar == ',';
  }

  /**
   * Whether given {@code '*'} is "current PC" symbol instead of {@link MUL}.
   */
  private boolean isCurrentPcSymbol(){
    if (afterSpaceOrComma()) return true;
    
    char previousChar = charAt(-1);
    return previousChar == '-' || previousChar == '+';
  }

  /**
   * Push back DATA_SIZE token.
   */
  private void pushbackDataSize() {
    yypushback(2);
  }

  private char charAt(final int offset) {
    final int loc = getTokenStart() + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  int operandSpaceCount = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _M68kLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 296: break;
          case 2: 
            { operandSpaceCount = 0; yybegin(YYINITIAL); return LINEFEED;
            } 
            // fall through
          case 297: break;
          case 3: 
            { operandSpaceCount = 0; yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            } 
            // fall through
          case 298: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 299: break;
          case 5: 
            { operandSpaceCount = 0; yybegin(AFTER_LABEL); return ID;
            } 
            // fall through
          case 300: break;
          case 6: 
            { operandSpaceCount = 0; return DOT;
            } 
            // fall through
          case 301: break;
          case 7: 
            { yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            } 
            // fall through
          case 302: break;
          case 8: 
            { return DOLLAR;
            } 
            // fall through
          case 303: break;
          case 9: 
            { yybegin(IN_INSTRUCTION); return COLON;
            } 
            // fall through
          case 304: break;
          case 10: 
            { yybegin(IN_OPERAND); return EQ_DIRECTIVE;
            } 
            // fall through
          case 305: break;
          case 11: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 306: break;
          case 12: 
            { yybegin(IN_OPERAND); return MACRO_CALL_ID;
            } 
            // fall through
          case 307: break;
          case 13: 
            { yybegin(IN_OPERAND); return BACKSLASH;
            } 
            // fall through
          case 308: break;
          case 14: 
            { operandSpaceCount = 1; yybegin(IN_OPERAND); return WHITE_SPACE;
            } 
            // fall through
          case 309: break;
          case 15: 
            { yybegin(IN_OPERAND); return STRING;
            } 
            // fall through
          case 310: break;
          case 16: 
            { operandSpaceCount++; return WHITE_SPACE;
            } 
            // fall through
          case 311: break;
          case 17: 
            { if (operandSpaceCount++ == 1) { yybegin(AFTER_OPERAND); } return WHITE_SPACE;
            } 
            // fall through
          case 312: break;
          case 18: 
            { if (isCurrentPcSymbol()) { return ID; } return MUL;
            } 
            // fall through
          case 313: break;
          case 19: 
            { return DEC_NUMBER;
            } 
            // fall through
          case 314: break;
          case 20: 
            { return ID;
            } 
            // fall through
          case 315: break;
          case 21: 
            { return PERCENT;
            } 
            // fall through
          case 316: break;
          case 22: 
            { return PIPE;
            } 
            // fall through
          case 317: break;
          case 23: 
            { return STRING;
            } 
            // fall through
          case 318: break;
          case 24: 
            { return BACKSLASH;
            } 
            // fall through
          case 319: break;
          case 25: 
            { return DOT;
            } 
            // fall through
          case 320: break;
          case 26: 
            { return EQ;
            } 
            // fall through
          case 321: break;
          case 27: 
            { return COMMA;
            } 
            // fall through
          case 322: break;
          case 28: 
            { return PLUS;
            } 
            // fall through
          case 323: break;
          case 29: 
            { return MINUS;
            } 
            // fall through
          case 324: break;
          case 30: 
            { return DIV;
            } 
            // fall through
          case 325: break;
          case 31: 
            { return POW;
            } 
            // fall through
          case 326: break;
          case 32: 
            { return HASH;
            } 
            // fall through
          case 327: break;
          case 33: 
            { return TILDE;
            } 
            // fall through
          case 328: break;
          case 34: 
            { return L_PAREN;
            } 
            // fall through
          case 329: break;
          case 35: 
            { return R_PAREN;
            } 
            // fall through
          case 330: break;
          case 36: 
            { return L_BRACKET;
            } 
            // fall through
          case 331: break;
          case 37: 
            { return R_BRACKET;
            } 
            // fall through
          case 332: break;
          case 38: 
            { return EXCLAMATION;
            } 
            // fall through
          case 333: break;
          case 39: 
            { return AMPERSAND;
            } 
            // fall through
          case 334: break;
          case 40: 
            { return LT;
            } 
            // fall through
          case 335: break;
          case 41: 
            { return GT;
            } 
            // fall through
          case 336: break;
          case 42: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return SF;
            } 
            // fall through
          case 337: break;
          case 43: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return ST;
            } 
            // fall through
          case 338: break;
          case 44: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return DS;
            } 
            // fall through
          case 339: break;
          case 45: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return DC;
            } 
            // fall through
          case 340: break;
          case 46: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return DR;
            } 
            // fall through
          case 341: break;
          case 47: 
            { yybegin(IN_OPERAND); return IF;
            } 
            // fall through
          case 342: break;
          case 48: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return OR;
            } 
            // fall through
          case 343: break;
          case 49: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return RS;
            } 
            // fall through
          case 344: break;
          case 50: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_S;
            } 
            // fall through
          case 345: break;
          case 51: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_B;
            } 
            // fall through
          case 346: break;
          case 52: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_W;
            } 
            // fall through
          case 347: break;
          case 53: 
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_L;
            } 
            // fall through
          case 348: break;
          case 54: 
            { return HEX_NUMBER;
            } 
            // fall through
          case 349: break;
          case 55: 
            { return OCT_NUMBER;
            } 
            // fall through
          case 350: break;
          case 56: 
            { return BIN_NUMBER;
            } 
            // fall through
          case 351: break;
          case 57: 
            { return PIPE_PIPE;
            } 
            // fall through
          case 352: break;
          case 58: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_S;
            } 
            // fall through
          case 353: break;
          case 59: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_B;
            } 
            // fall through
          case 354: break;
          case 60: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_W;
            } 
            // fall through
          case 355: break;
          case 61: 
            { if (afterSpaceOrComma()) { return ID; } return DOT_L;
            } 
            // fall through
          case 356: break;
          case 62: 
            { return SP;
            } 
            // fall through
          case 357: break;
          case 63: 
            { return SR;
            } 
            // fall through
          case 358: break;
          case 64: 
            { return ADDRESS_REGISTER;
            } 
            // fall through
          case 359: break;
          case 65: 
            { return DATA_REGISTER;
            } 
            // fall through
          case 360: break;
          case 66: 
            { return PC;
            } 
            // fall through
          case 361: break;
          case 67: 
            { return EQ_EQ;
            } 
            // fall through
          case 362: break;
          case 68: 
            { return SLASH_SLASH;
            } 
            // fall through
          case 363: break;
          case 69: 
            { return EXCLAMATION_EQ;
            } 
            // fall through
          case 364: break;
          case 70: 
            { return AMPERSAND_AMPERSAND;
            } 
            // fall through
          case 365: break;
          case 71: 
            { return LT_EQ;
            } 
            // fall through
          case 366: break;
          case 72: 
            { return LT_LT;
            } 
            // fall through
          case 367: break;
          case 73: 
            { return LT_GT;
            } 
            // fall through
          case 368: break;
          case 74: 
            { return GT_EQ;
            } 
            // fall through
          case 369: break;
          case 75: 
            { return GT_GT;
            } 
            // fall through
          case 370: break;
          case 76: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SLS;
            } 
            // fall through
          case 371: break;
          case 77: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SLE;
            } 
            // fall through
          case 372: break;
          case 78: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SLO;
            } 
            // fall through
          case 373: break;
          case 79: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SLT;
            } 
            // fall through
          case 374: break;
          case 80: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SCS;
            } 
            // fall through
          case 375: break;
          case 81: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SCC;
            } 
            // fall through
          case 376: break;
          case 82: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SEQ;
            } 
            // fall through
          case 377: break;
          case 83: 
            { yybegin(IN_OPERAND); return SET;
            } 
            // fall through
          case 378: break;
          case 84: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SGE;
            } 
            // fall through
          case 379: break;
          case 85: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SGT;
            } 
            // fall through
          case 380: break;
          case 86: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SHS;
            } 
            // fall through
          case 381: break;
          case 87: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SHI;
            } 
            // fall through
          case 382: break;
          case 88: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SMI;
            } 
            // fall through
          case 383: break;
          case 89: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SNE;
            } 
            // fall through
          case 384: break;
          case 90: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SPL;
            } 
            // fall through
          case 385: break;
          case 91: 
            { yybegin(IN_OPERAND); return SPC;
            } 
            // fall through
          case 386: break;
          case 92: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SUB;
            } 
            // fall through
          case 387: break;
          case 93: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SVS;
            } 
            // fall through
          case 388: break;
          case 94: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SVC;
            } 
            // fall through
          case 389: break;
          case 95: 
            { yybegin(AFTER_OPERAND); return BSS;
            } 
            // fall through
          case 390: break;
          case 96: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BSR;
            } 
            // fall through
          case 391: break;
          case 97: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLS;
            } 
            // fall through
          case 392: break;
          case 98: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLE;
            } 
            // fall through
          case 393: break;
          case 99: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLK;
            } 
            // fall through
          case 394: break;
          case 100: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLO;
            } 
            // fall through
          case 395: break;
          case 101: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLT;
            } 
            // fall through
          case 396: break;
          case 102: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BCS;
            } 
            // fall through
          case 397: break;
          case 103: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BCC;
            } 
            // fall through
          case 398: break;
          case 104: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BEQ;
            } 
            // fall through
          case 399: break;
          case 105: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BGE;
            } 
            // fall through
          case 400: break;
          case 106: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BGT;
            } 
            // fall through
          case 401: break;
          case 107: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BHS;
            } 
            // fall through
          case 402: break;
          case 108: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BHI;
            } 
            // fall through
          case 403: break;
          case 109: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BMI;
            } 
            // fall through
          case 404: break;
          case 110: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BNE;
            } 
            // fall through
          case 405: break;
          case 111: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BPL;
            } 
            // fall through
          case 406: break;
          case 112: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BRA;
            } 
            // fall through
          case 407: break;
          case 113: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BVS;
            } 
            // fall through
          case 408: break;
          case 114: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BVC;
            } 
            // fall through
          case 409: break;
          case 115: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return LSL;
            } 
            // fall through
          case 410: break;
          case 116: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return LSR;
            } 
            // fall through
          case 411: break;
          case 117: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return LEA;
            } 
            // fall through
          case 412: break;
          case 118: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ASL;
            } 
            // fall through
          case 413: break;
          case 119: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ASR;
            } 
            // fall through
          case 414: break;
          case 120: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ADD;
            } 
            // fall through
          case 415: break;
          case 121: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return AND;
            } 
            // fall through
          case 416: break;
          case 122: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return CLR;
            } 
            // fall through
          case 417: break;
          case 123: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return CHK;
            } 
            // fall through
          case 418: break;
          case 124: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return CMP;
            } 
            // fall through
          case 419: break;
          case 125: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return DBF;
            } 
            // fall through
          case 420: break;
          case 126: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return DBT;
            } 
            // fall through
          case 421: break;
          case 127: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return DCB;
            } 
            // fall through
          case 422: break;
          case 128: 
            { yybegin(AFTER_OPERAND); return END;
            } 
            // fall through
          case 423: break;
          case 129: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return EOR;
            } 
            // fall through
          case 424: break;
          case 130: 
            { yybegin(IN_OPERAND); return EQU;
            } 
            // fall through
          case 425: break;
          case 131: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return EXG;
            } 
            // fall through
          case 426: break;
          case 132: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return EXT;
            } 
            // fall through
          case 427: break;
          case 133: 
            { yybegin(AFTER_OPERAND); return FAR;
            } 
            // fall through
          case 428: break;
          case 134: 
            { yybegin(IN_OPERAND); return IFB;
            } 
            // fall through
          case 429: break;
          case 135: 
            { yybegin(IN_OPERAND); return IFC;
            } 
            // fall through
          case 430: break;
          case 136: 
            { yybegin(IN_OPERAND); return IFD;
            } 
            // fall through
          case 431: break;
          case 137: 
            { yybegin(IN_OPERAND); return JSR;
            } 
            // fall through
          case 432: break;
          case 138: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return JMP;
            } 
            // fall through
          case 433: break;
          case 139: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return NEG;
            } 
            // fall through
          case 434: break;
          case 140: 
            { yybegin(AFTER_OPERAND); return NOP;
            } 
            // fall through
          case 435: break;
          case 141: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return NOT;
            } 
            // fall through
          case 436: break;
          case 142: 
            { yybegin(AFTER_OPERAND); return ODD;
            } 
            // fall through
          case 437: break;
          case 143: 
            { yybegin(IN_OPERAND); return OPT;
            } 
            // fall through
          case 438: break;
          case 144: 
            { yybegin(IN_OPERAND); return ORG;
            } 
            // fall through
          case 439: break;
          case 145: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ORI;
            } 
            // fall through
          case 440: break;
          case 146: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return PEA;
            } 
            // fall through
          case 441: break;
          case 147: 
            { yybegin(IN_OPERAND); return REG;
            } 
            // fall through
          case 442: break;
          case 148: 
            { yybegin(AFTER_OPERAND); return REM;
            } 
            // fall through
          case 443: break;
          case 149: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ROL;
            } 
            // fall through
          case 444: break;
          case 150: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ROR;
            } 
            // fall through
          case 445: break;
          case 151: 
            { yybegin(AFTER_OPERAND); return RTS;
            } 
            // fall through
          case 446: break;
          case 152: 
            { yybegin(AFTER_OPERAND); return RTE;
            } 
            // fall through
          case 447: break;
          case 153: 
            { yybegin(AFTER_OPERAND); return RTR;
            } 
            // fall through
          case 448: break;
          case 154: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return TST;
            } 
            // fall through
          case 449: break;
          case 155: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return TAS;
            } 
            // fall through
          case 450: break;
          case 156: 
            { yybegin(STRING_DIRECTIVE); return TTL;
            } 
            // fall through
          case 451: break;
          case 157: 
            { return SSP;
            } 
            // fall through
          case 452: break;
          case 158: 
            { return CCR;
            } 
            // fall through
          case 453: break;
          case 159: 
            { return USP;
            } 
            // fall through
          case 454: break;
          case 160: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SBCD;
            } 
            // fall through
          case 455: break;
          case 161: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SWAP;
            } 
            // fall through
          case 456: break;
          case 162: 
            { yybegin(IN_OPERAND); return STOP;
            } 
            // fall through
          case 457: break;
          case 163: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SUBA;
            } 
            // fall through
          case 458: break;
          case 164: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SUBI;
            } 
            // fall through
          case 459: break;
          case 165: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SUBQ;
            } 
            // fall through
          case 460: break;
          case 166: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SUBX;
            } 
            // fall through
          case 461: break;
          case 167: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return BSET;
            } 
            // fall through
          case 462: break;
          case 168: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return BCLR;
            } 
            // fall through
          case 463: break;
          case 169: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return BCHG;
            } 
            // fall through
          case 464: break;
          case 170: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return BTST;
            } 
            // fall through
          case 465: break;
          case 171: 
            { yybegin(IN_OPERAND); return LLEN;
            } 
            // fall through
          case 466: break;
          case 172: 
            { yybegin(AFTER_OPERAND); return LIST;
            } 
            // fall through
          case 467: break;
          case 173: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return LINK;
            } 
            // fall through
          case 468: break;
          case 174: 
            { yybegin(IN_OPERAND); return LOAD;
            } 
            // fall through
          case 469: break;
          case 175: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ABCD;
            } 
            // fall through
          case 470: break;
          case 176: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ADDA;
            } 
            // fall through
          case 471: break;
          case 177: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ADDI;
            } 
            // fall through
          case 472: break;
          case 178: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ADDQ;
            } 
            // fall through
          case 473: break;
          case 179: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ADDX;
            } 
            // fall through
          case 474: break;
          case 180: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ANDI;
            } 
            // fall through
          case 475: break;
          case 181: 
            { yybegin(AFTER_OPERAND); return CSEG;
            } 
            // fall through
          case 476: break;
          case 182: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return CMPA;
            } 
            // fall through
          case 477: break;
          case 183: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return CMPI;
            } 
            // fall through
          case 478: break;
          case 184: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return CMPM;
            } 
            // fall through
          case 479: break;
          case 185: 
            { yybegin(IN_OPERAND); return CNOP;
            } 
            // fall through
          case 480: break;
          case 186: 
            { yybegin(AFTER_OPERAND); return CODE;
            } 
            // fall through
          case 481: break;
          case 187: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DSEG;
            } 
            // fall through
          case 482: break;
          case 188: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBLS;
            } 
            // fall through
          case 483: break;
          case 189: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBLE;
            } 
            // fall through
          case 484: break;
          case 190: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBLO;
            } 
            // fall through
          case 485: break;
          case 191: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBLT;
            } 
            // fall through
          case 486: break;
          case 192: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBCS;
            } 
            // fall through
          case 487: break;
          case 193: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBCC;
            } 
            // fall through
          case 488: break;
          case 194: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBEQ;
            } 
            // fall through
          case 489: break;
          case 195: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBGE;
            } 
            // fall through
          case 490: break;
          case 196: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBGT;
            } 
            // fall through
          case 491: break;
          case 197: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBHS;
            } 
            // fall through
          case 492: break;
          case 198: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBHI;
            } 
            // fall through
          case 493: break;
          case 199: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBMI;
            } 
            // fall through
          case 494: break;
          case 200: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBNE;
            } 
            // fall through
          case 495: break;
          case 201: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBPL;
            } 
            // fall through
          case 496: break;
          case 202: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBRA;
            } 
            // fall through
          case 497: break;
          case 203: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBVS;
            } 
            // fall through
          case 498: break;
          case 204: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBVC;
            } 
            // fall through
          case 499: break;
          case 205: 
            { yybegin(AFTER_OPERAND); return DATA;
            } 
            // fall through
          case 500: break;
          case 206: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DIVS;
            } 
            // fall through
          case 501: break;
          case 207: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DIVU;
            } 
            // fall through
          case 502: break;
          case 208: 
            { yybegin(AFTER_OPERAND); return ELSE;
            } 
            // fall through
          case 503: break;
          case 209: 
            { yybegin(STRING_DIRECTIVE); return ECHO;
            } 
            // fall through
          case 504: break;
          case 210: 
            { yybegin(AFTER_OPERAND); return ENDC;
            } 
            // fall through
          case 505: break;
          case 211: 
            { yybegin(AFTER_OPERAND); return ENDM;
            } 
            // fall through
          case 506: break;
          case 212: 
            { yybegin(AFTER_OPERAND); return ENDR;
            } 
            // fall through
          case 507: break;
          case 213: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return EORI;
            } 
            // fall through
          case 508: break;
          case 214: 
            { yybegin(IN_OPERAND); return EQUR;
            } 
            // fall through
          case 509: break;
          case 215: 
            { yybegin(AFTER_OPERAND); return EREM;
            } 
            // fall through
          case 510: break;
          case 216: 
            { yybegin(AFTER_OPERAND); return EVEN;
            } 
            // fall through
          case 511: break;
          case 217: 
            { yybegin(AFTER_OPERAND); return FAIL;
            } 
            // fall through
          case 512: break;
          case 218: 
            { yybegin(STRING_DIRECTIVE); return IDNT;
            } 
            // fall through
          case 513: break;
          case 219: 
            { yybegin(IN_OPERAND); return IFLE;
            } 
            // fall through
          case 514: break;
          case 220: 
            { yybegin(IN_OPERAND); return IFLT;
            } 
            // fall through
          case 515: break;
          case 221: 
            { yybegin(IN_OPERAND); return IFEQ;
            } 
            // fall through
          case 516: break;
          case 222: 
            { yybegin(IN_OPERAND); return IFGE;
            } 
            // fall through
          case 517: break;
          case 223: 
            { yybegin(IN_OPERAND); return IFGT;
            } 
            // fall through
          case 518: break;
          case 224: 
            { yybegin(IN_OPERAND); return IFMI;
            } 
            // fall through
          case 519: break;
          case 225: 
            { yybegin(IN_OPERAND); return IFNB;
            } 
            // fall through
          case 520: break;
          case 226: 
            { yybegin(IN_OPERAND); return IFNC;
            } 
            // fall through
          case 521: break;
          case 227: 
            { yybegin(IN_OPERAND); return IFND;
            } 
            // fall through
          case 522: break;
          case 228: 
            { yybegin(IN_OPERAND); return IFNE;
            } 
            // fall through
          case 523: break;
          case 229: 
            { yybegin(IN_OPERAND); return IFPL;
            } 
            // fall through
          case 524: break;
          case 230: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return MOVE;
            } 
            // fall through
          case 525: break;
          case 231: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return MULS;
            } 
            // fall through
          case 526: break;
          case 232: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return MULU;
            } 
            // fall through
          case 527: break;
          case 233: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return NBCD;
            } 
            // fall through
          case 528: break;
          case 234: 
            { yybegin(IN_OPERAND); return NEAR;
            } 
            // fall through
          case 529: break;
          case 235: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return NEGX;
            } 
            // fall through
          case 530: break;
          case 236: 
            { yybegin(IN_OPERAND); return PLEN;
            } 
            // fall through
          case 531: break;
          case 237: 
            { yybegin(AFTER_OPERAND); return PAGE;
            } 
            // fall through
          case 532: break;
          case 238: 
            { yybegin(IN_OPERAND); return REPT;
            } 
            // fall through
          case 533: break;
          case 239: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ROXL;
            } 
            // fall through
          case 534: break;
          case 240: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ROXR;
            } 
            // fall through
          case 535: break;
          case 241: 
            { yybegin(AFTER_OPERAND); return TEXT;
            } 
            // fall through
          case 536: break;
          case 242: 
            { yybegin(IN_OPERAND); return TRAP;
            } 
            // fall through
          case 537: break;
          case 243: 
            { yybegin(IN_OPERAND); return UNLK;
            } 
            // fall through
          case 538: break;
          case 244: 
            { yybegin(IN_OPERAND); return XDEF;
            } 
            // fall through
          case 539: break;
          case 245: 
            { yybegin(IN_OPERAND); return XREF;
            } 
            // fall through
          case 540: break;
          case 246: 
            { pushbackDataSize(); return SP;
            } 
            // fall through
          case 541: break;
          case 247: 
            { pushbackDataSize(); return ADDRESS_REGISTER;
            } 
            // fall through
          case 542: break;
          case 248: 
            { pushbackDataSize(); return DATA_REGISTER;
            } 
            // fall through
          case 543: break;
          case 249: 
            { yybegin(AFTER_OPERAND); return BSS_C;
            } 
            // fall through
          case 544: break;
          case 250: 
            { yybegin(AFTER_OPERAND); return BSS_F;
            } 
            // fall through
          case 545: break;
          case 251: 
            { yybegin(IN_OPERAND); return ALIGN;
            } 
            // fall through
          case 546: break;
          case 252: 
            { yybegin(AFTER_OPERAND); return ENDIF;
            } 
            // fall through
          case 547: break;
          case 253: 
            { yybegin(AFTER_OPERAND); return MACRO;
            } 
            // fall through
          case 548: break;
          case 254: 
            { yybegin(AFTER_OPERAND); return MEXIT;
            } 
            // fall through
          case 549: break;
          case 255: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEA;
            } 
            // fall through
          case 550: break;
          case 256: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEM;
            } 
            // fall through
          case 551: break;
          case 257: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEP;
            } 
            // fall through
          case 552: break;
          case 258: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEQ;
            } 
            // fall through
          case 553: break;
          case 259: 
            { yybegin(IN_OPERAND); return RSSET;
            } 
            // fall through
          case 554: break;
          case 260: 
            { yybegin(AFTER_OPERAND); return RESET;
            } 
            // fall through
          case 555: break;
          case 261: 
            { yybegin(AFTER_OPERAND); return TRAPV;
            } 
            // fall through
          case 556: break;
          case 262: 
            { yybegin(AFTER_OPERAND); return CODE_C;
            } 
            // fall through
          case 557: break;
          case 263: 
            { yybegin(AFTER_OPERAND); return CODE_F;
            } 
            // fall through
          case 558: break;
          case 264: 
            { yybegin(AFTER_OPERAND); return DATA_C;
            } 
            // fall through
          case 559: break;
          case 265: 
            { yybegin(AFTER_OPERAND); return DATA_F;
            } 
            // fall through
          case 560: break;
          case 266: 
            { yybegin(AFTER_OPERAND); return ELSEIF;
            } 
            // fall through
          case 561: break;
          case 267: 
            { yybegin(AFTER_OPERAND); return INLINE;
            } 
            // fall through
          case 562: break;
          case 268: 
            { yybegin(STRING_DIRECTIVE); return INCBIN;
            } 
            // fall through
          case 563: break;
          case 269: 
            { yybegin(STRING_DIRECTIVE); return INCDIR;
            } 
            // fall through
          case 564: break;
          case 270: 
            { yybegin(AFTER_OPERAND); return NOLIST;
            } 
            // fall through
          case 565: break;
          case 271: 
            { yybegin(AFTER_OPERAND); return NOPAGE;
            } 
            // fall through
          case 566: break;
          case 272: 
            { yybegin(STRING_DIRECTIVE); return PRINTT;
            } 
            // fall through
          case 567: break;
          case 273: 
            { yybegin(IN_OPERAND); return PRINTV;
            } 
            // fall through
          case 568: break;
          case 274: 
            { yybegin(IN_OPERAND); return SECTION;
            } 
            // fall through
          case 569: break;
          case 275: 
            { yybegin(AFTER_OPERAND); return AC68080;
            } 
            // fall through
          case 570: break;
          case 276: 
            { yybegin(AFTER_OPERAND); return EINLINE;
            } 
            // fall through
          case 571: break;
          case 277: 
            { yybegin(AFTER_OPERAND); return ILLEGAL;
            } 
            // fall through
          case 572: break;
          case 278: 
            { yybegin(STRING_DIRECTIVE); return INCLUDE;
            } 
            // fall through
          case 573: break;
          case 279: 
            { yybegin(IN_OPERAND); return JUMPERR;
            } 
            // fall through
          case 574: break;
          case 280: 
            { yybegin(IN_OPERAND); return JUMPPTR;
            } 
            // fall through
          case 575: break;
          case 281: 
            { yybegin(IN_OPERAND); return MACHINE;
            } 
            // fall through
          case 576: break;
          case 282: 
            { yybegin(AFTER_OPERAND); return MC68010;
            } 
            // fall through
          case 577: break;
          case 283: 
            { yybegin(AFTER_OPERAND); return MC68060;
            } 
            // fall through
          case 578: break;
          case 284: 
            { yybegin(AFTER_OPERAND); return MC68000;
            } 
            // fall through
          case 579: break;
          case 285: 
            { yybegin(AFTER_OPERAND); return MC68020;
            } 
            // fall through
          case 580: break;
          case 286: 
            { yybegin(AFTER_OPERAND); return MC68030;
            } 
            // fall through
          case 581: break;
          case 287: 
            { yybegin(AFTER_OPERAND); return MC68040;
            } 
            // fall through
          case 582: break;
          case 288: 
            { yybegin(AFTER_OPERAND); return RSRESET;
            } 
            // fall through
          case 583: break;
          case 289: 
            { yybegin(IN_OPERAND); return ADDWATCH;
            } 
            // fall through
          case 584: break;
          case 290: 
            { yybegin(IN_OPERAND); return IFMACROD;
            } 
            // fall through
          case 585: break;
          case 291: 
            { yybegin(AFTER_OPERAND); return INITNEAR;
            } 
            // fall through
          case 586: break;
          case 292: 
            { yybegin(IN_OPERAND); return IFMACROND;
            } 
            // fall through
          case 587: break;
          case 293: 
            { yybegin(AFTER_OPERAND); return NEAR_CODE;
            } 
            // fall through
          case 588: break;
          case 294: 
            { yybegin(AFTER_OPERAND); return POPSECTION;
            } 
            // fall through
          case 589: break;
          case 295: 
            { yybegin(AFTER_OPERAND); return PUSHSECTION;
            } 
            // fall through
          case 590: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
