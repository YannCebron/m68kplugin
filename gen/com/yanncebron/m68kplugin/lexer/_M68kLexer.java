/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * Copyright 2021 The Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.yanncebron.m68kplugin.lexer;

import com.intellij.psi.tree.IElementType;

import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.yanncebron.m68kplugin.lang.psi.M68kTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/yann/idea-ultimate/m68kplugin/src/grammar/_M68kLexer.flex</tt>
 */
public class _M68kLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_LABEL = 2;
  public static final int IN_INSTRUCTION = 4;
  public static final int IN_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 3968 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\17\5\1\6\1\7\11\5\1\10\1\11\1\5\1\12\1\13\11\5\1\14\14"+
    "\5\1\15\2\5\1\16\u01e2\5");

  /* The ZZ_CMAP_Y table has 960 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\56\5\1\6\3\5\1\7\6\5\1\6\14\5\1\10\3\5\1\10\3\5\1\10"+
    "\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\2\5\1\7\3"+
    "\5\1\7\2\5\1\6\10\5\1\6\1\5\1\7\72\5\1\6\1\7\11\5\1\10\3\5\1\7\5\5\1\11\5"+
    "\5\1\7\2\5\1\7\4\5\1\11\36\5\1\12\257\5\1\6\24\5\1\7\1\5\1\6\5\5\2\7\2\5\1"+
    "\7\14\5\1\7\130\5\1\7\2\13\52\5\1\6\35\5\1\10\3\5\1\7\1\5\1\14\4\5\1\7\10"+
    "\5\1\7\12\5\1\7\3\5\1\7\13\5\1\7\3\5\1\6\2\5\1\7\15\5\1\6\32\5\1\7\60\5\1"+
    "\6\6\5\1\7\143\5\1\15\1\16\12\5\1\7\65\5");

  /* The ZZ_CMAP_A table has 480 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\4\1\5\1\1\22\0\1\2\1\67\1\21\1\65\1\10\1\14\1\70\1\17\1\73"+
    "\1\74\1\6\1\61\1\60\1\62\1\22\1\63\2\16\6\13\2\7\1\56\1\3\1\71\1\57\1\72\1"+
    "\0\1\12\1\27\1\30\1\31\1\32\1\33\1\26\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1"+
    "\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\2\25\1\75\1\20\1\76"+
    "\1\64\1\23\1\0\1\27\1\30\1\31\1\32\1\33\1\26\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\2\25\1\0\1\15"+
    "\1\0\1\66\6\0\1\4\72\0\12\24\46\0\12\24\14\0\12\24\20\0\12\24\6\0\12\24\16"+
    "\0\2\4\27\0\6\11\57\0\12\24\16\0\62\24");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\1\1\14"+
    "\1\15\1\16\1\17\1\16\1\5\2\1\22\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\2\1\1\34\1\35\1\36\1\37\3\0"+
    "\1\40\1\41\1\42\1\16\3\0\1\43\1\44\1\45"+
    "\1\46\1\47\30\20\1\50\2\20\1\51\1\20\1\52"+
    "\10\20\1\53\22\20\1\54\1\20\1\55\4\20\1\56"+
    "\1\20\1\57\10\20\1\60\1\61\1\20\1\62\13\20"+
    "\1\63\1\64\1\20\1\65\1\20\1\66\1\67\1\70"+
    "\1\71\2\20\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\20\1\111\1\112\1\20\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\4\20\1\121\11\20\1\122\1\20"+
    "\1\123\4\20\1\124\1\125\1\126\2\20\1\127\1\130"+
    "\1\131\1\132\1\133\11\20\1\134\1\135\1\20\1\136"+
    "\3\20\1\137\1\140\5\20\1\141\1\20\1\142\1\143"+
    "\1\144\1\145\1\146\1\147\1\20\1\150\1\20\1\151"+
    "\2\20\1\152\1\153\3\20\1\154\1\155\1\156\1\20"+
    "\1\157\1\160\1\20\1\161\1\162\1\163\1\164\1\165"+
    "\1\166\1\167\1\170\1\171\1\172\1\173\1\174\1\175"+
    "\1\176\1\177\1\20\1\200\1\201\1\202\1\20\1\203"+
    "\2\20\1\204\1\20\1\205\2\20\1\206\1\207\1\210"+
    "\1\211\1\20\1\212\1\20\1\213\1\214\1\215\1\216"+
    "\1\20\1\217\1\220\1\221\1\222\1\223\1\224\1\225"+
    "\1\226\1\227\1\230\1\231\1\232\1\233\1\234\1\235"+
    "\1\236\1\237\1\240\1\241\1\242\1\243\1\244\1\245"+
    "\1\246\1\247\1\250\1\251\1\252\1\20\1\253\1\254"+
    "\1\20\1\255\1\256\1\257\1\260\1\261\1\262\1\263"+
    "\1\264\1\265\1\266\1\267\1\20\1\270\1\271\1\272"+
    "\1\273\1\274\1\275\6\20\1\276\1\277\1\300\2\20"+
    "\1\301\1\302\1\303\1\304\1\305\2\20\1\306\1\307"+
    "\1\310\1\20\1\311\1\312\2\20\1\313\1\20\1\314"+
    "\1\315\1\316\1\317\1\320\1\321\1\322\1\323\1\324"+
    "\1\325\1\326\1\20\1\327\1\330\1\331\4\20\1\332"+
    "\10\20\1\333\1\334\1\335\1\336\1\337\1\340\2\20"+
    "\1\341\1\20\1\342\1\20\1\343\1\20\1\344\1\345"+
    "\1\346\1\347\1\20\1\350\2\20\1\351\1\352\1\20"+
    "\1\353\2\20\1\354\1\355\3\20\1\356\1\20\1\357"+
    "\1\360\1\361\1\362\1\363\1\364\1\365\1\366\1\20"+
    "\1\367";

  private static int [] zzUnpackAction() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\374\0\u01f8\0\u0237\0\374\0\374\0\u0276\0\374"+
    "\0\u02b5\0\u02f4\0\u0333\0\u0372\0\374\0\u03b1\0\374\0\u03f0"+
    "\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8"+
    "\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0"+
    "\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\374\0\374\0\374"+
    "\0\374\0\374\0\374\0\374\0\374\0\374\0\374\0\374"+
    "\0\u095a\0\u0999\0\374\0\374\0\374\0\374\0\u01b9\0\u01f8"+
    "\0\u04ad\0\u02f4\0\u0333\0\u0372\0\374\0\u09d8\0\u0a17\0\u046e"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u0a56\0\u0a95\0\u0ad4"+
    "\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc"+
    "\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4"+
    "\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u04ec\0\u103e\0\u107d"+
    "\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275"+
    "\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d"+
    "\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665"+
    "\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d"+
    "\0\u04ec\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u04ec"+
    "\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u04ec\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88"+
    "\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\374"+
    "\0\374\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u207c\0\u20bb\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u20fa\0\u04ec\0\u2139\0\u2178\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u04ec"+
    "\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab"+
    "\0\u24ea\0\u04ec\0\u2529\0\u04ec\0\u2568\0\u25a7\0\u25e6\0\u2625"+
    "\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da"+
    "\0\u2919\0\u2958\0\u2997\0\u04ec\0\u04ec\0\u29d6\0\u04ec\0\u2a15"+
    "\0\u2a54\0\u2a93\0\u04ec\0\u04ec\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f"+
    "\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u04ec\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u2cca\0\u04ec\0\u2d09\0\u04ec\0\u2d48\0\u2d87\0\u04ec"+
    "\0\u04ec\0\u2dc6\0\u2e05\0\u2e44\0\u04ec\0\u04ec\0\u04ec\0\u2e83"+
    "\0\u04ec\0\u04ec\0\u2ec2\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u2f01\0\u2f40\0\u04ec\0\u04ec\0\u2f7f\0\u04ec"+
    "\0\u2fbe\0\u2ffd\0\u04ec\0\u303c\0\u04ec\0\u307b\0\u30ba\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u30f9\0\u04ec\0\u3138\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u3177\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u31b6\0\u04ec\0\u31f5\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u3234"+
    "\0\u3273\0\u04ec\0\u32b2\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u32f1\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u3330\0\u336f\0\u33ae"+
    "\0\u33ed\0\u342c\0\u346b\0\u04ec\0\u04ec\0\u04ec\0\u34aa\0\u34e9"+
    "\0\u3528\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u3567\0\u35a6\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u35e5\0\u04ec\0\u04ec\0\u3624\0\u3663\0\u04ec"+
    "\0\u36a2\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u36e1\0\u04ec\0\u04ec\0\u04ec\0\u3720\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u375f\0\u379e\0\u37dd\0\u381c\0\u04ec\0\u385b\0\u389a\0\u38d9"+
    "\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u3a53\0\u3a92\0\u04ec\0\u3ad1\0\u04ec"+
    "\0\u3b10\0\u04ec\0\u3b4f\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u3b8e"+
    "\0\u04ec\0\u3bcd\0\u3c0c\0\u04ec\0\u04ec\0\u3c4b\0\u04ec\0\u3c8a"+
    "\0\u3cc9\0\u04ec\0\u04ec\0\u3d08\0\u3d47\0\u3d86\0\u04ec\0\u3dc5"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u3e04\0\u04ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\5\1\7\1\10\1\11"+
    "\3\5\1\11\2\5\1\11\3\5\1\12\1\13\1\11"+
    "\31\14\22\5\1\6\1\7\2\5\1\7\50\5\1\15"+
    "\1\16\20\5\1\6\1\17\1\10\1\5\1\17\1\20"+
    "\1\21\1\22\1\5\1\23\1\21\1\24\1\25\1\21"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\34\1\42\1\43\1\34"+
    "\1\44\1\45\1\46\1\47\1\50\1\34\1\51\1\52"+
    "\1\53\1\54\2\34\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\5\1\6\75\5"+
    "\101\0\1\7\1\10\1\0\1\7\1\10\70\0\1\10"+
    "\1\0\2\10\2\0\71\10\7\0\1\77\3\0\1\77"+
    "\2\0\1\77\5\0\1\77\31\14\30\0\1\77\3\0"+
    "\1\77\2\0\1\77\4\0\1\100\1\77\31\14\30\0"+
    "\1\14\3\0\1\14\2\0\1\14\4\0\33\14\23\0"+
    "\1\17\2\0\1\17\100\0\1\21\3\0\1\21\2\0"+
    "\1\21\5\0\1\101\31\34\30\0\1\102\1\0\1\102"+
    "\1\0\1\102\2\0\1\102\5\0\1\102\1\0\6\102"+
    "\56\0\1\103\2\0\1\103\75\0\2\104\60\0\1\26"+
    "\1\0\15\26\1\105\1\106\56\26\1\30\1\0\16\30"+
    "\1\107\1\105\55\30\7\0\1\101\3\0\1\101\2\0"+
    "\1\101\4\0\1\110\1\101\3\34\1\111\10\34\1\112"+
    "\6\34\1\113\3\34\1\114\1\34\30\0\1\101\3\0"+
    "\1\101\2\0\1\101\4\0\1\110\1\101\31\34\30\0"+
    "\1\101\3\0\1\101\2\0\1\101\5\0\1\101\31\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\33\34"+
    "\30\0\1\34\3\0\1\115\2\0\1\115\4\0\5\34"+
    "\1\116\1\34\1\117\6\34\1\120\1\34\1\121\4\34"+
    "\1\122\5\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\6\34\1\123\1\34\1\124\1\125\1\126\3\34"+
    "\1\127\1\130\1\131\1\34\1\132\1\34\1\133\1\134"+
    "\1\135\1\34\1\136\2\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\6\34\1\137\3\34\1\140\3\34"+
    "\1\141\1\142\1\143\1\144\3\34\1\145\5\34\30\0"+
    "\1\34\3\0\1\146\2\0\1\146\4\0\4\34\1\147"+
    "\1\150\1\151\4\34\1\152\11\34\1\153\5\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\13\34\1\154"+
    "\2\34\1\155\1\34\1\156\1\157\1\34\1\160\1\161"+
    "\3\34\1\162\1\34\1\163\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\3\34\1\164\12\34\1\165\1\34"+
    "\1\166\12\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\17\34\1\167\5\34\1\170\1\34\1\171\3\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\10\34"+
    "\1\172\2\34\1\173\2\34\1\174\6\34\1\175\5\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\4\34"+
    "\1\176\3\34\1\177\10\34\1\200\5\34\1\201\3\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\5\34"+
    "\1\202\2\34\1\203\10\34\1\204\11\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\7\34\1\205\12\34"+
    "\1\206\1\34\1\207\6\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\4\34\1\210\1\34\1\211\1\34"+
    "\1\212\5\34\1\213\14\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\10\34\1\214\10\34\1\215\3\34"+
    "\1\216\1\217\4\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\3\34\1\220\1\34\1\221\1\222\1\34"+
    "\1\223\1\224\1\225\3\34\1\226\1\227\1\230\1\34"+
    "\1\231\1\34\1\232\1\233\1\234\1\235\1\236\1\237"+
    "\1\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\4\34\1\240\3\34\1\241\13\34\1\242\1\243\5\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\20\34"+
    "\1\244\4\34\1\245\5\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\7\34\1\246\14\34\1\247\6\34"+
    "\112\0\1\250\77\0\1\251\4\0\1\26\1\0\75\26"+
    "\1\30\1\0\75\30\7\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\6\34\1\252\24\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\7\34\1\253\23\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\13\34\1\254"+
    "\17\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\7\34\1\255\23\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\16\34\1\256\5\34\1\257\6\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\6\34\1\260"+
    "\3\34\1\261\3\34\1\262\6\34\1\263\5\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\23\34\1\264"+
    "\7\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\10\34\1\265\15\34\1\266\4\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\13\34\1\267\11\34\1\270"+
    "\5\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\10\34\1\271\4\34\1\272\3\34\1\273\3\34\1\274"+
    "\1\275\4\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\13\34\1\276\17\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\10\34\1\277\22\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\16\34\1\300\14\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\4\34"+
    "\1\301\26\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\10\34\1\302\13\34\1\303\1\304\5\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\25\34\1\305"+
    "\5\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\6\34\1\306\16\34\1\307\5\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\24\34\1\310\6\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\15\34\1\311"+
    "\15\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\24\34\1\312\6\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\22\34\1\313\10\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\21\34\1\314\11\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\7\34\1\315"+
    "\23\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\10\34\1\316\22\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\26\34\1\317\4\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\3\34\1\320\2\34\1\321"+
    "\1\34\1\322\1\323\1\324\3\34\1\325\1\326\1\327"+
    "\1\34\1\330\1\34\1\331\1\34\1\332\1\34\1\333"+
    "\2\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\5\34\1\334\25\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\30\34\1\335\2\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\10\34\1\336\22\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\20\34\1\337"+
    "\12\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\25\34\1\340\5\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\7\34\1\341\23\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\24\34\1\342\6\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\27\34\1\343"+
    "\3\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\10\34\1\344\22\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\10\34\1\345\22\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\11\34\1\346\14\34\1\347"+
    "\4\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\5\34\1\350\1\351\1\352\1\353\1\354\4\34\1\355"+
    "\1\356\1\357\1\34\1\360\10\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\16\34\1\361\14\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\6\34\1\362"+
    "\7\34\1\363\14\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\22\34\1\364\10\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\24\34\1\365\6\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\17\34\1\366"+
    "\13\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\4\34\1\367\26\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\20\34\1\370\4\34\1\371\5\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\10\34\1\372"+
    "\22\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\16\34\1\373\5\34\1\374\6\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\6\34\1\375\24\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\32\34\1\376"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\30\34"+
    "\1\377\2\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\16\34\1\u0100\14\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\6\34\1\u0101\24\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\11\34\1\u0102\21\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\16\34"+
    "\1\u0103\3\34\1\u0104\3\34\1\u0105\4\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\7\34\1\u0106\23\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\26\34"+
    "\1\u0107\4\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\11\34\1\u0108\1\34\1\u0109\17\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\11\34\1\u010a\21\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\4\34"+
    "\1\u010b\26\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\10\34\1\u010c\22\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\17\34\1\u010d\2\34\1\u010e\2\34"+
    "\1\u010f\5\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\16\34\1\u0110\5\34\1\u0111\5\34\1\u0112\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\24\34\1\u0113"+
    "\1\u0114\5\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\10\34\1\u0115\13\34\1\u0116\1\u0117\5\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\6\34\1\u0118"+
    "\24\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\6\34\1\u0119\16\34\1\u011a\5\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\6\34\1\u011b\14\34\1\u011c"+
    "\2\34\1\u011d\4\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\10\34\1\u011e\15\34\1\u011f\4\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\13\34\1\u0120"+
    "\11\34\1\u0121\5\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\10\34\1\u0122\10\34\1\u0123\3\34\1\u0124"+
    "\1\u0125\4\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\13\34\1\u0126\17\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\10\34\1\u0127\22\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\6\34\1\u0128\7\34"+
    "\1\u0129\14\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\22\34\1\u012a\10\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\21\34\1\u012b\11\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\5\34\1\u012c\25\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\6\34"+
    "\1\u012d\16\34\1\u012e\5\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\4\34\1\u012f\26\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\25\34\1\u0130\5\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\32\34"+
    "\1\u0131\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\4\34\1\u0132\26\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\26\34\1\u0133\4\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\16\34\1\u0134\14\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\22\34\1\u0135"+
    "\10\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\10\34\1\u0136\22\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\10\34\1\u0137\22\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\7\34\1\u0138\23\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\4\34\1\u0139"+
    "\6\34\1\u013a\7\34\1\u013b\5\34\1\u013c\1\u013d\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\11\34\1\u013e"+
    "\21\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\13\34\1\u013f\17\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\11\34\1\u0140\21\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\24\34\1\u0141\6\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\26\34\1\u0142"+
    "\4\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\1\u0143\32\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\26\34\1\u0144\4\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\4\34\1\u0145\6\34\1\u0146\3\34"+
    "\1\u0147\13\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\22\34\1\u0148\10\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\10\34\1\u0149\22\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\11\34\1\u014a\21\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\4\34"+
    "\1\u014b\26\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\6\34\1\u014c\16\34\1\u014d\5\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\23\34\1\u014e\7\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\10\34"+
    "\1\u014f\15\34\1\u0150\4\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\13\34\1\u0151\11\34\1\u0152\5\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\10\34"+
    "\1\u0153\10\34\1\u0154\3\34\1\u0155\1\u0156\4\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\13\34\1\u0157"+
    "\17\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\10\34\1\u0158\22\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\16\34\1\u0159\14\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\4\34\1\u015a\26\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\6\34\1\u015b"+
    "\16\34\1\u015c\5\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\25\34\1\u015d\1\34\1\u015e\3\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\11\34\1\u015f"+
    "\21\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\16\34\1\u0160\14\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\10\34\1\u0161\22\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\6\34\1\u0162\4\34\1\u0163"+
    "\3\34\1\u0164\4\34\1\u0165\6\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\13\34\1\u0166\17\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\24\34\1\u0167"+
    "\6\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\17\34\1\u0168\13\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\20\34\1\u0169\12\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\23\34\1\u016a\7\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\10\34\1\u016b"+
    "\15\34\1\u016c\4\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\10\34\1\u016d\15\34\1\u016e\4\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\4\34\1\u016f"+
    "\6\34\1\u0170\17\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\5\34\1\u0171\1\u0172\1\u0173\1\u0174\22\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\16\34"+
    "\1\u0175\14\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\10\34\1\u0176\22\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\5\34\1\u0177\1\34\1\u0178\6\34"+
    "\1\u0179\14\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\13\34\1\u017a\17\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\22\34\1\u017b\10\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\15\34\1\u017c\15\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\26\34"+
    "\1\u017d\4\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\20\34\1\u017e\12\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\24\34\1\u017f\6\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\13\34\1\u0180\17\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\10\34"+
    "\1\u0181\22\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\25\34\1\u0182\1\34\1\u0183\3\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\7\34\1\u0184\23\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\32\34"+
    "\1\u0185\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\13\34\1\u0186\17\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\4\34\1\u0187\26\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\10\34\1\u0188\22\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\20\34\1\u0189"+
    "\12\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\26\34\1\u018a\4\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\10\34\1\u018b\22\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\16\34\1\u018c\5\34\1\u018d"+
    "\6\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\10\34\1\u018e\22\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\10\34\1\u018f\22\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\7\34\1\u0190\23\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\26\34\1\u0191"+
    "\4\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\22\34\1\u0192\10\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\4\34\1\u0193\6\34\1\u0194\7\34\1\u0195"+
    "\6\34\1\u0196\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\22\34\1\u0197\10\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\26\34\1\u0198\4\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\22\34\1\u0199\10\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\15\34"+
    "\1\u019a\15\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\3\34\1\u019b\27\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\3\34\1\u019c\27\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\4\34\1\u019d\26\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\20\34"+
    "\1\u019e\12\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\3\34\1\u019f\2\34\1\u01a0\24\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\1\u01a1\32\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\1\u01a2\32\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\13\34"+
    "\1\u01a3\17\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\13\34\1\u01a4\17\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\3\34\1\u01a5\27\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\6\34\1\u01a6\24\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\11\34"+
    "\1\u01a7\21\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\13\34\1\u01a8\17\34\30\0\1\34\3\0\1\34"+
    "\2\0\1\34\4\0\13\34\1\u01a9\17\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\27\34\1\u01aa\3\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\20\34"+
    "\1\u01ab\12\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\10\34\1\u01ac\11\34\1\u01ad\10\34\30\0\1\34"+
    "\3\0\1\34\2\0\1\34\4\0\21\34\1\u01ae\11\34"+
    "\30\0\1\34\3\0\1\34\2\0\1\34\4\0\26\34"+
    "\1\u01af\4\34\30\0\1\34\3\0\1\34\2\0\1\34"+
    "\4\0\4\34\1\u01b0\12\34\1\u01b1\2\34\1\u01b2\1\u01b3"+
    "\7\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\25\34\1\u01b4\5\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\11\34\1\u01b5\21\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\26\34\1\u01b6\4\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\25\34\1\u01b7"+
    "\5\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\26\34\1\u01b8\4\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\13\34\1\u01b9\17\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\30\34\1\u01ba\2\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\26\34\1\u01bb"+
    "\4\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\3\34\1\u01bc\2\34\1\u01bd\24\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\3\34\1\u01be\2\34\1\u01bf"+
    "\24\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\20\34\1\u01c0\12\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\3\34\1\u01c1\27\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\24\34\1\u01c2\6\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\4\34\1\u01c3"+
    "\26\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\20\34\1\u01c4\12\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\24\34\1\u01c5\6\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\7\34\1\u01c6\23\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\10\34\1\u01c7"+
    "\22\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\24\34\1\u01c8\6\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\26\34\1\u01c9\4\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\26\34\1\u01ca\4\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\10\34\1\u01cb"+
    "\22\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\10\34\1\u01cc\22\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\21\34\1\u01cd\11\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\6\34\1\u01ce\24\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\10\34\1\u01cf"+
    "\22\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\21\34\1\u01d0\11\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\16\34\1\u01d1\14\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\10\34\1\u01d2\22\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\24\34\1\u01d3"+
    "\6\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\24\34\1\u01d4\6\34\30\0\1\34\3\0\1\34\2\0"+
    "\1\34\4\0\26\34\1\u01d5\4\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\20\34\1\u01d6\12\34\30\0"+
    "\1\34\3\0\1\34\2\0\1\34\4\0\12\34\1\u01d7"+
    "\20\34\30\0\1\34\3\0\1\34\2\0\1\34\4\0"+
    "\7\34\1\u01d8\10\34\1\u01d9\12\34\30\0\1\34\3\0"+
    "\1\34\2\0\1\34\4\0\7\34\1\u01da\23\34\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15939];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\3\1\1\11\2\1\2\11\1\1\1\11"+
    "\4\1\1\11\1\1\1\11\26\1\13\11\2\1\4\11"+
    "\3\0\3\1\1\11\3\0\137\1\2\11\u0131\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int branchIdMode;

  public _M68kLexer() {
    this((java.io.Reader)null);
  }

  public boolean isBranchIdMode() {
    return branchIdMode > 1;
  }

  public void clearBranchIdMode(){
    branchIdMode = 0;
  }

  public void incBranchIdMode() {
    branchIdMode++;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _M68kLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 248: break;
          case 2: 
            { yybegin(YYINITIAL); return LINEFEED;
            } 
            // fall through
          case 249: break;
          case 3: 
            { clearBranchIdMode(); yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            } 
            // fall through
          case 250: break;
          case 4: 
            { yybegin(IN_COMMENT); return COMMENT;
            } 
            // fall through
          case 251: break;
          case 5: 
            { return DOT;
            } 
            // fall through
          case 252: break;
          case 6: 
            { yybegin(IN_LABEL); return ID;
            } 
            // fall through
          case 253: break;
          case 7: 
            { clearBranchIdMode(); yybegin(IN_INSTRUCTION); return COLON;
            } 
            // fall through
          case 254: break;
          case 8: 
            { clearBranchIdMode(); yybegin(IN_INSTRUCTION); return EQ;
            } 
            // fall through
          case 255: break;
          case 9: 
            { incBranchIdMode();  return WHITE_SPACE;
            } 
            // fall through
          case 256: break;
          case 10: 
            { return MUL;
            } 
            // fall through
          case 257: break;
          case 11: 
            { clearBranchIdMode(); return DEC_NUMBER;
            } 
            // fall through
          case 258: break;
          case 12: 
            { return PERCENT;
            } 
            // fall through
          case 259: break;
          case 13: 
            { return PIPE;
            } 
            // fall through
          case 260: break;
          case 14: 
            { return STRING;
            } 
            // fall through
          case 261: break;
          case 15: 
            { return BACKSLASH;
            } 
            // fall through
          case 262: break;
          case 16: 
            { return ID;
            } 
            // fall through
          case 263: break;
          case 17: 
            { return COLON;
            } 
            // fall through
          case 264: break;
          case 18: 
            { return EQ;
            } 
            // fall through
          case 265: break;
          case 19: 
            { return COMMA;
            } 
            // fall through
          case 266: break;
          case 20: 
            { return PLUS;
            } 
            // fall through
          case 267: break;
          case 21: 
            { return MINUS;
            } 
            // fall through
          case 268: break;
          case 22: 
            { return DIV;
            } 
            // fall through
          case 269: break;
          case 23: 
            { return POW;
            } 
            // fall through
          case 270: break;
          case 24: 
            { clearBranchIdMode(); return HASH;
            } 
            // fall through
          case 271: break;
          case 25: 
            { return TILDE;
            } 
            // fall through
          case 272: break;
          case 26: 
            { return EXCLAMATION;
            } 
            // fall through
          case 273: break;
          case 27: 
            { return AMPERSAND;
            } 
            // fall through
          case 274: break;
          case 28: 
            { clearBranchIdMode(); return L_PAREN;
            } 
            // fall through
          case 275: break;
          case 29: 
            { return R_PAREN;
            } 
            // fall through
          case 276: break;
          case 30: 
            { clearBranchIdMode(); return L_BRACKET;
            } 
            // fall through
          case 277: break;
          case 31: 
            { return R_BRACKET;
            } 
            // fall through
          case 278: break;
          case 32: 
            { clearBranchIdMode(); return HEX_NUMBER;
            } 
            // fall through
          case 279: break;
          case 33: 
            { clearBranchIdMode(); return OCT_NUMBER;
            } 
            // fall through
          case 280: break;
          case 34: 
            { clearBranchIdMode(); return BIN_NUMBER;
            } 
            // fall through
          case 281: break;
          case 35: 
            { if (isBranchIdMode()) return ID; incBranchIdMode(); return DOT_B;
            } 
            // fall through
          case 282: break;
          case 36: 
            { if (isBranchIdMode()) return ID; incBranchIdMode(); return DOT_L;
            } 
            // fall through
          case 283: break;
          case 37: 
            { if (isBranchIdMode()) return ID; incBranchIdMode(); return DOT_S;
            } 
            // fall through
          case 284: break;
          case 38: 
            { if (isBranchIdMode()) return ID; incBranchIdMode(); return DOT_W;
            } 
            // fall through
          case 285: break;
          case 39: 
            { return ADDRESS_REGISTER;
            } 
            // fall through
          case 286: break;
          case 40: 
            { return DATA_REGISTER;
            } 
            // fall through
          case 287: break;
          case 41: 
            { return DC;
            } 
            // fall through
          case 288: break;
          case 42: 
            { return DS;
            } 
            // fall through
          case 289: break;
          case 43: 
            { return IF;
            } 
            // fall through
          case 290: break;
          case 44: 
            { return OR;
            } 
            // fall through
          case 291: break;
          case 45: 
            { return PC;
            } 
            // fall through
          case 292: break;
          case 46: 
            { return RS;
            } 
            // fall through
          case 293: break;
          case 47: 
            { return SF;
            } 
            // fall through
          case 294: break;
          case 48: 
            { return SP;
            } 
            // fall through
          case 295: break;
          case 49: 
            { return SR;
            } 
            // fall through
          case 296: break;
          case 50: 
            { return ST;
            } 
            // fall through
          case 297: break;
          case 51: 
            { return SHIFT_L;
            } 
            // fall through
          case 298: break;
          case 52: 
            { return SHIFT_R;
            } 
            // fall through
          case 299: break;
          case 53: 
            { return ADD;
            } 
            // fall through
          case 300: break;
          case 54: 
            { return AND;
            } 
            // fall through
          case 301: break;
          case 55: 
            { return ASL;
            } 
            // fall through
          case 302: break;
          case 56: 
            { return ASR;
            } 
            // fall through
          case 303: break;
          case 57: 
            { incBranchIdMode(); return BCC;
            } 
            // fall through
          case 304: break;
          case 58: 
            { incBranchIdMode(); return BCS;
            } 
            // fall through
          case 305: break;
          case 59: 
            { incBranchIdMode(); return BEQ;
            } 
            // fall through
          case 306: break;
          case 60: 
            { incBranchIdMode(); return BGE;
            } 
            // fall through
          case 307: break;
          case 61: 
            { incBranchIdMode(); return BGT;
            } 
            // fall through
          case 308: break;
          case 62: 
            { incBranchIdMode(); return BHI;
            } 
            // fall through
          case 309: break;
          case 63: 
            { incBranchIdMode(); return BHS;
            } 
            // fall through
          case 310: break;
          case 64: 
            { incBranchIdMode(); return BLE;
            } 
            // fall through
          case 311: break;
          case 65: 
            { return BLK;
            } 
            // fall through
          case 312: break;
          case 66: 
            { incBranchIdMode(); return BLO;
            } 
            // fall through
          case 313: break;
          case 67: 
            { incBranchIdMode(); return BLS;
            } 
            // fall through
          case 314: break;
          case 68: 
            { incBranchIdMode(); return BLT;
            } 
            // fall through
          case 315: break;
          case 69: 
            { incBranchIdMode(); return BMI;
            } 
            // fall through
          case 316: break;
          case 70: 
            { incBranchIdMode(); return BNE;
            } 
            // fall through
          case 317: break;
          case 71: 
            { incBranchIdMode(); return BPL;
            } 
            // fall through
          case 318: break;
          case 72: 
            { incBranchIdMode(); return BRA;
            } 
            // fall through
          case 319: break;
          case 73: 
            { return BSR;
            } 
            // fall through
          case 320: break;
          case 74: 
            { return BSS;
            } 
            // fall through
          case 321: break;
          case 75: 
            { incBranchIdMode(); return BVC;
            } 
            // fall through
          case 322: break;
          case 76: 
            { incBranchIdMode(); return BVS;
            } 
            // fall through
          case 323: break;
          case 77: 
            { return CCR;
            } 
            // fall through
          case 324: break;
          case 78: 
            { return CHK;
            } 
            // fall through
          case 325: break;
          case 79: 
            { return CLR;
            } 
            // fall through
          case 326: break;
          case 80: 
            { return CMP;
            } 
            // fall through
          case 327: break;
          case 81: 
            { incBranchIdMode(); return DBF;
            } 
            // fall through
          case 328: break;
          case 82: 
            { incBranchIdMode(); return DBT;
            } 
            // fall through
          case 329: break;
          case 83: 
            { return DCB;
            } 
            // fall through
          case 330: break;
          case 84: 
            { return END;
            } 
            // fall through
          case 331: break;
          case 85: 
            { return EOR;
            } 
            // fall through
          case 332: break;
          case 86: 
            { return EQU;
            } 
            // fall through
          case 333: break;
          case 87: 
            { return EXG;
            } 
            // fall through
          case 334: break;
          case 88: 
            { return EXT;
            } 
            // fall through
          case 335: break;
          case 89: 
            { return IFB;
            } 
            // fall through
          case 336: break;
          case 90: 
            { return IFC;
            } 
            // fall through
          case 337: break;
          case 91: 
            { return IFD;
            } 
            // fall through
          case 338: break;
          case 92: 
            { return JMP;
            } 
            // fall through
          case 339: break;
          case 93: 
            { return JSR;
            } 
            // fall through
          case 340: break;
          case 94: 
            { return LEA;
            } 
            // fall through
          case 341: break;
          case 95: 
            { return LSL;
            } 
            // fall through
          case 342: break;
          case 96: 
            { return LSR;
            } 
            // fall through
          case 343: break;
          case 97: 
            { return NEG;
            } 
            // fall through
          case 344: break;
          case 98: 
            { return NOP;
            } 
            // fall through
          case 345: break;
          case 99: 
            { return NOT;
            } 
            // fall through
          case 346: break;
          case 100: 
            { return ODD;
            } 
            // fall through
          case 347: break;
          case 101: 
            { return OPT;
            } 
            // fall through
          case 348: break;
          case 102: 
            { return ORG;
            } 
            // fall through
          case 349: break;
          case 103: 
            { return ORI;
            } 
            // fall through
          case 350: break;
          case 104: 
            { return PEA;
            } 
            // fall through
          case 351: break;
          case 105: 
            { return REM;
            } 
            // fall through
          case 352: break;
          case 106: 
            { return ROL;
            } 
            // fall through
          case 353: break;
          case 107: 
            { return ROR;
            } 
            // fall through
          case 354: break;
          case 108: 
            { return RTE;
            } 
            // fall through
          case 355: break;
          case 109: 
            { return RTR;
            } 
            // fall through
          case 356: break;
          case 110: 
            { return RTS;
            } 
            // fall through
          case 357: break;
          case 111: 
            { return SCC;
            } 
            // fall through
          case 358: break;
          case 112: 
            { return SCS;
            } 
            // fall through
          case 359: break;
          case 113: 
            { return SEQ;
            } 
            // fall through
          case 360: break;
          case 114: 
            { return SET;
            } 
            // fall through
          case 361: break;
          case 115: 
            { return SGE;
            } 
            // fall through
          case 362: break;
          case 116: 
            { return SGT;
            } 
            // fall through
          case 363: break;
          case 117: 
            { return SHI;
            } 
            // fall through
          case 364: break;
          case 118: 
            { return SHS;
            } 
            // fall through
          case 365: break;
          case 119: 
            { return SLE;
            } 
            // fall through
          case 366: break;
          case 120: 
            { return SLO;
            } 
            // fall through
          case 367: break;
          case 121: 
            { return SLS;
            } 
            // fall through
          case 368: break;
          case 122: 
            { return SLT;
            } 
            // fall through
          case 369: break;
          case 123: 
            { return SMI;
            } 
            // fall through
          case 370: break;
          case 124: 
            { return SNE;
            } 
            // fall through
          case 371: break;
          case 125: 
            { return SPC;
            } 
            // fall through
          case 372: break;
          case 126: 
            { return SPL;
            } 
            // fall through
          case 373: break;
          case 127: 
            { return SSP;
            } 
            // fall through
          case 374: break;
          case 128: 
            { return SUB;
            } 
            // fall through
          case 375: break;
          case 129: 
            { return SVC;
            } 
            // fall through
          case 376: break;
          case 130: 
            { return SVS;
            } 
            // fall through
          case 377: break;
          case 131: 
            { return TAS;
            } 
            // fall through
          case 378: break;
          case 132: 
            { return TST;
            } 
            // fall through
          case 379: break;
          case 133: 
            { return USP;
            } 
            // fall through
          case 380: break;
          case 134: 
            { return ABCD;
            } 
            // fall through
          case 381: break;
          case 135: 
            { return ADDA;
            } 
            // fall through
          case 382: break;
          case 136: 
            { return ADDI;
            } 
            // fall through
          case 383: break;
          case 137: 
            { return ADDQ;
            } 
            // fall through
          case 384: break;
          case 138: 
            { return ADDX;
            } 
            // fall through
          case 385: break;
          case 139: 
            { return ANDI;
            } 
            // fall through
          case 386: break;
          case 140: 
            { return BCHG;
            } 
            // fall through
          case 387: break;
          case 141: 
            { return BCLR;
            } 
            // fall through
          case 388: break;
          case 142: 
            { return BSET;
            } 
            // fall through
          case 389: break;
          case 143: 
            { return BTST;
            } 
            // fall through
          case 390: break;
          case 144: 
            { return CMPA;
            } 
            // fall through
          case 391: break;
          case 145: 
            { return CMPI;
            } 
            // fall through
          case 392: break;
          case 146: 
            { return CMPM;
            } 
            // fall through
          case 393: break;
          case 147: 
            { return CNOP;
            } 
            // fall through
          case 394: break;
          case 148: 
            { return CODE;
            } 
            // fall through
          case 395: break;
          case 149: 
            { return CSEG;
            } 
            // fall through
          case 396: break;
          case 150: 
            { return DATA;
            } 
            // fall through
          case 397: break;
          case 151: 
            { incBranchIdMode(); return DBCC;
            } 
            // fall through
          case 398: break;
          case 152: 
            { incBranchIdMode(); return DBCS;
            } 
            // fall through
          case 399: break;
          case 153: 
            { incBranchIdMode(); return DBEQ;
            } 
            // fall through
          case 400: break;
          case 154: 
            { incBranchIdMode(); return DBGE;
            } 
            // fall through
          case 401: break;
          case 155: 
            { incBranchIdMode(); return DBGT;
            } 
            // fall through
          case 402: break;
          case 156: 
            { incBranchIdMode(); return DBHI;
            } 
            // fall through
          case 403: break;
          case 157: 
            { incBranchIdMode(); return DBHS;
            } 
            // fall through
          case 404: break;
          case 158: 
            { incBranchIdMode(); return DBLE;
            } 
            // fall through
          case 405: break;
          case 159: 
            { incBranchIdMode(); return DBLO;
            } 
            // fall through
          case 406: break;
          case 160: 
            { incBranchIdMode(); return DBLS;
            } 
            // fall through
          case 407: break;
          case 161: 
            { incBranchIdMode(); return DBLT;
            } 
            // fall through
          case 408: break;
          case 162: 
            { incBranchIdMode(); return DBMI;
            } 
            // fall through
          case 409: break;
          case 163: 
            { incBranchIdMode(); return DBNE;
            } 
            // fall through
          case 410: break;
          case 164: 
            { incBranchIdMode(); return DBPL;
            } 
            // fall through
          case 411: break;
          case 165: 
            { incBranchIdMode(); return DBRA;
            } 
            // fall through
          case 412: break;
          case 166: 
            { incBranchIdMode(); return DBVC;
            } 
            // fall through
          case 413: break;
          case 167: 
            { incBranchIdMode(); return DBVS;
            } 
            // fall through
          case 414: break;
          case 168: 
            { return DIVS;
            } 
            // fall through
          case 415: break;
          case 169: 
            { return DIVU;
            } 
            // fall through
          case 416: break;
          case 170: 
            { return DSEG;
            } 
            // fall through
          case 417: break;
          case 171: 
            { return ELSE;
            } 
            // fall through
          case 418: break;
          case 172: 
            { return ENDC;
            } 
            // fall through
          case 419: break;
          case 173: 
            { return ENDM;
            } 
            // fall through
          case 420: break;
          case 174: 
            { return ENDR;
            } 
            // fall through
          case 421: break;
          case 175: 
            { return EORI;
            } 
            // fall through
          case 422: break;
          case 176: 
            { return EQUR;
            } 
            // fall through
          case 423: break;
          case 177: 
            { return EREM;
            } 
            // fall through
          case 424: break;
          case 178: 
            { return EVEN;
            } 
            // fall through
          case 425: break;
          case 179: 
            { return IFEQ;
            } 
            // fall through
          case 426: break;
          case 180: 
            { return IFGE;
            } 
            // fall through
          case 427: break;
          case 181: 
            { return IFGT;
            } 
            // fall through
          case 428: break;
          case 182: 
            { return IFLE;
            } 
            // fall through
          case 429: break;
          case 183: 
            { return IFLT;
            } 
            // fall through
          case 430: break;
          case 184: 
            { return IFMI;
            } 
            // fall through
          case 431: break;
          case 185: 
            { return IFNB;
            } 
            // fall through
          case 432: break;
          case 186: 
            { return IFNC;
            } 
            // fall through
          case 433: break;
          case 187: 
            { return IFND;
            } 
            // fall through
          case 434: break;
          case 188: 
            { return IFNE;
            } 
            // fall through
          case 435: break;
          case 189: 
            { return IFPL;
            } 
            // fall through
          case 436: break;
          case 190: 
            { return LINK;
            } 
            // fall through
          case 437: break;
          case 191: 
            { return LIST;
            } 
            // fall through
          case 438: break;
          case 192: 
            { return LLEN;
            } 
            // fall through
          case 439: break;
          case 193: 
            { return MOVE;
            } 
            // fall through
          case 440: break;
          case 194: 
            { return MULS;
            } 
            // fall through
          case 441: break;
          case 195: 
            { return MULU;
            } 
            // fall through
          case 442: break;
          case 196: 
            { return NBCD;
            } 
            // fall through
          case 443: break;
          case 197: 
            { return NEGX;
            } 
            // fall through
          case 444: break;
          case 198: 
            { return PAGE;
            } 
            // fall through
          case 445: break;
          case 199: 
            { return PLEN;
            } 
            // fall through
          case 446: break;
          case 200: 
            { return REPT;
            } 
            // fall through
          case 447: break;
          case 201: 
            { return ROXL;
            } 
            // fall through
          case 448: break;
          case 202: 
            { return ROXR;
            } 
            // fall through
          case 449: break;
          case 203: 
            { return SBCD;
            } 
            // fall through
          case 450: break;
          case 204: 
            { return STOP;
            } 
            // fall through
          case 451: break;
          case 205: 
            { return SUBA;
            } 
            // fall through
          case 452: break;
          case 206: 
            { return SUBI;
            } 
            // fall through
          case 453: break;
          case 207: 
            { return SUBQ;
            } 
            // fall through
          case 454: break;
          case 208: 
            { return SUBX;
            } 
            // fall through
          case 455: break;
          case 209: 
            { return SWAP;
            } 
            // fall through
          case 456: break;
          case 210: 
            { return TEXT;
            } 
            // fall through
          case 457: break;
          case 211: 
            { return TRAP;
            } 
            // fall through
          case 458: break;
          case 212: 
            { return UNLK;
            } 
            // fall through
          case 459: break;
          case 213: 
            { return XDEF;
            } 
            // fall through
          case 460: break;
          case 214: 
            { return XREF;
            } 
            // fall through
          case 461: break;
          case 215: 
            { return ALIGN;
            } 
            // fall through
          case 462: break;
          case 216: 
            { return BSS_F;
            } 
            // fall through
          case 463: break;
          case 217: 
            { return BSS_C;
            } 
            // fall through
          case 464: break;
          case 218: 
            { return ENDIF;
            } 
            // fall through
          case 465: break;
          case 219: 
            { return MACRO;
            } 
            // fall through
          case 466: break;
          case 220: 
            { return MEXIT;
            } 
            // fall through
          case 467: break;
          case 221: 
            { return MOVEA;
            } 
            // fall through
          case 468: break;
          case 222: 
            { return MOVEM;
            } 
            // fall through
          case 469: break;
          case 223: 
            { return MOVEP;
            } 
            // fall through
          case 470: break;
          case 224: 
            { return MOVEQ;
            } 
            // fall through
          case 471: break;
          case 225: 
            { return RESET;
            } 
            // fall through
          case 472: break;
          case 226: 
            { return RSSET;
            } 
            // fall through
          case 473: break;
          case 227: 
            { return TRAPV;
            } 
            // fall through
          case 474: break;
          case 228: 
            { return CODE_F;
            } 
            // fall through
          case 475: break;
          case 229: 
            { return CODE_C;
            } 
            // fall through
          case 476: break;
          case 230: 
            { return DATA_F;
            } 
            // fall through
          case 477: break;
          case 231: 
            { return DATA_C;
            } 
            // fall through
          case 478: break;
          case 232: 
            { return ELSEIF;
            } 
            // fall through
          case 479: break;
          case 233: 
            { return INCBIN;
            } 
            // fall through
          case 480: break;
          case 234: 
            { return INCDIR;
            } 
            // fall through
          case 481: break;
          case 235: 
            { return INLINE;
            } 
            // fall through
          case 482: break;
          case 236: 
            { return NOLIST;
            } 
            // fall through
          case 483: break;
          case 237: 
            { return NOPAGE;
            } 
            // fall through
          case 484: break;
          case 238: 
            { return EINLINE;
            } 
            // fall through
          case 485: break;
          case 239: 
            { return ILLEGAL;
            } 
            // fall through
          case 486: break;
          case 240: 
            { return INCLUDE;
            } 
            // fall through
          case 487: break;
          case 241: 
            { return JUMPERR;
            } 
            // fall through
          case 488: break;
          case 242: 
            { return JUMPPTR;
            } 
            // fall through
          case 489: break;
          case 243: 
            { return RSRESET;
            } 
            // fall through
          case 490: break;
          case 244: 
            { return SECTION;
            } 
            // fall through
          case 491: break;
          case 245: 
            { return ADDWATCH;
            } 
            // fall through
          case 492: break;
          case 246: 
            { return IFMACROD;
            } 
            // fall through
          case 493: break;
          case 247: 
            { return IFMACROND;
            } 
            // fall through
          case 494: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
