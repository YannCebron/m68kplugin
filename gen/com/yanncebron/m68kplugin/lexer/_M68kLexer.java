// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/grammar/_M68kLexer.flex

/*
 * Copyright 2025 The Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.yanncebron.m68kplugin.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.yanncebron.m68kplugin.lang.psi.M68kTokenTypes.*;



import java.util.BitSet;

public class _M68kLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MACRO_DECLARATION = 2;
  public static final int AFTER_LABEL = 4;
  public static final int IN_INSTRUCTION = 6;
  public static final int AFTER_INSTRUCTION = 8;
  public static final int STRING_DIRECTIVE = 10;
  public static final int IN_OPERAND = 12;
  public static final int MACRO_PARAMETER = 14;
  public static final int AFTER_OPERAND = 16;
  public static final int IN_REM = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\27\u1f00"+
    "\1\u6000\1\u6100\1\u6200\1\u6300\10\u1f00\1\u6400\1\u6500\1\u6600"+
    "\5\u1f00\1\u6700\1\u6800\4\u1f00\1\u6900\2\u1f00\1\u6a00\16\u1f00"+
    "\246\u0100\1\u6b00\20\u0100\1\u6c00\1\u6d00\25\u0100\1\u6e00\34\u0100"+
    "\1\u6f00\14\u1f00\2\u0100\1\u7000\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\31\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\0\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\2\73\1\74\1\75\1\76\1\77\1\100\1\0\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\2\131"+
    "\1\0\1\132\1\0\1\133\6\0\1\3\44\0\1\73"+
    "\12\0\1\73\4\0\1\73\5\0\27\73\1\0\37\73"+
    "\1\0\u01ca\73\4\0\14\73\16\0\5\73\7\0\1\73"+
    "\1\0\1\73\126\0\1\73\52\0\5\73\1\0\2\73"+
    "\2\0\4\73\1\0\1\73\6\0\1\73\1\0\3\73"+
    "\1\0\1\73\1\0\24\73\1\0\123\73\1\0\213\73"+
    "\10\0\246\73\1\0\46\73\2\0\1\73\6\0\51\73"+
    "\47\0\16\73\1\0\1\73\1\0\2\73\1\0\2\73"+
    "\1\0\1\73\10\0\33\73\4\0\4\73\35\0\13\73"+
    "\5\0\70\73\1\0\7\73\12\34\4\0\146\73\1\0"+
    "\10\73\4\0\10\73\4\0\3\73\12\34\3\73\2\0"+
    "\1\73\20\0\60\73\15\0\145\73\16\0\12\34\41\73"+
    "\11\0\2\73\4\0\1\73\5\0\30\73\2\0\23\73"+
    "\23\0\31\73\7\0\13\73\65\0\25\73\1\0\10\73"+
    "\26\0\14\73\3\0\7\73\6\0\114\73\1\0\20\73"+
    "\1\0\3\73\4\0\17\73\2\0\12\34\1\0\23\73"+
    "\1\0\10\73\2\0\2\73\2\0\26\73\1\0\7\73"+
    "\1\0\1\73\3\0\4\73\3\0\10\73\2\0\2\73"+
    "\2\0\2\73\1\0\1\73\10\0\1\73\4\0\2\73"+
    "\1\0\5\73\2\0\12\34\2\73\12\0\1\73\4\0"+
    "\3\73\1\0\6\73\4\0\2\73\2\0\26\73\1\0"+
    "\7\73\1\0\2\73\1\0\2\73\1\0\2\73\4\0"+
    "\5\73\4\0\2\73\2\0\2\73\4\0\1\73\7\0"+
    "\4\73\1\0\1\73\7\0\12\34\6\73\13\0\3\73"+
    "\1\0\11\73\1\0\3\73\1\0\26\73\1\0\7\73"+
    "\1\0\2\73\1\0\5\73\3\0\11\73\1\0\3\73"+
    "\1\0\2\73\3\0\1\73\17\0\4\73\2\0\12\34"+
    "\11\0\4\73\4\0\3\73\1\0\10\73\2\0\2\73"+
    "\2\0\26\73\1\0\7\73\1\0\2\73\1\0\5\73"+
    "\3\0\10\73\2\0\2\73\2\0\2\73\11\0\2\73"+
    "\4\0\2\73\1\0\5\73\2\0\12\34\1\0\1\73"+
    "\20\0\2\73\1\0\6\73\3\0\3\73\1\0\4\73"+
    "\3\0\2\73\1\0\1\73\1\0\2\73\3\0\2\73"+
    "\3\0\3\73\3\0\14\73\4\0\5\73\3\0\3\73"+
    "\1\0\3\73\3\0\1\73\6\0\1\73\16\0\12\34"+
    "\20\0\4\73\1\0\10\73\1\0\3\73\1\0\27\73"+
    "\1\0\20\73\3\0\10\73\1\0\3\73\1\0\3\73"+
    "\10\0\2\73\1\0\3\73\5\0\4\73\2\0\12\34"+
    "\20\0\4\73\1\0\10\73\1\0\3\73\1\0\27\73"+
    "\1\0\12\73\1\0\5\73\3\0\10\73\1\0\3\73"+
    "\1\0\3\73\10\0\2\73\7\0\1\73\1\0\4\73"+
    "\2\0\12\34\1\0\2\73\15\0\4\73\1\0\10\73"+
    "\1\0\3\73\1\0\51\73\2\0\10\73\1\0\3\73"+
    "\1\0\3\73\1\0\1\73\5\0\4\73\7\0\5\73"+
    "\2\0\12\34\12\0\6\73\2\0\2\73\1\0\22\73"+
    "\3\0\30\73\1\0\11\73\1\0\1\73\2\0\7\73"+
    "\10\0\6\73\1\0\1\73\1\0\10\73\6\0\12\34"+
    "\2\0\2\73\15\0\72\73\5\0\7\73\6\0\1\73"+
    "\2\0\12\34\47\0\2\73\1\0\1\73\1\0\5\73"+
    "\1\0\30\73\1\0\1\73\1\0\23\73\1\0\3\73"+
    "\2\0\5\73\1\0\1\73\6\0\1\73\2\0\12\34"+
    "\2\0\4\73\40\0\1\73\37\0\12\34\26\0\10\73"+
    "\1\0\44\73\4\0\21\73\6\0\20\73\1\0\44\73"+
    "\103\0\67\73\1\0\1\73\2\0\5\73\12\34\6\0"+
    "\100\73\12\34\4\73\2\0\46\73\1\0\1\73\5\0"+
    "\1\73\2\0\53\73\1\0\115\73\1\0\4\73\2\0"+
    "\7\73\1\0\1\73\1\0\4\73\2\0\51\73\1\0"+
    "\4\73\2\0\41\73\1\0\4\73\2\0\7\73\1\0"+
    "\1\73\1\0\4\73\2\0\17\73\1\0\71\73\1\0"+
    "\4\73\2\0\103\73\45\0\20\73\20\0\126\73\2\0"+
    "\6\73\3\0\u016c\73\2\0\21\73\1\0\32\73\5\0"+
    "\113\73\3\0\13\73\7\0\15\73\1\0\6\73\14\0"+
    "\24\73\14\0\24\73\14\0\15\73\1\0\3\73\1\0"+
    "\2\73\14\0\64\73\2\0\23\73\16\0\1\73\4\0"+
    "\1\73\3\0\12\34\46\0\12\34\6\0\131\73\7\0"+
    "\53\73\5\0\106\73\12\0\37\73\1\0\14\73\4\0"+
    "\11\73\15\0\12\34\36\73\2\0\5\73\13\0\54\73"+
    "\4\0\32\73\6\0\12\34\46\0\34\73\4\0\77\73"+
    "\2\0\24\73\13\0\12\34\6\0\12\34\15\0\1\73"+
    "\130\0\64\73\1\0\17\73\1\0\7\73\4\0\12\34"+
    "\46\0\52\73\2\0\4\73\12\34\54\73\1\0\13\73"+
    "\16\0\67\73\11\0\12\34\3\0\3\73\12\34\44\73"+
    "\2\0\11\73\7\0\53\73\2\0\3\73\51\0\4\73"+
    "\1\0\6\73\1\0\2\73\3\0\1\73\5\0\300\73"+
    "\47\0\16\73\13\0\26\73\2\0\6\73\2\0\46\73"+
    "\2\0\6\73\2\0\10\73\1\0\1\73\1\0\1\73"+
    "\1\0\1\73\1\0\37\73\2\0\65\73\1\0\7\73"+
    "\1\0\1\73\3\0\3\73\1\0\7\73\3\0\4\73"+
    "\2\0\6\73\4\0\15\73\5\0\3\73\1\0\7\73"+
    "\53\0\2\3\107\0\1\73\15\0\1\73\20\0\15\73"+
    "\145\0\1\73\4\0\1\73\2\0\12\73\1\0\1\73"+
    "\3\0\5\73\6\0\1\73\1\0\1\73\1\0\1\73"+
    "\1\0\4\73\1\0\13\73\2\0\4\73\5\0\5\73"+
    "\4\0\1\73\21\0\51\73\u022d\0\64\73\26\0\57\73"+
    "\1\0\57\73\1\0\205\73\6\0\4\73\3\0\2\73"+
    "\14\0\46\73\1\0\1\73\5\0\1\73\2\0\70\73"+
    "\7\0\1\73\20\0\27\73\11\0\7\73\1\0\7\73"+
    "\1\0\7\73\1\0\7\73\1\0\7\73\1\0\7\73"+
    "\1\0\7\73\1\0\7\73\1\0\40\73\57\0\1\73"+
    "\325\0\3\73\31\0\11\73\7\0\5\73\2\0\5\73"+
    "\4\0\126\73\6\0\3\73\1\0\132\73\1\0\4\73"+
    "\5\0\53\73\1\0\136\73\21\0\33\73\65\0\306\73"+
    "\112\0\360\73\20\0\215\73\103\0\56\73\2\0\15\73"+
    "\3\0\20\73\12\34\2\73\24\0\57\73\5\0\10\73"+
    "\3\0\161\73\47\0\11\73\2\0\147\73\2\0\65\73"+
    "\2\0\5\73\60\0\17\73\1\0\41\73\30\0\64\73"+
    "\14\0\104\73\1\0\1\73\12\0\12\34\30\0\6\73"+
    "\3\0\1\73\1\0\3\73\12\34\41\73\5\0\43\73"+
    "\15\0\35\73\3\0\63\73\1\0\14\73\17\0\1\73"+
    "\12\34\6\0\20\73\12\34\5\73\1\0\67\73\11\0"+
    "\16\73\2\0\12\34\6\0\27\73\3\0\105\73\1\0"+
    "\1\73\1\0\1\73\30\0\3\73\2\0\20\73\2\0"+
    "\4\73\13\0\6\73\2\0\6\73\2\0\6\73\11\0"+
    "\7\73\1\0\7\73\1\0\53\73\1\0\14\73\10\0"+
    "\173\73\5\0\12\34\6\0\244\73\14\0\27\73\4\0"+
    "\61\73\4\0\u0100\3\156\73\2\0\152\73\46\0\7\73"+
    "\14\0\5\73\5\0\14\73\1\0\15\73\1\0\5\73"+
    "\1\0\1\73\1\0\2\73\1\0\2\73\1\0\154\73"+
    "\41\0\153\73\22\0\100\73\2\0\66\73\50\0\14\73"+
    "\164\0\5\73\1\0\207\73\23\0\12\34\7\0\6\134"+
    "\24\73\6\0\6\134\24\73\13\0\131\73\3\0\6\73"+
    "\2\0\6\73\2\0\6\73\2\0\3\73\43\0\14\73"+
    "\1\0\32\73\1\0\23\73\1\0\2\73\1\0\17\73"+
    "\2\0\16\73\42\0\173\73\105\0\65\73\u010b\0\35\73"+
    "\3\0\61\73\57\0\40\73\15\0\36\73\5\0\53\73"+
    "\5\0\36\73\2\0\44\73\4\0\10\73\1\0\5\73"+
    "\52\0\236\73\2\0\12\34\6\0\44\73\4\0\44\73"+
    "\4\0\50\73\10\0\64\73\234\0\67\73\11\0\26\73"+
    "\12\0\10\73\230\0\6\73\2\0\1\73\1\0\54\73"+
    "\1\0\2\73\3\0\1\73\2\0\27\73\12\0\27\73"+
    "\11\0\37\73\101\0\23\73\1\0\2\73\12\0\26\73"+
    "\12\0\32\73\106\0\70\73\6\0\2\73\100\0\4\73"+
    "\1\0\2\73\5\0\10\73\1\0\3\73\1\0\35\73"+
    "\52\0\35\73\3\0\35\73\43\0\10\73\1\0\34\73"+
    "\33\0\66\73\12\0\26\73\12\0\23\73\15\0\22\73"+
    "\156\0\111\73\67\0\63\73\15\0\63\73\15\0\50\73"+
    "\10\0\12\34\306\0\35\73\12\0\1\73\10\0\26\73"+
    "\232\0\27\73\11\0\106\73\40\0\12\34\22\0\67\73"+
    "\27\0\31\73\7\0\12\34\6\0\63\73\3\0\12\34"+
    "\4\0\3\73\11\0\43\73\3\0\1\73\11\0\100\73"+
    "\1\0\4\73\13\0\12\34\1\73\1\0\1\73\43\0"+
    "\22\73\1\0\42\73\2\0\1\73\6\0\1\73\101\0"+
    "\7\73\1\0\1\73\1\0\4\73\1\0\17\73\1\0"+
    "\12\73\7\0\71\73\7\0\12\34\6\0\4\73\1\0"+
    "\10\73\2\0\2\73\2\0\26\73\1\0\7\73\1\0"+
    "\2\73\1\0\5\73\3\0\10\73\2\0\2\73\2\0"+
    "\2\73\3\0\1\73\6\0\1\73\5\0\7\73\234\0"+
    "\102\73\1\0\3\73\1\0\4\73\5\0\12\34\5\0"+
    "\1\73\40\0\102\73\2\0\2\73\1\0\1\73\10\0"+
    "\12\34\246\0\66\73\2\0\7\73\31\0\6\73\42\0"+
    "\77\73\1\0\1\73\3\0\1\73\13\0\12\34\46\0"+
    "\66\73\2\0\1\73\7\0\12\34\66\0\33\73\2\0"+
    "\16\73\5\0\12\34\306\0\71\73\147\0\100\73\12\34"+
    "\25\0\1\73\240\0\10\73\2\0\56\73\2\0\6\73"+
    "\1\0\1\73\1\0\2\73\33\0\63\73\2\0\12\73"+
    "\21\0\110\73\5\0\1\73\42\0\71\73\7\0\11\73"+
    "\1\0\55\73\1\0\7\73\1\0\1\73\17\0\12\34"+
    "\30\0\36\73\2\0\26\73\1\0\16\73\111\0\7\73"+
    "\1\0\2\73\1\0\54\73\3\0\1\73\1\0\2\73"+
    "\1\0\3\73\1\0\1\73\2\0\2\73\10\0\12\34"+
    "\6\0\6\73\1\0\2\73\1\0\45\73\1\0\2\73"+
    "\1\0\4\73\1\0\1\73\7\0\12\34\u0136\0\27\73"+
    "\11\0\232\73\146\0\157\73\21\0\304\73\274\0\57\73"+
    "\321\0\107\73\271\0\71\73\7\0\37\73\1\0\12\34"+
    "\146\0\36\73\22\0\60\73\20\0\4\73\14\0\12\34"+
    "\11\0\25\73\5\0\23\73\260\0\100\73\200\0\113\73"+
    "\4\0\71\73\7\0\21\73\100\0\2\73\1\0\1\73"+
    "\34\0\370\73\10\0\363\73\15\0\37\73\61\0\3\73"+
    "\21\0\4\73\10\0\u018c\73\4\0\153\73\5\0\15\73"+
    "\3\0\11\73\7\0\12\73\4\0\1\73\141\0\125\73"+
    "\1\0\107\73\1\0\2\73\2\0\1\73\2\0\2\73"+
    "\2\0\4\73\1\0\14\73\1\0\1\73\1\0\7\73"+
    "\1\0\101\73\1\0\4\73\2\0\10\73\1\0\7\73"+
    "\1\0\34\73\1\0\4\73\1\0\5\73\1\0\1\73"+
    "\3\0\7\73\1\0\u0154\73\2\0\31\73\1\0\31\73"+
    "\1\0\37\73\1\0\31\73\1\0\37\73\1\0\31\73"+
    "\1\0\37\73\1\0\31\73\1\0\37\73\1\0\31\73"+
    "\1\0\10\73\2\0\62\34\7\73\1\0\21\73\2\0"+
    "\7\73\1\0\2\73\1\0\5\73\325\0\55\73\12\0"+
    "\7\73\2\0\12\34\4\0\1\73\u0171\0\54\73\4\0"+
    "\12\34\6\0\305\73\73\0\104\73\3\0\1\73\3\0"+
    "\1\73\4\0\12\34\246\0\4\73\1\0\33\73\1\0"+
    "\2\73\1\0\1\73\2\0\1\73\1\0\12\73\1\0"+
    "\4\73\1\0\1\73\1\0\1\73\6\0\1\73\4\0"+
    "\1\73\1\0\1\73\1\0\1\73\1\0\3\73\1\0"+
    "\2\73\1\0\1\73\2\0\1\73\1\0\1\73\1\0"+
    "\1\73\1\0\1\73\1\0\1\73\1\0\2\73\1\0"+
    "\1\73\2\0\4\73\1\0\7\73\1\0\4\73\1\0"+
    "\4\73\1\0\1\73\1\0\12\73\1\0\21\73\5\0"+
    "\3\73\1\0\5\73\1\0\21\73\164\0\32\73\6\0"+
    "\32\73\6\0\32\73\166\0\327\73\51\0\65\73\13\0"+
    "\336\73\2\0\u0182\73\16\0\u0131\73\37\0\36\73\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[28928];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\1\2\6\1\10\1\11\1\12\1\13\3\1"+
    "\23\14\1\15\1\16\1\1\1\17\1\20\2\17\1\4"+
    "\1\21\1\22\1\23\1\24\1\1\1\25\1\26\1\23"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\1\10\43\1\44\1\45"+
    "\1\46\1\47\1\1\1\50\1\51\1\52\1\53\1\7"+
    "\1\4\1\54\1\1\17\0\1\6\1\55\6\0\36\14"+
    "\1\56\1\14\1\57\1\60\1\61\12\14\1\62\2\14"+
    "\1\63\26\14\1\64\11\14\1\65\4\14\1\66\5\14"+
    "\1\67\1\14\1\70\13\14\1\71\1\72\1\73\1\74"+
    "\1\0\1\17\2\0\1\75\1\23\1\0\1\76\1\77"+
    "\1\100\2\0\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\43\1\115"+
    "\1\43\1\116\1\43\1\117\1\43\1\120\1\121\3\43"+
    "\1\122\1\0\1\4\10\0\1\123\1\0\1\6\2\0"+
    "\1\124\1\0\3\14\1\125\1\14\1\126\1\127\1\130"+
    "\3\14\1\131\2\14\1\132\1\133\1\134\1\135\1\136"+
    "\1\137\1\14\1\140\1\141\1\142\1\143\1\144\1\145"+
    "\1\146\1\147\1\150\1\14\1\151\1\152\1\14\1\153"+
    "\1\154\1\155\1\156\1\157\7\14\1\160\7\14\1\161"+
    "\1\14\1\0\1\162\1\14\2\0\1\14\1\0\3\14"+
    "\1\163\1\164\1\124\2\14\1\165\1\166\1\14\1\167"+
    "\1\0\1\170\1\14\1\171\1\172\1\173\1\174\1\175"+
    "\12\14\1\176\1\177\1\14\1\200\4\14\1\201\1\202"+
    "\11\14\1\203\1\14\1\204\1\205\1\206\1\14\1\207"+
    "\1\0\1\210\1\211\2\14\1\212\4\14\1\213\1\214"+
    "\2\14\1\215\1\216\1\14\1\0\2\14\1\217\1\220"+
    "\1\221\1\222\1\14\1\223\1\224\1\14\1\225\1\226"+
    "\1\0\1\227\1\230\1\231\1\232\1\233\1\234\1\235"+
    "\1\236\1\237\1\240\1\0\1\241\1\242\1\0\1\14"+
    "\1\243\1\244\1\245\1\14\1\246\2\14\1\247\1\250"+
    "\3\14\1\43\1\251\1\43\1\252\1\253\1\43\1\254"+
    "\1\255\1\256\1\4\5\0\1\6\1\55\1\0\1\257"+
    "\1\0\1\260\1\14\1\0\1\261\1\262\1\263\1\14"+
    "\1\264\1\14\1\0\1\265\2\0\1\14\1\266\1\14"+
    "\1\0\1\267\1\270\6\0\1\271\11\0\1\272\1\0"+
    "\1\14\1\273\4\0\2\14\1\0\1\274\1\275\1\276"+
    "\1\277\1\300\1\14\1\301\1\302\1\303\1\304\1\305"+
    "\1\0\1\306\1\307\1\310\1\311\1\312\1\313\1\314"+
    "\1\315\1\316\1\317\1\320\1\321\1\0\1\322\1\323"+
    "\1\56\1\0\1\324\1\325\1\57\1\60\1\326\1\61"+
    "\1\327\1\14\1\330\1\331\1\332\1\14\1\333\1\334"+
    "\1\0\1\335\1\257\1\336\1\337\2\0\1\340\1\62"+
    "\1\341\1\342\1\343\1\344\1\345\1\346\1\14\1\347"+
    "\1\350\1\351\1\352\1\353\1\354\1\355\6\14\1\0"+
    "\1\14\1\0\1\356\1\357\1\360\1\361\2\0\5\14"+
    "\1\362\1\14\1\363\1\364\1\365\1\366\1\0\1\367"+
    "\2\14\1\0\1\14\1\64\1\0\1\14\1\370\1\0"+
    "\1\371\3\14\1\372\1\14\2\0\1\373\1\374\1\65"+
    "\2\14\1\375\2\0\1\14\1\0\2\14\1\66\12\0"+
    "\1\67\1\0\1\70\1\376\1\0\1\377\1\u0100\1\u0101"+
    "\1\u0102\2\0\1\u0103\1\0\1\u0104\1\u0105\1\0\1\u0106"+
    "\1\u0107\1\u0108\2\u0109\2\u010a\2\u010b\1\4\4\0\1\u010c"+
    "\1\55\1\0\1\u010d\1\0\1\14\1\125\3\0\1\14"+
    "\1\0\1\u010e\1\126\1\0\1\127\1\130\2\14\1\131"+
    "\2\0\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150"+
    "\1\0\1\151\1\u010f\1\u0110\1\0\1\153\1\154\1\155"+
    "\1\156\1\u0111\1\u0112\1\157\3\0\1\14\1\u0113\1\14"+
    "\3\0\1\160\14\0\1\161\2\0\1\162\3\0\2\14"+
    "\1\u0114\1\164\1\0\1\165\1\166\7\14\1\176\2\14"+
    "\1\200\1\0\1\201\1\202\1\14\1\u010d\1\u0115\1\14"+
    "\1\u0116\1\0\1\u0117\1\u0118\1\u0119\1\u011a\1\u011b\1\u011c"+
    "\1\14\4\0\1\203\1\0\2\14\1\205\1\14\1\211"+
    "\1\14\1\212\3\14\1\u011d\1\215\1\216\2\0\1\14"+
    "\1\u011e\1\0\1\223\1\224\1\14\1\225\1\u011f\1\u0120"+
    "\1\227\1\230\1\231\1\232\1\233\1\234\1\235\1\236"+
    "\1\237\1\240\1\242\1\243\4\0\1\244\1\245\1\0"+
    "\1\246\1\u0121\1\247\2\336\2\0\1\260\1\14\1\261"+
    "\1\262\1\263\1\14\1\264\1\265\1\u0122\1\14\1\267"+
    "\1\270\1\272\1\273\1\274\1\275\1\276\1\u0123\1\u0124"+
    "\1\u0125\1\u0126\1\303\1\304\1\305\1\306\1\307\1\310"+
    "\1\311\1\312\1\313\1\314\1\315\1\316\1\317\1\320"+
    "\1\321\1\322\1\323\1\324\1\325\1\326\1\14\1\u0127"+
    "\1\335\2\14\1\u0128\1\u0129\2\14\1\u012a\2\14\1\356"+
    "\7\14\1\362\6\0\1\14\1\363\1\364\1\365\1\0"+
    "\1\367\1\u012b\1\u012c\1\u012d\1\u012e\1\14\1\u012f\1\u0130"+
    "\1\14\1\373\1\374\1\14\1\375\1\14\1\377\1\u0100"+
    "\1\u0101\1\u0102\1\u0103\1\u0131\1\u0132\1\14\1\u0133\1\u0134"+
    "\1\14\1\u0135\1\u0136\1\14\1\u0137\1\u0138\1\u0139\1\u013a"+
    "\1\u013b\1\u013c\1\u013d\1\u013e\1\u013f\1\u0117\1\u0118\1\u0119"+
    "\1\u011a\1\u011b\1\u011c\1\u0140\1\0\2\14\1\u0141\1\u0142"+
    "\1\u0143\1\u0144\1\14\1\u0145\1\0\2\14\1\u0146\1\u0147"+
    "\2\14\1\u0148\1\14\1\u0149";

  private static int [] zzUnpackAction() {
    int [] result = new int[1001];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\135\0\272\0\u0117\0\u0174\0\u01d1\0\u022e\0\u028b"+
    "\0\u02e8\0\u0345\0\u03a2\0\u03ff\0\u045c\0\u04b9\0\u0516\0\u0573"+
    "\0\u05d0\0\u062d\0\u05d0\0\u068a\0\u05d0\0\u06e7\0\u0744\0\u07a1"+
    "\0\u07fe\0\u085b\0\u08b8\0\u0915\0\u05d0\0\u05d0\0\u05d0\0\u0972"+
    "\0\u09cf\0\u0a2c\0\u0a89\0\u0ae6\0\u0b43\0\u0ba0\0\u0bfd\0\u0c5a"+
    "\0\u0cb7\0\u0d14\0\u0d71\0\u0dce\0\u0e2b\0\u0e88\0\u0ee5\0\u0f42"+
    "\0\u0f9f\0\u0ffc\0\u1059\0\u10b6\0\u1113\0\u05d0\0\u1170\0\u11cd"+
    "\0\u122a\0\u1287\0\u12e4\0\u1341\0\u139e\0\u13fb\0\u1458\0\u14b5"+
    "\0\u05d0\0\u1512\0\u156f\0\u15cc\0\u1629\0\u05d0\0\u05d0\0\u05d0"+
    "\0\u05d0\0\u05d0\0\u05d0\0\u1686\0\u16e3\0\u1740\0\u179d\0\u17fa"+
    "\0\u1857\0\u18b4\0\u1911\0\u196e\0\u19cb\0\u1a28\0\u1a85\0\u1ae2"+
    "\0\u1b3f\0\u1b9c\0\u05d0\0\u1bf9\0\u05d0\0\u05d0\0\u1bf9\0\u1c56"+
    "\0\u05d0\0\u05d0\0\u05d0\0\u1cb3\0\u1d10\0\u05d0\0\u1d6d\0\u03a2"+
    "\0\u1dca\0\u1e27\0\u1e84\0\u1e84\0\u1ee1\0\u1f3e\0\u1f9b\0\u1ff8"+
    "\0\u2055\0\u20b2\0\u210f\0\u216c\0\u06e7\0\u07fe\0\u21c9\0\u2226"+
    "\0\u2283\0\u22e0\0\u233d\0\u239a\0\u0a2c\0\u23f7\0\u2454\0\u24b1"+
    "\0\u250e\0\u256b\0\u25c8\0\u2625\0\u2682\0\u26df\0\u273c\0\u2799"+
    "\0\u27f6\0\u2853\0\u28b0\0\u290d\0\u296a\0\u29c7\0\u2a24\0\u2a81"+
    "\0\u2ade\0\u2b3b\0\u2b98\0\u2bf5\0\u2c52\0\u2caf\0\u2d0c\0\u2d69"+
    "\0\u2dc6\0\u2e23\0\u2e80\0\u2edd\0\u2f3a\0\u2f97\0\u2ff4\0\u3051"+
    "\0\u30ae\0\u310b\0\u3168\0\u31c5\0\u3222\0\u327f\0\u32dc\0\u3339"+
    "\0\u3396\0\u33f3\0\u3450\0\u34ad\0\u350a\0\u3567\0\u35c4\0\u3621"+
    "\0\u367e\0\u36db\0\u3738\0\u3795\0\u37f2\0\u384f\0\u38ac\0\u3909"+
    "\0\u3966\0\u39c3\0\u3a20\0\u3a7d\0\u3ada\0\u3b37\0\u3b94\0\u3bf1"+
    "\0\u3c4e\0\u3cab\0\u3d08\0\u3d65\0\u3dc2\0\u3e1f\0\u3e7c\0\u3ed9"+
    "\0\u3f36\0\u3f93\0\u3ff0\0\u404d\0\u40aa\0\u4107\0\u4164\0\u41c1"+
    "\0\u421e\0\u427b\0\u42d8\0\u4335\0\u4392\0\u43ef\0\u444c\0\u44a9"+
    "\0\u4506\0\u4563\0\u45c0\0\u461d\0\u467a\0\u46d7\0\u4734\0\u4791"+
    "\0\u47ee\0\u484b\0\u48a8\0\u4905\0\u4962\0\u49bf\0\u4a1c\0\u4a79"+
    "\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u4ad6\0\u05d0\0\u4b33\0\u4b90"+
    "\0\u05d0\0\u05d0\0\u4bed\0\u1512\0\u156f\0\u05d0\0\u4c4a\0\u1bf9"+
    "\0\u196e\0\u196e\0\u196e\0\u196e\0\u05d0\0\u05d0\0\u05d0\0\u05d0"+
    "\0\u05d0\0\u05d0\0\u05d0\0\u18b4\0\u05d0\0\u4ca7\0\u4d04\0\u4d61"+
    "\0\u4dbe\0\u196e\0\u4e1b\0\u4e78\0\u196e\0\u4ed5\0\u4f32\0\u4f8f"+
    "\0\u05d0\0\u1d6d\0\u4fec\0\u5049\0\u50a6\0\u5103\0\u5160\0\u51bd"+
    "\0\u521a\0\u05d0\0\u5277\0\u05d0\0\u52d4\0\u5331\0\u538e\0\u53eb"+
    "\0\u5448\0\u54a5\0\u05d0\0\u5502\0\u555f\0\u55bc\0\u5619\0\u5676"+
    "\0\u56d3\0\u5730\0\u578d\0\u57ea\0\u5847\0\u58a4\0\u5901\0\u595e"+
    "\0\u59bb\0\u5a18\0\u5a75\0\u5ad2\0\u5b2f\0\u5b8c\0\u5be9\0\u5c46"+
    "\0\u5ca3\0\u5d00\0\u5d5d\0\u5dba\0\u5e17\0\u5e74\0\u5ed1\0\u5f2e"+
    "\0\u5f8b\0\u5fe8\0\u6045\0\u60a2\0\u60ff\0\u615c\0\u61b9\0\u6216"+
    "\0\u6273\0\u62d0\0\u632d\0\u638a\0\u63e7\0\u6444\0\u64a1\0\u64fe"+
    "\0\u655b\0\u65b8\0\u6615\0\u6672\0\u66cf\0\u672c\0\u6789\0\u67e6"+
    "\0\u6843\0\u68a0\0\u68fd\0\u695a\0\u69b7\0\u6a14\0\u6a71\0\u6ace"+
    "\0\u6b2b\0\u6b88\0\u6be5\0\u6c42\0\u6c9f\0\u6cfc\0\u6d59\0\u6db6"+
    "\0\u6e13\0\u6e70\0\u6ecd\0\u6f2a\0\u0cb7\0\u6f87\0\u0cb7\0\u6fe4"+
    "\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\u7041\0\u709e\0\u70fb"+
    "\0\u7158\0\u71b5\0\u7212\0\u726f\0\u72cc\0\u7329\0\u7386\0\u73e3"+
    "\0\u0cb7\0\u7440\0\u749d\0\u74fa\0\u7557\0\u75b4\0\u7611\0\u766e"+
    "\0\u76cb\0\u7728\0\u7785\0\u77e2\0\u783f\0\u789c\0\u78f9\0\u7956"+
    "\0\u79b3\0\u7a10\0\u7a6d\0\u7aca\0\u7b27\0\u7b84\0\u0cb7\0\u7be1"+
    "\0\u0cb7\0\u7c3e\0\u0cb7\0\u7c9b\0\u7cf8\0\u7d55\0\u7db2\0\u7e0f"+
    "\0\u7e6c\0\u7ec9\0\u7f26\0\u0cb7\0\u0cb7\0\u7f83\0\u7fe0\0\u803d"+
    "\0\u809a\0\u80f7\0\u8154\0\u81b1\0\u820e\0\u0cb7\0\u0cb7\0\u0cb7"+
    "\0\u0cb7\0\u826b\0\u82c8\0\u8325\0\u8382\0\u83df\0\u843c\0\u8499"+
    "\0\u84f6\0\u8553\0\u85b0\0\u860d\0\u866a\0\u86c7\0\u8724\0\u8781"+
    "\0\u87de\0\u883b\0\u8898\0\u0cb7\0\u88f5\0\u8952\0\u89af\0\u8a0c"+
    "\0\u8a69\0\u8ac6\0\u8b23\0\u8b80\0\u8bdd\0\u8c3a\0\u8c97\0\u0cb7"+
    "\0\u8cf4\0\u8d51\0\u8dae\0\u8e0b\0\u196e\0\u8e68\0\u196e\0\u196e"+
    "\0\u8ec5\0\u196e\0\u196e\0\u196e\0\u8f22\0\u8f7f\0\u50a6\0\u8fdc"+
    "\0\u9039\0\u9096\0\u90f3\0\u9150\0\u91ad\0\u05d0\0\u920a\0\u9267"+
    "\0\u92c4\0\u9321\0\u937e\0\u93db\0\u9438\0\u9495\0\u94f2\0\u954f"+
    "\0\u95ac\0\u9609\0\u9666\0\u96c3\0\u9720\0\u0cb7\0\u977d\0\u97da"+
    "\0\u9837\0\u9894\0\u98f1\0\u994e\0\u99ab\0\u9a08\0\u9a65\0\u9ac2"+
    "\0\u0cb7\0\u9b1f\0\u9b7c\0\u9bd9\0\u9c36\0\u9c93\0\u9cf0\0\u9d4d"+
    "\0\u9daa\0\u9e07\0\u9e64\0\u9ec1\0\u9f1e\0\u9f7b\0\u9fd8\0\ua035"+
    "\0\ua092\0\ua0ef\0\ua14c\0\ua1a9\0\ua206\0\ua263\0\ua2c0\0\ua31d"+
    "\0\u0cb7\0\ua37a\0\ua3d7\0\u0cb7\0\ua434\0\ua491\0\ua4ee\0\ua54b"+
    "\0\ua5a8\0\ua605\0\ua662\0\ua6bf\0\ua71c\0\ua779\0\ua7d6\0\ua833"+
    "\0\ua890\0\ua8ed\0\ua94a\0\ua9a7\0\uaa04\0\uaa61\0\uaabe\0\uab1b"+
    "\0\u05d0\0\uab78\0\uabd5\0\uac32\0\u05d0\0\u05d0\0\uac8f\0\u05d0"+
    "\0\u0cb7\0\uacec\0\uad49\0\u0cb7\0\u0cb7\0\uada6\0\u0cb7\0\u0cb7"+
    "\0\uae03\0\uae60\0\u0cb7\0\u0cb7\0\u0cb7\0\uaebd\0\uaf1a\0\u0cb7"+
    "\0\u05d0\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\uaf77"+
    "\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\uafd4"+
    "\0\ub031\0\ub08e\0\ub0eb\0\ub148\0\ub1a5\0\ub202\0\ub25f\0\ub2bc"+
    "\0\ub319\0\u0cb7\0\u0cb7\0\u0cb7\0\ub376\0\ub3d3\0\ub430\0\ub48d"+
    "\0\ub4ea\0\ub547\0\ub5a4\0\ub601\0\ub65e\0\ub6bb\0\ub718\0\ub775"+
    "\0\ub7d2\0\ub82f\0\ub88c\0\ub8e9\0\ub946\0\ub9a3\0\uba00\0\u05d0"+
    "\0\uba5d\0\ubaba\0\u0cb7\0\ubb17\0\u0cb7\0\ubb74\0\ubbd1\0\ubc2e"+
    "\0\u0cb7\0\ubc8b\0\ubce8\0\ubd45\0\ubda2\0\ubdff\0\u05d0\0\ube5c"+
    "\0\ubeb9\0\ubf16\0\ubf73\0\ubfd0\0\uc02d\0\uc08a\0\uc0e7\0\uc144"+
    "\0\u05d0\0\uc1a1\0\uc1fe\0\uc25b\0\uc2b8\0\uc315\0\uc372\0\uc3cf"+
    "\0\uc42c\0\uc489\0\uc4e6\0\u05d0\0\uc543\0\u05d0\0\u0cb7\0\uc5a0"+
    "\0\uc5fd\0\uc65a\0\uc6b7\0\uc714\0\uc771\0\uc7ce\0\uc82b\0\uc888"+
    "\0\u0cb7\0\uc8e5\0\uc942\0\u0cb7\0\u0cb7\0\u0cb7\0\u196e\0\u05d0"+
    "\0\u196e\0\u05d0\0\u196e\0\u05d0\0\uc99f\0\uc9fc\0\uca59\0\ucab6"+
    "\0\ucb13\0\u085b\0\u05d0\0\ucb70\0\u05d0\0\ucbcd\0\ucc2a\0\u05d0"+
    "\0\ucc87\0\ucce4\0\ucd41\0\ucd9e\0\ucdfb\0\u0cb7\0\u05d0\0\uce58"+
    "\0\u05d0\0\u05d0\0\uceb5\0\ucf12\0\u05d0\0\ucf6f\0\ucfcc\0\u05d0"+
    "\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0"+
    "\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\ud029\0\u05d0"+
    "\0\u0cb7\0\u0cb7\0\ud086\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u0cb7"+
    "\0\u0cb7\0\u05d0\0\ud0e3\0\ud140\0\ud19d\0\ud1fa\0\u0cb7\0\ud257"+
    "\0\ud2b4\0\ud311\0\ud36e\0\u05d0\0\ud3cb\0\ud428\0\ud485\0\ud4e2"+
    "\0\ud53f\0\ud59c\0\ud5f9\0\ud656\0\ud6b3\0\ud710\0\ud76d\0\ud7ca"+
    "\0\u05d0\0\ud827\0\ud884\0\u05d0\0\ud8e1\0\ud93e\0\ud99b\0\ud9f8"+
    "\0\uda55\0\u0cb7\0\u05d0\0\udab2\0\u05d0\0\u05d0\0\udb0f\0\udb6c"+
    "\0\udbc9\0\udc26\0\udc83\0\udce0\0\udd3d\0\u05d0\0\udd9a\0\uddf7"+
    "\0\u05d0\0\ude54\0\u05d0\0\u05d0\0\udeb1\0\u0cb7\0\u0cb7\0\udf0e"+
    "\0\u0cb7\0\udf6b\0\udfc8\0\ue025\0\ue082\0\ue0df\0\ue13c\0\ue199"+
    "\0\ue1f6\0\ue253\0\ue2b0\0\ue30d\0\ue36a\0\u05d0\0\ue3c7\0\ue424"+
    "\0\ue481\0\u05d0\0\ue4de\0\u05d0\0\ue53b\0\u05d0\0\ue598\0\ue5f5"+
    "\0\ue652\0\u0cb7\0\u05d0\0\u05d0\0\ue6af\0\ue70c\0\ue769\0\u0cb7"+
    "\0\ue7c6\0\u05d0\0\u05d0\0\ue823\0\u05d0\0\u0cb7\0\u0cb7\0\u05d0"+
    "\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0"+
    "\0\u05d0\0\u05d0\0\u05d0\0\ue880\0\ue8dd\0\ue93a\0\ue997\0\u05d0"+
    "\0\u05d0\0\ue9f4\0\u05d0\0\u0cb7\0\u05d0\0\u068a\0\u05d0\0\uea51"+
    "\0\ueaae\0\u05d0\0\ueb0b\0\u05d0\0\u05d0\0\u05d0\0\ueb68\0\u05d0"+
    "\0\u05d0\0\u0cb7\0\uebc5\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0"+
    "\0\u05d0\0\u05d0\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\u05d0\0\u05d0"+
    "\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0"+
    "\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0"+
    "\0\u05d0\0\u05d0\0\uec22\0\u0cb7\0\u05d0\0\uec7f\0\uecdc\0\u0cb7"+
    "\0\u0cb7\0\ued39\0\ued96\0\u0cb7\0\uedf3\0\uee50\0\u05d0\0\ueead"+
    "\0\uef0a\0\uef67\0\uefc4\0\uf021\0\uf07e\0\uf0db\0\u05d0\0\uf138"+
    "\0\uf195\0\uf1f2\0\uf24f\0\uf2ac\0\uf309\0\uf366\0\u05d0\0\u05d0"+
    "\0\u05d0\0\uf3c3\0\u05d0\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\uf420"+
    "\0\u0cb7\0\u0cb7\0\uf47d\0\u05d0\0\u05d0\0\uf4da\0\u05d0\0\uf537"+
    "\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\uf594\0\u0cb7\0\uf5f1"+
    "\0\u0cb7\0\u0cb7\0\uf64e\0\u0cb7\0\u0cb7\0\uf6ab\0\u0cb7\0\u0cb7"+
    "\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\u05d0"+
    "\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u0cb7\0\uf708\0\uf765"+
    "\0\uf7c2\0\u0cb7\0\u0cb7\0\u0cb7\0\u0cb7\0\uf81f\0\u0cb7\0\uf87c"+
    "\0\uf8d9\0\uf936\0\u0cb7\0\u05d0\0\uf993\0\uf9f0\0\u0cb7\0\ufa4d"+
    "\0\u0cb7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1001];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\1\21\1\22\11\21\1\24\3\21"+
    "\1\25\1\21\11\26\1\21\1\24\3\21\1\26\31\27"+
    "\1\21\1\26\2\21\1\26\31\27\2\21\1\27\1\21"+
    "\1\30\1\23\1\21\1\30\17\21\11\31\6\21\14\32"+
    "\1\33\14\32\4\21\1\31\14\32\1\33\14\32\2\21"+
    "\1\32\1\21\1\34\1\23\1\21\1\34\3\21\1\35"+
    "\5\21\1\24\16\21\1\36\1\24\1\21\1\37\6\21"+
    "\1\40\7\21\1\41\25\21\1\40\7\21\1\41\20\21"+
    "\1\30\1\23\1\21\1\30\11\21\1\24\5\21\11\42"+
    "\1\21\1\24\1\21\1\37\2\21\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\2\51\1\52\1\53\1\51\1\54"+
    "\1\55\1\56\1\57\1\60\1\51\1\61\1\62\1\63"+
    "\1\64\2\51\1\65\1\51\1\21\1\66\2\21\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\2\51\1\52"+
    "\1\53\1\51\1\54\1\55\1\56\1\57\1\60\1\51"+
    "\1\61\1\62\1\63\1\64\2\51\1\65\1\51\2\21"+
    "\1\51\1\21\1\67\1\23\1\21\1\67\15\21\1\70"+
    "\112\21\1\71\1\72\1\23\1\71\1\72\1\71\1\73"+
    "\4\71\1\74\2\71\1\75\17\71\1\75\36\71\1\21"+
    "\37\71\1\21\1\76\1\23\1\21\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\11\116\1\21\1\24"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\126"+
    "\13\124\1\127\2\124\1\130\1\124\1\131\1\132\3\124"+
    "\1\133\1\134\1\135\1\136\1\137\1\123\1\124\1\125"+
    "\1\126\13\124\1\127\2\124\1\130\1\124\1\131\1\132"+
    "\3\124\1\140\1\141\1\124\2\21\1\23\21\21\11\142"+
    "\44\21\31\143\3\21\1\24\1\144\1\23\1\21\1\30"+
    "\131\24\1\145\1\146\1\21\1\147\130\24\1\0\1\150"+
    "\2\0\1\150\165\0\1\151\100\0\1\152\2\0\1\152"+
    "\130\0\2\153\3\0\11\153\1\154\17\153\1\154\22\153"+
    "\1\155\2\153\1\156\2\153\1\157\27\153\1\155\2\153"+
    "\1\156\2\153\1\157\7\153\24\0\11\17\6\0\31\160"+
    "\4\0\1\17\31\160\2\0\1\160\24\0\1\161\17\0"+
    "\1\161\11\0\1\161\6\0\1\161\3\0\1\161\3\0"+
    "\1\161\4\0\1\161\11\0\1\161\6\0\1\161\3\0"+
    "\1\161\2\0\1\161\140\0\1\22\2\0\1\22\15\0"+
    "\1\162\1\0\11\162\5\0\1\162\14\163\1\164\14\163"+
    "\1\0\1\162\2\0\1\162\14\163\1\164\14\163\2\0"+
    "\1\163\2\24\3\0\130\24\24\0\11\165\5\0\1\165"+
    "\31\27\1\0\1\165\2\0\1\165\31\27\2\0\1\27"+
    "\22\0\1\27\1\0\11\27\5\0\32\27\1\0\1\27"+
    "\2\0\32\27\2\0\1\27\1\0\1\30\2\0\1\30"+
    "\154\0\11\166\6\0\31\32\4\0\1\166\31\32\2\0"+
    "\1\32\24\0\11\32\6\0\31\32\4\0\32\32\2\0"+
    "\1\32\24\0\11\32\6\0\1\167\30\32\4\0\1\32"+
    "\1\167\30\32\2\0\1\32\1\0\1\34\2\0\1\34"+
    "\11\0\1\170\17\0\1\170\10\0\1\171\7\0\1\172"+
    "\25\0\1\171\7\0\1\172\102\0\1\173\35\0\1\173"+
    "\56\0\1\174\35\0\1\174\57\0\11\175\6\0\31\51"+
    "\4\0\1\175\31\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\1\51\1\177\1\200\1\201\7\51\1\202"+
    "\1\51\1\203\4\51\1\204\1\51\1\205\4\51\4\0"+
    "\2\51\1\177\1\200\1\201\7\51\1\202\1\51\1\203"+
    "\4\51\1\204\1\51\1\205\4\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\1\206\1\51\1\207\1\51"+
    "\1\210\1\51\1\211\1\212\2\51\1\213\1\214\1\215"+
    "\1\216\1\51\1\217\1\51\1\220\1\221\1\222\1\51"+
    "\1\223\3\51\4\0\1\51\1\206\1\51\1\207\1\51"+
    "\1\210\1\51\1\211\1\212\2\51\1\213\1\214\1\215"+
    "\1\216\1\51\1\217\1\51\1\220\1\221\1\222\1\51"+
    "\1\223\3\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\7\51\1\224\3\51\1\225\1\226\1\227\1\230"+
    "\1\231\2\51\1\232\6\51\4\0\10\51\1\224\3\51"+
    "\1\225\1\226\1\227\1\230\1\231\2\51\1\232\6\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\1\233"+
    "\1\234\1\235\5\51\1\236\10\51\1\237\1\240\4\51"+
    "\1\241\1\51\4\0\1\51\1\233\1\234\1\235\5\51"+
    "\1\236\10\51\1\237\1\240\4\51\1\241\1\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\2\51\1\242"+
    "\5\51\1\243\2\51\1\244\1\51\1\245\1\246\1\51"+
    "\1\247\1\250\3\51\1\251\1\51\1\252\1\51\4\0"+
    "\3\51\1\242\5\51\1\243\2\51\1\244\1\51\1\245"+
    "\1\246\1\51\1\247\1\250\3\51\1\251\1\51\1\252"+
    "\1\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\1\253\15\51\1\254\1\255\11\51\4\0\1\51\1\253"+
    "\15\51\1\254\1\255\11\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\3\51\1\256\1\51"+
    "\1\257\5\51\1\260\1\51\1\261\13\51\4\0\4\51"+
    "\1\256\1\51\1\257\5\51\1\260\1\51\1\261\13\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\14\51"+
    "\1\262\5\51\1\263\1\51\1\264\4\51\4\0\15\51"+
    "\1\262\5\51\1\263\1\51\1\264\4\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\4\51\1\265\3\51"+
    "\1\266\2\51\1\267\2\51\1\270\3\51\1\271\6\51"+
    "\4\0\5\51\1\265\3\51\1\266\2\51\1\267\2\51"+
    "\1\270\3\51\1\271\6\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\1\272\1\51\1\273\1\51\1\274"+
    "\11\51\1\275\3\51\1\276\1\51\1\277\4\51\4\0"+
    "\1\51\1\272\1\51\1\273\1\51\1\274\11\51\1\275"+
    "\3\51\1\276\1\51\1\277\4\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\1\51\1\300\2\51\1\301"+
    "\11\51\1\302\12\51\4\0\2\51\1\300\2\51\1\301"+
    "\11\51\1\302\12\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\3\51\1\303\1\51\1\304\11\51\1\305"+
    "\1\51\1\306\2\51\1\307\4\51\4\0\4\51\1\303"+
    "\1\51\1\304\11\51\1\305\1\51\1\306\2\51\1\307"+
    "\4\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\1\310\3\51\1\311\6\51\1\312\2\51\1\313\2\51"+
    "\1\314\2\51\1\315\4\51\4\0\1\51\1\310\3\51"+
    "\1\311\6\51\1\312\2\51\1\313\2\51\1\314\2\51"+
    "\1\315\4\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\4\51\1\316\11\51\1\317\3\51\1\320\1\321"+
    "\5\51\4\0\5\51\1\316\11\51\1\317\3\51\1\320"+
    "\1\321\5\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\1\51\1\322\1\323\1\51\1\324\1\325\1\326"+
    "\1\327\3\51\1\330\1\331\1\332\1\333\1\334\3\51"+
    "\1\335\1\336\1\337\1\340\2\51\4\0\2\51\1\322"+
    "\1\323\1\51\1\324\1\325\1\326\1\327\3\51\1\330"+
    "\1\331\1\332\1\333\1\334\3\51\1\335\1\336\1\337"+
    "\1\340\2\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\1\341\3\51\1\342\14\51\1\343\1\344\1\345"+
    "\5\51\4\0\1\51\1\341\3\51\1\342\14\51\1\343"+
    "\1\344\1\345\5\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\15\51\1\346\13\51\4\0\16\51\1\346"+
    "\13\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\3\51\1\347\15\51\1\350\7\51\4\0\4\51\1\347"+
    "\15\51\1\350\7\51\2\0\1\51\1\0\1\67\2\0"+
    "\1\67\174\0\1\351\11\0\1\352\6\0\1\353\3\0"+
    "\1\354\3\0\1\355\4\0\1\351\11\0\1\352\6\0"+
    "\1\353\3\0\1\354\5\0\1\71\2\0\1\71\1\0"+
    "\1\71\1\0\4\71\1\0\61\71\1\0\37\71\1\0"+
    "\1\72\2\0\1\72\130\0\2\73\1\0\3\73\1\356"+
    "\66\73\1\357\37\73\2\74\1\0\10\74\1\356\61\74"+
    "\1\360\37\74\1\75\1\24\1\0\1\71\1\0\1\75"+
    "\1\24\4\75\1\24\61\75\1\24\37\75\1\0\1\76"+
    "\2\0\1\76\170\0\1\361\74\0\2\100\1\0\3\100"+
    "\1\362\66\100\1\363\37\100\24\0\11\364\6\0\6\364"+
    "\30\0\6\364\25\0\1\364\24\0\2\365\104\0\1\365"+
    "\14\0\1\366\122\0\2\105\1\0\10\105\1\362\61\105"+
    "\1\367\37\105\24\0\11\370\5\0\1\370\1\124\1\371"+
    "\11\124\1\372\6\124\1\373\3\124\1\374\2\124\1\0"+
    "\1\370\2\0\1\370\1\124\1\371\11\124\1\372\6\124"+
    "\1\373\3\124\1\374\2\124\2\0\1\124\23\0\1\375"+
    "\135\0\11\116\5\0\1\370\31\124\1\0\1\370\2\0"+
    "\1\370\31\124\2\0\1\124\37\0\1\376\1\377\1\u0100"+
    "\133\0\1\u0101\134\0\1\u0102\1\u0103\117\0\7\u0104\2\370"+
    "\5\0\1\370\31\124\1\0\1\370\2\0\1\370\31\124"+
    "\2\0\1\124\10\0\1\u0105\11\0\1\124\1\0\7\u0106"+
    "\2\124\5\0\32\124\1\0\1\124\2\0\32\124\2\0"+
    "\1\124\10\0\1\u0105\11\0\1\124\1\0\11\124\5\0"+
    "\32\124\1\0\1\124\2\0\32\124\2\0\1\124\10\0"+
    "\1\u0105\11\0\1\124\1\0\11\124\5\0\3\124\1\u0107"+
    "\26\124\1\0\1\124\2\0\3\124\1\u0107\26\124\2\0"+
    "\1\124\10\0\1\u0105\11\0\1\124\1\0\7\u0108\2\124"+
    "\5\0\6\124\1\u0109\23\124\1\0\1\124\2\0\6\124"+
    "\1\u0109\23\124\2\0\1\124\10\0\1\u0105\11\0\1\124"+
    "\1\0\11\124\5\0\3\124\1\u010a\26\124\1\0\1\124"+
    "\2\0\3\124\1\u010a\26\124\2\0\1\124\10\0\1\u0105"+
    "\11\0\1\124\1\0\11\124\5\0\6\124\1\u010b\11\124"+
    "\1\u010c\1\124\1\u010d\1\u010e\6\124\1\0\1\124\2\0"+
    "\6\124\1\u010b\11\124\1\u010c\1\124\1\u010d\1\u010e\6\124"+
    "\2\0\1\124\10\0\1\u0105\11\0\1\124\1\0\11\124"+
    "\5\0\23\124\1\u010f\6\124\1\0\1\124\2\0\23\124"+
    "\1\u010f\6\124\2\0\1\124\10\0\1\u0105\11\0\1\124"+
    "\1\0\11\124\5\0\2\124\1\u0110\27\124\1\0\1\124"+
    "\2\0\2\124\1\u0110\27\124\2\0\1\124\24\0\11\370"+
    "\5\0\1\370\31\124\1\0\1\370\2\0\1\370\31\124"+
    "\2\0\1\124\132\0\1\u0111\2\0\1\24\1\144\2\0"+
    "\1\30\131\24\1\145\2\0\1\u0112\42\24\1\u0113\35\24"+
    "\1\u0113\27\24\1\0\1\u0112\2\0\1\u0112\42\0\1\u0114"+
    "\35\0\1\u0114\37\0\1\u0115\11\0\1\u0115\1\0\11\u0115"+
    "\5\0\1\u0115\31\u0116\1\0\1\u0115\2\0\1\u0115\31\u0116"+
    "\2\0\1\u0116\1\0\1\152\2\0\1\152\54\0\1\u0117"+
    "\35\0\1\u0117\15\0\2\153\3\0\11\153\1\154\17\153"+
    "\1\154\100\153\3\0\11\153\1\154\17\153\1\154\25\153"+
    "\1\u0118\35\153\1\u0118\14\153\3\0\11\153\1\154\17\153"+
    "\1\154\30\153\1\157\35\153\1\157\11\153\3\0\11\153"+
    "\1\154\17\153\1\154\24\153\1\u0119\35\153\1\u0119\13\153"+
    "\24\0\11\160\6\0\31\160\4\0\32\160\2\0\1\160"+
    "\22\0\1\u011a\136\0\11\162\5\0\1\162\31\163\1\0"+
    "\1\162\2\0\1\162\31\163\2\0\1\163\10\0\1\u011b"+
    "\11\0\1\163\1\0\11\163\1\u011c\4\0\32\163\1\0"+
    "\1\163\2\0\32\163\2\0\1\163\10\0\1\u011b\11\0"+
    "\1\163\1\0\11\163\1\u011c\4\0\1\163\1\u011d\30\163"+
    "\1\0\1\163\2\0\1\163\1\u011d\30\163\2\0\1\163"+
    "\24\0\11\32\6\0\2\32\1\u011e\26\32\4\0\3\32"+
    "\1\u011e\26\32\2\0\1\32\2\170\3\0\130\170\63\0"+
    "\1\u011f\35\0\1\u011f\56\0\1\u0120\35\0\1\u0120\122\0"+
    "\1\u0121\35\0\1\u0121\54\0\1\u0122\35\0\1\u0122\55\0"+
    "\1\u0123\17\0\1\u0123\11\0\1\u0123\6\0\1\u0123\3\0"+
    "\1\u0123\3\0\1\u0123\4\0\1\u0123\11\0\1\u0123\6\0"+
    "\1\u0123\3\0\1\u0123\2\0\1\u0123\24\0\1\176\1\0"+
    "\11\51\6\0\2\51\1\u0124\26\51\4\0\3\51\1\u0124"+
    "\26\51\2\0\1\51\22\0\1\176\1\0\6\51\1\u0125"+
    "\2\51\6\0\31\51\4\0\32\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\3\51\1\u0126\25\51\4\0"+
    "\4\51\1\u0126\25\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\10\51\1\u0127\20\51\4\0\11\51\1\u0127"+
    "\20\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\3\51\1\u0128\25\51\4\0\4\51\1\u0128\25\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\13\51\1\u0129"+
    "\5\51\1\u012a\1\u012b\6\51\4\0\14\51\1\u0129\5\51"+
    "\1\u012a\1\u012b\6\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\23\51\1\u012c\5\51\4\0\24\51\1\u012c"+
    "\5\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\22\51\1\u012d\6\51\4\0\23\51\1\u012d\6\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\2\51\1\u012e"+
    "\4\51\1\u012f\3\51\1\u0130\6\51\1\u0131\6\51\4\0"+
    "\3\51\1\u012e\4\51\1\u012f\3\51\1\u0130\6\51\1\u0131"+
    "\6\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\20\51\1\u0132\10\51\4\0\21\51\1\u0132\10\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\4\51\1\u0133"+
    "\16\51\1\u0134\5\51\4\0\5\51\1\u0133\16\51\1\u0134"+
    "\5\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\10\51\1\u0135\11\51\1\u0136\6\51\4\0\11\51\1\u0135"+
    "\11\51\1\u0136\6\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\17\51\1\u0137\11\51\4\0\20\51\1\u0137"+
    "\11\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\4\51\1\u0138\5\51\1\u0139\3\51\1\u013a\3\51\1\u013b"+
    "\1\u013c\5\51\4\0\5\51\1\u0138\5\51\1\u0139\3\51"+
    "\1\u013a\3\51\1\u013b\1\u013c\5\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\10\51\1\u013d\20\51\4\0"+
    "\11\51\1\u013d\20\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\4\51\1\u013e\24\51\4\0\5\51\1\u013e"+
    "\24\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\13\51\1\u013f\15\51\4\0\14\51\1\u013f\15\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\1\u0140\30\51"+
    "\4\0\1\51\1\u0140\30\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\4\51\1\u0141\14\51\1\u0142\1\u0143"+
    "\6\51\4\0\5\51\1\u0141\14\51\1\u0142\1\u0143\6\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\22\51"+
    "\1\u0144\6\51\4\0\23\51\1\u0144\6\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\2\51\1\u0145\17\51"+
    "\1\u0146\6\51\4\0\3\51\1\u0145\17\51\1\u0146\6\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\12\51"+
    "\1\u0147\16\51\4\0\13\51\1\u0147\16\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\21\51\1\u0148\7\51"+
    "\4\0\22\51\1\u0148\7\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\17\51\1\u0149\11\51\4\0\20\51"+
    "\1\u0149\11\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\16\51\1\u014a\12\51\4\0\17\51\1\u014a\12\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\3\51"+
    "\1\u014b\25\51\4\0\4\51\1\u014b\25\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\24\51\1\u014c\4\51"+
    "\4\0\25\51\1\u014c\4\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\4\51\1\u014d\24\51\4\0\5\51"+
    "\1\u014d\24\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\23\51\1\u014e\5\51\4\0\24\51\1\u014e\5\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\2\51"+
    "\1\u014f\1\51\1\u0150\1\u0151\1\u0152\1\u0153\3\51\1\u0154"+
    "\1\u0155\1\u0156\1\51\1\u0157\1\51\1\u0158\1\51\1\u0159"+
    "\1\51\1\u015a\3\51\4\0\3\51\1\u014f\1\51\1\u0150"+
    "\1\u0151\1\u0152\1\u0153\3\51\1\u0154\1\u0155\1\u0156\1\51"+
    "\1\u0157\1\51\1\u0158\1\51\1\u0159\1\51\1\u015a\3\51"+
    "\2\0\1\51\22\0\1\u015b\1\0\11\51\6\0\1\51"+
    "\1\u015c\27\51\4\0\2\51\1\u015c\27\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\25\51\1\u015d\3\51"+
    "\4\0\26\51\1\u015d\3\51\2\0\1\51\22\0\1\u015e"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\u015f\1\0\11\51\6\0\4\51\1\u0160\24\51"+
    "\4\0\5\51\1\u0160\24\51\2\0\1\51\22\0\1\u0161"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\7\51\1\u0162\21\51"+
    "\4\0\10\51\1\u0162\21\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\15\51\1\u0163\13\51\4\0\16\51"+
    "\1\u0163\13\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\22\51\1\u0164\6\51\4\0\23\51\1\u0164\6\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\3\51"+
    "\1\u0165\25\51\4\0\4\51\1\u0165\25\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\21\51\1\u0166\7\51"+
    "\4\0\22\51\1\u0166\7\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\24\51\1\u0167\4\51\4\0\25\51"+
    "\1\u0167\4\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\4\51\1\u0168\24\51\4\0\5\51\1\u0168\24\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\4\51"+
    "\1\u0169\24\51\4\0\5\51\1\u0169\24\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\6\51\1\u016a\14\51"+
    "\1\u016b\5\51\4\0\7\51\1\u016a\14\51\1\u016b\5\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\10\51"+
    "\1\u016c\10\51\1\u016d\7\51\4\0\11\51\1\u016c\10\51"+
    "\1\u016d\7\51\2\0\1\51\22\0\1\u016e\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\24\51\1\u016f\4\51\4\0\25\51"+
    "\1\u016f\4\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\15\51\1\u0170\13\51\4\0\16\51\1\u0170\13\51"+
    "\2\0\1\51\22\0\1\176\1\0\1\51\1\u0171\1\u0172"+
    "\6\51\6\0\1\51\1\u0173\1\u0174\1\u0175\1\u0176\1\51"+
    "\1\u0177\4\51\1\u0178\1\u0179\1\u017a\1\51\1\u017b\11\51"+
    "\4\0\2\51\1\u0173\1\u0174\1\u0175\1\u0176\1\51\1\u0177"+
    "\4\51\1\u0178\1\u0179\1\u017a\1\51\1\u017b\11\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\13\51\1\u017c"+
    "\15\51\4\0\14\51\1\u017c\15\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\2\51\1\u017d\5\51\1\u017e"+
    "\2\51\1\u017f\15\51\4\0\3\51\1\u017d\5\51\1\u017e"+
    "\2\51\1\u017f\15\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\17\51\1\u0180\11\51\4\0\20\51\1\u0180"+
    "\11\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\21\51\1\u0181\7\51\4\0\22\51\1\u0181\7\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\14\51\1\u0182"+
    "\14\51\4\0\15\51\1\u0182\14\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\1\u0183\30\51\4\0\1\51"+
    "\1\u0183\30\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\15\51\1\u0184\4\51\1\u0185\6\51\4\0\16\51"+
    "\1\u0184\4\51\1\u0185\6\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\4\51\1\u0186\24\51\4\0\5\51"+
    "\1\u0186\24\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\1\u0187\30\51\4\0\1\51\1\u0187\30\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\13\51\1\u0188"+
    "\5\51\1\u0189\7\51\4\0\14\51\1\u0188\5\51\1\u0189"+
    "\7\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\2\51\1\u018a\17\51\1\u018b\6\51\4\0\3\51\1\u018a"+
    "\17\51\1\u018b\6\51\2\0\1\51\22\0\1\176\1\0"+
    "\6\51\1\u018c\2\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\27\51\1\u018d"+
    "\1\51\4\0\30\51\1\u018d\1\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\25\51\1\u018e\3\51\4\0"+
    "\26\51\1\u018e\3\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\16\51\1\u018f\12\51\4\0\17\51\1\u018f"+
    "\12\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\13\51\1\u0190\15\51\4\0\14\51\1\u0190\15\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\2\51\1\u0191"+
    "\26\51\4\0\3\51\1\u0191\26\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\1\u0192\5\51\1\u0193\22\51"+
    "\4\0\1\51\1\u0192\5\51\1\u0193\22\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\13\51\1\u0194\3\51"+
    "\1\u0195\3\51\1\u0196\5\51\4\0\14\51\1\u0194\3\51"+
    "\1\u0195\3\51\1\u0196\5\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\3\51\1\u0197\25\51\4\0\4\51"+
    "\1\u0197\25\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\5\51\1\u0198\23\51\4\0\6\51\1\u0198\23\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\23\51"+
    "\1\u0199\5\51\4\0\24\51\1\u0199\5\51\2\0\1\51"+
    "\22\0\1\u019a\1\0\11\51\6\0\6\51\1\u019b\1\51"+
    "\1\u019c\20\51\4\0\7\51\1\u019b\1\51\1\u019c\20\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\23\51"+
    "\1\u019d\5\51\4\0\24\51\1\u019d\5\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\6\51\1\u019e\22\51"+
    "\4\0\7\51\1\u019e\22\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\1\u019f\30\51\4\0\1\51\1\u019f"+
    "\30\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\4\51\1\u01a0\24\51\4\0\5\51\1\u01a0\24\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\17\51\1\u01a1"+
    "\11\51\4\0\20\51\1\u01a1\11\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\10\51\1\u01a2\20\51\4\0"+
    "\11\51\1\u01a2\20\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\22\51\1\u01a3\6\51\4\0\23\51\1\u01a3"+
    "\6\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\6\51\1\u01a4\5\51\1\u01a5\2\51\1\u01a6\2\51\1\u01a7"+
    "\6\51\4\0\7\51\1\u01a4\5\51\1\u01a5\2\51\1\u01a6"+
    "\2\51\1\u01a7\6\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\13\51\1\u01a8\5\51\1\u01a9\5\51\1\u01aa"+
    "\1\51\4\0\14\51\1\u01a8\5\51\1\u01a9\5\51\1\u01aa"+
    "\1\51\2\0\1\51\22\0\1\u01ab\1\0\11\51\6\0"+
    "\21\51\1\u01ac\1\u01ad\6\51\4\0\22\51\1\u01ac\1\u01ad"+
    "\6\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\3\51\1\u01ae\1\u01af\14\51\1\u01b0\1\u01b1\6\51\4\0"+
    "\4\51\1\u01ae\1\u01af\14\51\1\u01b0\1\u01b1\6\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\2\51\1\u01b2"+
    "\26\51\4\0\3\51\1\u01b2\26\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\2\51\1\u01b3\17\51\1\u01b4"+
    "\6\51\4\0\3\51\1\u01b3\17\51\1\u01b4\6\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\2\51\1\u01b5"+
    "\15\51\1\u01b6\2\51\1\u01b7\5\51\4\0\3\51\1\u01b5"+
    "\15\51\1\u01b6\2\51\1\u01b7\5\51\2\0\1\51\22\0"+
    "\1\u01b8\1\0\11\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\4\51\1\u01b9"+
    "\16\51\1\u01ba\5\51\4\0\5\51\1\u01b9\16\51\1\u01ba"+
    "\5\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\10\51\1\u01bb\11\51\1\u01bc\6\51\4\0\11\51\1\u01bb"+
    "\11\51\1\u01bc\6\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\4\51\1\u01bd\11\51\1\u01be\3\51\1\u01bf"+
    "\1\u01c0\5\51\4\0\5\51\1\u01bd\11\51\1\u01be\3\51"+
    "\1\u01bf\1\u01c0\5\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\10\51\1\u01c1\20\51\4\0\11\51\1\u01c1"+
    "\20\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\4\51\1\u01c2\24\51\4\0\5\51\1\u01c2\24\51\2\0"+
    "\1\51\22\0\1\u01c3\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\2\51\1\u01c4\10\51\1\u01c5\15\51\4\0\3\51\1\u01c4"+
    "\10\51\1\u01c5\15\51\2\0\1\51\22\0\1\u01c6\1\0"+
    "\11\51\6\0\16\51\1\u01c7\12\51\4\0\17\51\1\u01c7"+
    "\12\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\1\51\1\u01c8\27\51\4\0\2\51\1\u01c8\27\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\2\51\1\u01c9"+
    "\17\51\1\u01ca\6\51\4\0\3\51\1\u01c9\17\51\1\u01ca"+
    "\6\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\1\u01cb\30\51\4\0\1\51\1\u01cb\30\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\22\51\1\u01cc\6\51"+
    "\4\0\23\51\1\u01cc\6\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\27\51\1\u01cd\1\51\4\0\30\51"+
    "\1\u01cd\1\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\1\u01ce\30\51\4\0\1\51\1\u01ce\30\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\23\51\1\u01cf"+
    "\5\51\4\0\24\51\1\u01cf\5\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\13\51\1\u01d0\15\51\4\0"+
    "\14\51\1\u01d0\15\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\13\51\1\u01d1\15\51\4\0\14\51\1\u01d1"+
    "\15\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\4\51\1\u01d2\24\51\4\0\5\51\1\u01d2\24\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\4\51\1\u01d3"+
    "\24\51\4\0\5\51\1\u01d3\24\51\2\0\1\51\24\0"+
    "\1\354\110\0\2\73\1\0\132\73\2\74\1\0\132\74"+
    "\2\100\1\0\132\100\2\105\1\0\132\105\10\0\1\u0105"+
    "\11\0\1\u01d4\1\0\11\124\5\0\32\124\1\0\1\124"+
    "\2\0\32\124\2\0\1\124\10\0\1\u0105\11\0\1\124"+
    "\1\0\11\124\5\0\22\124\1\u01d5\7\124\1\0\1\124"+
    "\2\0\22\124\1\u01d5\7\124\2\0\1\124\10\0\1\u0105"+
    "\11\0\1\u01d6\1\0\11\124\5\0\32\124\1\0\1\124"+
    "\2\0\32\124\2\0\1\124\10\0\1\u0105\11\0\1\124"+
    "\1\0\11\124\5\0\3\124\1\u01d7\26\124\1\0\1\124"+
    "\2\0\3\124\1\u01d7\26\124\2\0\1\124\10\0\1\u0105"+
    "\11\0\1\124\1\0\11\124\5\0\3\124\1\u01d8\26\124"+
    "\1\0\1\124\2\0\3\124\1\u01d8\26\124\2\0\1\124"+
    "\10\0\1\u0105\11\0\1\u01d9\1\0\11\124\5\0\32\124"+
    "\1\0\1\124\2\0\32\124\2\0\1\124\10\0\1\u0105"+
    "\11\0\1\124\1\0\11\124\5\0\20\124\1\u01da\11\124"+
    "\1\0\1\124\2\0\20\124\1\u01da\11\124\2\0\1\124"+
    "\10\0\1\u0105\11\0\1\124\1\0\11\124\5\0\20\124"+
    "\1\u01db\11\124\1\0\1\124\2\0\20\124\1\u01db\11\124"+
    "\2\0\1\124\10\0\1\u0105\11\0\1\124\1\0\11\124"+
    "\5\0\22\124\1\u01dc\7\124\1\0\1\124\2\0\22\124"+
    "\1\u01dc\7\124\2\0\1\124\2\24\3\0\57\24\1\u01dd"+
    "\35\24\1\u01dd\12\24\64\0\1\u01de\35\0\1\u01de\34\0"+
    "\1\u0115\1\0\11\u0115\5\0\1\u0115\31\u0116\1\0\1\u0115"+
    "\2\0\1\u0115\31\u0116\2\0\1\u0116\22\0\1\u01df\1\0"+
    "\11\u0116\5\0\32\u0116\1\0\1\u0116\2\0\32\u0116\2\0"+
    "\1\u0116\64\0\1\u01e0\35\0\1\u01e0\12\0\2\153\3\0"+
    "\11\153\1\154\17\153\1\154\6\153\1\u01e1\35\153\1\u01e1"+
    "\33\153\3\0\11\153\1\154\17\153\1\154\10\153\1\154"+
    "\35\153\1\154\27\153\35\0\1\u011c\107\0\1\u011b\11\0"+
    "\1\163\1\0\11\163\1\u011c\4\0\3\163\1\u01e2\26\163"+
    "\1\0\1\163\2\0\3\163\1\u01e2\26\163\2\0\1\163"+
    "\24\0\11\32\6\0\21\32\1\u01e3\7\32\4\0\22\32"+
    "\1\u01e3\7\32\2\0\1\32\67\0\1\u01e4\35\0\1\u01e4"+
    "\54\0\1\u01e5\35\0\1\u01e5\115\0\1\u01e6\35\0\1\u01e6"+
    "\76\0\1\u01e7\35\0\1\u01e7\34\0\1\176\1\0\11\51"+
    "\6\0\3\51\1\u01e8\25\51\4\0\4\51\1\u01e8\25\51"+
    "\2\0\1\51\22\0\1\176\1\0\7\51\1\u01e9\1\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\u01ea"+
    "\1\0\11\51\6\0\1\u01eb\7\51\1\u01ec\7\51\1\u01ed"+
    "\5\51\1\u01ee\1\u01ef\1\51\4\0\1\51\1\u01eb\7\51"+
    "\1\u01ec\7\51\1\u01ed\5\51\1\u01ee\1\u01ef\1\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\6\51\1\u01f0"+
    "\22\51\4\0\7\51\1\u01f0\22\51\2\0\1\51\22\0"+
    "\1\u01f1\1\0\11\51\6\0\10\51\1\u01f2\20\51\4\0"+
    "\11\51\1\u01f2\20\51\2\0\1\51\22\0\1\u01f3\1\0"+
    "\11\51\6\0\31\51\4\0\32\51\2\0\1\51\22\0"+
    "\1\u01f4\1\0\11\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\4\51\1\u01f5"+
    "\24\51\4\0\5\51\1\u01f5\24\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\16\51\1\u01f6\12\51\4\0"+
    "\17\51\1\u01f6\12\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\4\51\1\u01f7\24\51\4\0\5\51\1\u01f7"+
    "\24\51\2\0\1\51\22\0\1\u01f8\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\6\51\1\u01f9\22\51\4\0\7\51\1\u01f9"+
    "\22\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\21\51\1\u01fa\7\51\4\0\22\51\1\u01fa\7\51\2\0"+
    "\1\51\22\0\1\u01fb\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\u01fc\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\u01fd\1\0"+
    "\11\51\6\0\31\51\4\0\32\51\2\0\1\51\22\0"+
    "\1\u01fe\1\0\11\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\u01ff\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\u0200\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\23\51\1\u0201\5\51\4\0\24\51\1\u0201"+
    "\5\51\2\0\1\51\22\0\1\u0202\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\u0203\1\0"+
    "\11\51\6\0\31\51\4\0\32\51\2\0\1\51\22\0"+
    "\1\u0204\1\0\11\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\u0205\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\u0206\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\u0207\1\0"+
    "\11\51\6\0\31\51\4\0\32\51\2\0\1\51\22\0"+
    "\1\u0208\1\0\11\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\u0209\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\u020a\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\23\51\1\u020b\5\51\4\0\24\51\1\u020b"+
    "\5\51\2\0\1\51\22\0\1\u020c\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\31\51\4\0\1\u020d\31\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\23\51\1\u020e\5\51"+
    "\4\0\24\51\1\u020e\5\51\2\0\1\51\22\0\1\u020f"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\u0210\1\0\11\51\6\0\31\51\4\0\32\51"+
    "\2\0\1\51\22\0\1\u0211\1\0\11\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\22\0\1\u0212\1\0\11\51"+
    "\6\0\5\51\1\u0213\14\51\1\u0214\6\51\4\0\6\51"+
    "\1\u0213\14\51\1\u0214\6\51\2\0\1\51\22\0\1\u0215"+
    "\1\0\11\51\6\0\1\u0216\7\51\1\u0217\3\51\1\u0218"+
    "\14\51\4\0\1\51\1\u0216\7\51\1\u0217\3\51\1\u0218"+
    "\14\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\17\51\1\u0219\11\51\4\0\20\51\1\u0219\11\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\4\51\1\u021a"+
    "\24\51\4\0\5\51\1\u021a\24\51\2\0\1\51\22\0"+
    "\1\176\1\0\3\51\1\u021b\5\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\6\51\1\u021c\22\51\4\0\7\51\1\u021c\22\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\1\u021d\30\51"+
    "\4\0\1\51\1\u021d\30\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\2\51\1\u021e\17\51\1\u021f\6\51"+
    "\4\0\3\51\1\u021e\17\51\1\u021f\6\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\20\51\1\u0220\10\51"+
    "\4\0\21\51\1\u0220\10\51\2\0\1\51\22\0\1\u0221"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\4\51\1\u0222\16\51"+
    "\1\u0223\5\51\4\0\5\51\1\u0222\16\51\1\u0223\5\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\10\51"+
    "\1\u0224\11\51\1\u0225\6\51\4\0\11\51\1\u0224\11\51"+
    "\1\u0225\6\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\4\51\1\u0226\11\51\1\u0227\3\51\1\u0228\1\u0229"+
    "\5\51\4\0\5\51\1\u0226\11\51\1\u0227\3\51\1\u0228"+
    "\1\u0229\5\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\10\51\1\u022a\20\51\4\0\11\51\1\u022a\20\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\4\51"+
    "\1\u022b\24\51\4\0\5\51\1\u022b\24\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\13\51\1\u022c\15\51"+
    "\4\0\14\51\1\u022c\15\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\1\u022d\30\51\4\0\1\51\1\u022d"+
    "\30\51\2\0\1\51\22\0\1\u022e\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\2\51\1\u022f\17\51\1\u0230\6\51\4\0"+
    "\3\51\1\u022f\17\51\1\u0230\6\51\2\0\1\51\24\0"+
    "\1\u0231\17\0\1\u0231\11\0\1\u0231\6\0\1\u0231\3\0"+
    "\1\u0231\3\0\1\u0231\4\0\1\u0231\11\0\1\u0231\6\0"+
    "\1\u0231\3\0\1\u0231\2\0\1\u0231\24\0\1\u0232\1\0"+
    "\11\51\6\0\31\51\4\0\32\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\22\51\1\u0233\1\51\1\u0234"+
    "\4\51\4\0\23\51\1\u0233\1\51\1\u0234\4\51\2\0"+
    "\1\51\24\0\1\u0235\17\0\1\u0235\11\0\1\u0235\6\0"+
    "\1\u0235\3\0\1\u0235\3\0\1\u0235\4\0\1\u0235\11\0"+
    "\1\u0235\6\0\1\u0235\3\0\1\u0235\2\0\1\u0235\26\0"+
    "\1\u0236\17\0\1\u0236\11\0\1\u0236\6\0\1\u0236\3\0"+
    "\1\u0236\3\0\1\u0236\4\0\1\u0236\11\0\1\u0236\6\0"+
    "\1\u0236\3\0\1\u0236\2\0\1\u0236\24\0\1\176\1\0"+
    "\11\51\6\0\6\51\1\u0237\22\51\4\0\7\51\1\u0237"+
    "\22\51\2\0\1\51\24\0\1\u0238\17\0\1\u0238\11\0"+
    "\1\u0238\6\0\1\u0238\3\0\1\u0238\3\0\1\u0238\4\0"+
    "\1\u0238\11\0\1\u0238\6\0\1\u0238\3\0\1\u0238\2\0"+
    "\1\u0238\24\0\1\176\1\0\11\51\6\0\16\51\1\u0239"+
    "\12\51\4\0\17\51\1\u0239\12\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\13\51\1\u023a\15\51\4\0"+
    "\14\51\1\u023a\15\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\4\51\1\u023b\24\51\4\0\5\51\1\u023b"+
    "\24\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\1\51\1\u023c\1\u023d\5\51\1\u023e\3\51\1\u023f\4\51"+
    "\1\u0240\7\51\4\0\2\51\1\u023c\1\u023d\5\51\1\u023e"+
    "\3\51\1\u023f\4\51\1\u0240\7\51\2\0\1\51\22\0"+
    "\1\u0241\1\0\11\51\6\0\10\51\1\u0242\20\51\4\0"+
    "\11\51\1\u0242\20\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\21\51\1\u0243\7\51\4\0\22\51\1\u0243"+
    "\7\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\14\51\1\u0244\14\51\4\0\15\51\1\u0244\14\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\15\51\1\u0245"+
    "\13\51\4\0\16\51\1\u0245\13\51\2\0\1\51\22\0"+
    "\1\u0246\1\0\11\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\u0247\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\13\51\1\u0248\15\51\4\0\14\51\1\u0248\15\51\2\0"+
    "\1\51\24\0\1\u0249\17\0\1\u0249\11\0\1\u0249\6\0"+
    "\1\u0249\3\0\1\u0249\3\0\1\u0249\4\0\1\u0249\11\0"+
    "\1\u0249\6\0\1\u0249\3\0\1\u0249\2\0\1\u0249\24\0"+
    "\1\176\1\0\11\51\6\0\23\51\1\u024a\5\51\4\0"+
    "\24\51\1\u024a\5\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\20\51\1\u024b\10\51\4\0\21\51\1\u024b"+
    "\10\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\4\51\1\u024c\16\51\1\u024d\5\51\4\0\5\51\1\u024c"+
    "\16\51\1\u024d\5\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\4\51\1\u024e\16\51\1\u024f\5\51\4\0"+
    "\5\51\1\u024e\16\51\1\u024f\5\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\1\u0250\7\51\1\u0251\20\51"+
    "\4\0\1\51\1\u0250\7\51\1\u0251\20\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\1\51\1\u0252\1\u0253"+
    "\1\u0254\1\u0255\24\51\4\0\2\51\1\u0252\1\u0253\1\u0254"+
    "\1\u0255\24\51\2\0\1\51\22\0\1\176\1\0\1\51"+
    "\1\u0256\7\51\6\0\13\51\1\u0257\15\51\4\0\14\51"+
    "\1\u0257\15\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\4\51\1\u0258\24\51\4\0\5\51\1\u0258\24\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\1\51"+
    "\1\u0259\1\51\1\u025a\7\51\1\u025b\15\51\4\0\2\51"+
    "\1\u0259\1\51\1\u025a\7\51\1\u025b\15\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\23\51\1\u025c\5\51"+
    "\4\0\24\51\1\u025c\5\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\10\51\1\u025d\20\51\4\0\11\51"+
    "\1\u025d\20\51\2\0\1\51\22\0\1\u025e\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\17\51\1\u025f\11\51\4\0\20\51"+
    "\1\u025f\11\51\2\0\1\51\22\0\1\u0260\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\12\51\1\u0261\16\51\4\0\13\51"+
    "\1\u0261\16\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\23\51\1\u0262\5\51\4\0\24\51\1\u0262\5\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\15\51"+
    "\1\u0263\13\51\4\0\16\51\1\u0263\13\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\3\51\1\u0264\25\51"+
    "\4\0\4\51\1\u0264\25\51\2\0\1\51\22\0\1\u0265"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\u0266\1\0\11\51\6\0\31\51\4\0\32\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\7\51"+
    "\1\u0267\11\51\1\u0268\7\51\4\0\10\51\1\u0267\11\51"+
    "\1\u0268\7\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\12\51\1\u0269\16\51\4\0\13\51\1\u0269\16\51"+
    "\2\0\1\51\22\0\1\176\1\0\7\51\1\u026a\1\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\10\51\1\u026b\20\51\4\0\11\51"+
    "\1\u026b\20\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\4\51\1\u026c\24\51\4\0\5\51\1\u026c\24\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\24\51"+
    "\1\u026d\4\51\4\0\25\51\1\u026d\4\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\22\51\1\u026e\1\51"+
    "\1\u026f\4\51\4\0\23\51\1\u026e\1\51\1\u026f\4\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\3\51"+
    "\1\u0270\25\51\4\0\4\51\1\u0270\25\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\21\51\1\u0271\7\51"+
    "\4\0\22\51\1\u0271\7\51\2\0\1\51\22\0\1\u0272"+
    "\1\0\11\51\6\0\27\51\1\u0273\1\51\4\0\30\51"+
    "\1\u0273\1\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\10\51\1\u0274\20\51\4\0\11\51\1\u0274\20\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\1\u0275"+
    "\30\51\4\0\1\51\1\u0275\30\51\2\0\1\51\22\0"+
    "\1\u0276\1\0\11\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\22\51\1\u0277"+
    "\6\51\4\0\23\51\1\u0277\6\51\2\0\1\51\24\0"+
    "\1\u0278\17\0\1\u0278\11\0\1\u0278\6\0\1\u0278\3\0"+
    "\1\u0278\3\0\1\u0278\4\0\1\u0278\11\0\1\u0278\6\0"+
    "\1\u0278\3\0\1\u0278\2\0\1\u0278\24\0\1\u0279\1\0"+
    "\11\51\6\0\31\51\4\0\32\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\17\51\1\u027a\11\51\4\0"+
    "\20\51\1\u027a\11\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\4\51\1\u027b\24\51\4\0\5\51\1\u027b"+
    "\24\51\2\0\1\51\22\0\1\u027c\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\15\51\1\u027d\13\51\4\0\16\51\1\u027d"+
    "\13\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\22\51\1\u027e\6\51\4\0\23\51\1\u027e\6\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\15\51\1\u027f"+
    "\13\51\4\0\16\51\1\u027f\13\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\7\51\1\u0280\21\51\4\0"+
    "\10\51\1\u0280\21\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\23\51\1\u0281\5\51\4\0\24\51\1\u0281"+
    "\5\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\4\51\1\u0282\24\51\4\0\5\51\1\u0282\24\51\2\0"+
    "\1\51\22\0\1\u0283\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\u0284\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\13\51\1\u0285\5\51\1\u0286\7\51\4\0"+
    "\14\51\1\u0285\5\51\1\u0286\7\51\2\0\1\51\24\0"+
    "\1\u0287\17\0\1\u0287\11\0\1\u0287\6\0\1\u0287\3\0"+
    "\1\u0287\3\0\1\u0287\4\0\1\u0287\11\0\1\u0287\6\0"+
    "\1\u0287\3\0\1\u0287\2\0\1\u0287\24\0\1\176\1\0"+
    "\11\51\6\0\4\51\1\u0288\24\51\4\0\5\51\1\u0288"+
    "\24\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\4\51\1\u0289\24\51\4\0\5\51\1\u0289\24\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\3\51\1\u028a"+
    "\25\51\4\0\4\51\1\u028a\25\51\2\0\1\51\22\0"+
    "\1\u028b\1\0\11\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\u028c\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\23\51\1\u028d\5\51\4\0\24\51\1\u028d\5\51\2\0"+
    "\1\51\22\0\1\u028e\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\5\51\1\u028f\14\51\1\u0290\6\51\4\0\6\51\1\u028f"+
    "\14\51\1\u0290\6\51\2\0\1\51\24\0\1\u0291\17\0"+
    "\1\u0291\11\0\1\u0291\6\0\1\u0291\3\0\1\u0291\3\0"+
    "\1\u0291\4\0\1\u0291\11\0\1\u0291\6\0\1\u0291\3\0"+
    "\1\u0291\2\0\1\u0291\24\0\1\u0292\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\u0293\1\0"+
    "\11\51\6\0\31\51\4\0\32\51\2\0\1\51\22\0"+
    "\1\u0294\1\0\11\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\u0295\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\u0296\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\u0297\1\0"+
    "\11\51\6\0\31\51\4\0\32\51\2\0\1\51\22\0"+
    "\1\u0298\1\0\11\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\u0299\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\u029a\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\u029b\1\0"+
    "\11\51\6\0\31\51\4\0\32\51\2\0\1\51\24\0"+
    "\1\u029c\17\0\1\u029c\11\0\1\u029c\6\0\1\u029c\3\0"+
    "\1\u029c\3\0\1\u029c\4\0\1\u029c\11\0\1\u029c\6\0"+
    "\1\u029c\3\0\1\u029c\2\0\1\u029c\24\0\1\u029d\1\0"+
    "\11\51\6\0\31\51\4\0\32\51\2\0\1\51\24\0"+
    "\1\u029e\17\0\1\u029e\11\0\1\u029e\6\0\1\u029e\3\0"+
    "\1\u029e\3\0\1\u029e\4\0\1\u029e\11\0\1\u029e\6\0"+
    "\1\u029e\3\0\1\u029e\2\0\1\u029e\24\0\1\176\1\0"+
    "\11\51\6\0\17\51\1\u029f\11\51\4\0\20\51\1\u029f"+
    "\11\51\2\0\1\51\22\0\1\u02a0\1\0\11\51\6\0"+
    "\1\u02a1\7\51\1\u02a2\7\51\1\u02a3\6\51\1\u02a4\1\51"+
    "\4\0\1\51\1\u02a1\7\51\1\u02a2\7\51\1\u02a3\6\51"+
    "\1\u02a4\1\51\2\0\1\51\22\0\1\u02a5\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\u02a6"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\17\51\1\u02a7\11\51"+
    "\4\0\20\51\1\u02a7\11\51\2\0\1\51\22\0\1\u02a8"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\23\51\1\u02a9\5\51"+
    "\4\0\24\51\1\u02a9\5\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\17\51\1\u02aa\11\51\4\0\20\51"+
    "\1\u02aa\11\51\2\0\1\51\22\0\1\u02ab\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\12\51\1\u02ac\16\51\4\0\13\51"+
    "\1\u02ac\16\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\5\51\1\u02ad\23\51\4\0\6\51\1\u02ad\23\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\5\51"+
    "\1\u02ae\23\51\4\0\6\51\1\u02ae\23\51\2\0\1\51"+
    "\10\0\1\u0105\11\0\1\124\1\0\1\u02af\10\124\5\0"+
    "\2\124\1\u02af\11\124\1\u02af\6\124\1\u02af\3\124\1\u02af"+
    "\2\124\1\0\1\u02af\2\0\2\124\1\u02af\11\124\1\u02af"+
    "\6\124\1\u02af\3\124\1\u02af\2\124\1\u02b0\1\0\1\124"+
    "\10\0\1\u0105\11\0\1\124\1\0\1\u02b1\10\124\5\0"+
    "\2\124\1\u02b1\11\124\1\u02b1\6\124\1\u02b1\3\124\1\u02b1"+
    "\2\124\1\0\1\u02b1\2\0\2\124\1\u02b1\11\124\1\u02b1"+
    "\6\124\1\u02b1\3\124\1\u02b1\2\124\1\u02b2\1\0\1\124"+
    "\10\0\1\u0105\11\0\1\124\1\0\1\u02b3\10\124\5\0"+
    "\2\124\1\u02b3\11\124\1\u02b3\6\124\1\u02b3\3\124\1\u02b3"+
    "\2\124\1\0\1\u02b3\2\0\2\124\1\u02b3\11\124\1\u02b3"+
    "\6\124\1\u02b3\3\124\1\u02b3\2\124\1\u02b4\1\0\1\124"+
    "\2\24\3\0\42\24\1\u02b5\35\24\1\u02b5\27\24\47\0"+
    "\1\u02b6\35\0\1\u02b6\74\0\1\u02b7\35\0\1\u02b7\31\0"+
    "\2\153\3\0\11\153\1\154\17\153\1\154\4\153\1\u02b8"+
    "\35\153\1\u02b8\33\153\10\0\1\u011b\11\0\1\163\1\0"+
    "\11\163\1\u011c\4\0\22\163\1\u02b9\7\163\1\0\1\163"+
    "\2\0\22\163\1\u02b9\7\163\2\0\1\163\24\0\11\32"+
    "\6\0\16\32\1\u02ba\12\32\4\0\17\32\1\u02ba\12\32"+
    "\2\0\1\32\64\0\1\u02bb\35\0\1\u02bb\76\0\1\u02bc"+
    "\35\0\1\u02bc\73\0\1\u02bd\35\0\1\u02bd\37\0\1\u02be"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\176\1\0\1\u02bf\10\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\24\0\1\u02c0\17\0\1\u02c0\11\0"+
    "\1\u02c0\6\0\1\u02c0\3\0\1\u02c0\3\0\1\u02c0\4\0"+
    "\1\u02c0\11\0\1\u02c0\6\0\1\u02c0\3\0\1\u02c0\2\0"+
    "\1\u02c0\24\0\1\u02c1\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\u02c2\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\u02c3\1\0"+
    "\11\51\6\0\31\51\4\0\32\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\1\u02c4\30\51\4\0\1\51"+
    "\1\u02c4\30\51\2\0\1\51\22\0\1\u02c5\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\15\51\1\u02c6\13\51\4\0\16\51"+
    "\1\u02c6\13\51\2\0\1\51\24\0\1\u02c7\17\0\1\u02c7"+
    "\11\0\1\u02c7\6\0\1\u02c7\3\0\1\u02c7\3\0\1\u02c7"+
    "\4\0\1\u02c7\11\0\1\u02c7\6\0\1\u02c7\3\0\1\u02c7"+
    "\2\0\1\u02c7\24\0\1\u02c8\1\0\11\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\24\0\1\u02c9\17\0\1\u02c9"+
    "\11\0\1\u02c9\6\0\1\u02c9\3\0\1\u02c9\3\0\1\u02c9"+
    "\4\0\1\u02c9\11\0\1\u02c9\6\0\1\u02c9\3\0\1\u02c9"+
    "\2\0\1\u02c9\26\0\1\u02ca\17\0\1\u02ca\11\0\1\u02ca"+
    "\6\0\1\u02ca\3\0\1\u02ca\3\0\1\u02ca\4\0\1\u02ca"+
    "\11\0\1\u02ca\6\0\1\u02ca\3\0\1\u02ca\2\0\1\u02ca"+
    "\24\0\1\176\1\0\11\51\6\0\21\51\1\u02cb\7\51"+
    "\4\0\22\51\1\u02cb\7\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\21\51\1\u02cc\7\51\4\0\22\51"+
    "\1\u02cc\7\51\2\0\1\51\24\0\1\u02cd\17\0\1\u02cd"+
    "\11\0\1\u02cd\6\0\1\u02cd\3\0\1\u02cd\3\0\1\u02cd"+
    "\4\0\1\u02cd\11\0\1\u02cd\6\0\1\u02cd\3\0\1\u02cd"+
    "\2\0\1\u02cd\24\0\1\u02ce\1\0\11\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\22\0\1\u02cf\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\24\0\1\u02d0"+
    "\17\0\1\u02d0\11\0\1\u02d0\6\0\1\u02d0\3\0\1\u02d0"+
    "\3\0\1\u02d0\4\0\1\u02d0\11\0\1\u02d0\6\0\1\u02d0"+
    "\3\0\1\u02d0\2\0\1\u02d0\26\0\1\u02d1\17\0\1\u02d1"+
    "\11\0\1\u02d1\6\0\1\u02d1\3\0\1\u02d1\3\0\1\u02d1"+
    "\4\0\1\u02d1\11\0\1\u02d1\6\0\1\u02d1\3\0\1\u02d1"+
    "\2\0\1\u02d1\26\0\1\u02d2\17\0\1\u02d2\11\0\1\u02d2"+
    "\6\0\1\u02d2\3\0\1\u02d2\3\0\1\u02d2\4\0\1\u02d2"+
    "\11\0\1\u02d2\6\0\1\u02d2\3\0\1\u02d2\2\0\1\u02d2"+
    "\26\0\1\u02d3\17\0\1\u02d3\11\0\1\u02d3\6\0\1\u02d3"+
    "\3\0\1\u02d3\3\0\1\u02d3\4\0\1\u02d3\11\0\1\u02d3"+
    "\6\0\1\u02d3\3\0\1\u02d3\2\0\1\u02d3\26\0\1\u02d4"+
    "\17\0\1\u02d4\11\0\1\u02d4\6\0\1\u02d4\3\0\1\u02d4"+
    "\3\0\1\u02d4\4\0\1\u02d4\11\0\1\u02d4\6\0\1\u02d4"+
    "\3\0\1\u02d4\2\0\1\u02d4\26\0\1\u02d5\17\0\1\u02d5"+
    "\11\0\1\u02d5\6\0\1\u02d5\3\0\1\u02d5\3\0\1\u02d5"+
    "\4\0\1\u02d5\11\0\1\u02d5\6\0\1\u02d5\3\0\1\u02d5"+
    "\2\0\1\u02d5\26\0\1\u02d6\17\0\1\u02d6\11\0\1\u02d6"+
    "\6\0\1\u02d6\3\0\1\u02d6\3\0\1\u02d6\4\0\1\u02d6"+
    "\11\0\1\u02d6\6\0\1\u02d6\3\0\1\u02d6\2\0\1\u02d6"+
    "\26\0\1\u02d7\17\0\1\u02d7\11\0\1\u02d7\6\0\1\u02d7"+
    "\3\0\1\u02d7\3\0\1\u02d7\4\0\1\u02d7\11\0\1\u02d7"+
    "\6\0\1\u02d7\3\0\1\u02d7\2\0\1\u02d7\26\0\1\u02d8"+
    "\17\0\1\u02d8\11\0\1\u02d8\6\0\1\u02d8\3\0\1\u02d8"+
    "\3\0\1\u02d8\4\0\1\u02d8\11\0\1\u02d8\6\0\1\u02d8"+
    "\3\0\1\u02d8\2\0\1\u02d8\26\0\1\u02d9\17\0\1\u02d9"+
    "\11\0\1\u02d9\6\0\1\u02d9\3\0\1\u02d9\3\0\1\u02d9"+
    "\4\0\1\u02d9\11\0\1\u02d9\6\0\1\u02d9\3\0\1\u02d9"+
    "\2\0\1\u02d9\26\0\1\u02da\17\0\1\u02da\11\0\1\u02da"+
    "\6\0\1\u02da\3\0\1\u02da\3\0\1\u02da\4\0\1\u02da"+
    "\11\0\1\u02da\6\0\1\u02da\3\0\1\u02da\2\0\1\u02da"+
    "\26\0\1\u02db\17\0\1\u02db\11\0\1\u02db\6\0\1\u02db"+
    "\3\0\1\u02db\3\0\1\u02db\4\0\1\u02db\11\0\1\u02db"+
    "\6\0\1\u02db\3\0\1\u02db\2\0\1\u02db\26\0\1\u02dc"+
    "\17\0\1\u02dc\11\0\1\u02dc\6\0\1\u02dc\3\0\1\u02dc"+
    "\3\0\1\u02dc\4\0\1\u02dc\11\0\1\u02dc\6\0\1\u02dc"+
    "\3\0\1\u02dc\2\0\1\u02dc\26\0\1\u02dd\17\0\1\u02dd"+
    "\11\0\1\u02dd\6\0\1\u02dd\3\0\1\u02dd\3\0\1\u02dd"+
    "\4\0\1\u02dd\11\0\1\u02dd\6\0\1\u02dd\3\0\1\u02dd"+
    "\2\0\1\u02dd\26\0\1\u02de\17\0\1\u02de\11\0\1\u02de"+
    "\6\0\1\u02de\3\0\1\u02de\3\0\1\u02de\4\0\1\u02de"+
    "\11\0\1\u02de\6\0\1\u02de\3\0\1\u02de\2\0\1\u02de"+
    "\24\0\1\u02df\1\0\11\51\6\0\31\51\4\0\32\51"+
    "\2\0\1\51\24\0\1\u02e0\17\0\1\u02e0\11\0\1\u02e0"+
    "\6\0\1\u02e0\3\0\1\u02e0\3\0\1\u02e0\4\0\1\u02e0"+
    "\11\0\1\u02e0\6\0\1\u02e0\3\0\1\u02e0\2\0\1\u02e0"+
    "\24\0\1\176\1\0\11\51\6\0\2\51\1\u02e1\2\51"+
    "\1\u02e2\23\51\4\0\3\51\1\u02e1\2\51\1\u02e2\23\51"+
    "\2\0\1\51\22\0\1\u02e3\1\0\11\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\24\0\1\u02e4\17\0\1\u02e4"+
    "\11\0\1\u02e4\6\0\1\u02e4\3\0\1\u02e4\3\0\1\u02e4"+
    "\4\0\1\u02e4\11\0\1\u02e4\6\0\1\u02e4\3\0\1\u02e4"+
    "\2\0\1\u02e4\26\0\1\u02e5\17\0\1\u02e5\11\0\1\u02e5"+
    "\6\0\1\u02e5\3\0\1\u02e5\3\0\1\u02e5\4\0\1\u02e5"+
    "\11\0\1\u02e5\6\0\1\u02e5\3\0\1\u02e5\2\0\1\u02e5"+
    "\26\0\1\u02e6\17\0\1\u02e6\11\0\1\u02e6\6\0\1\u02e6"+
    "\3\0\1\u02e6\3\0\1\u02e6\4\0\1\u02e6\11\0\1\u02e6"+
    "\6\0\1\u02e6\3\0\1\u02e6\2\0\1\u02e6\26\0\1\u02e7"+
    "\17\0\1\u02e7\11\0\1\u02e7\6\0\1\u02e7\3\0\1\u02e7"+
    "\3\0\1\u02e7\4\0\1\u02e7\11\0\1\u02e7\6\0\1\u02e7"+
    "\3\0\1\u02e7\2\0\1\u02e7\24\0\1\176\1\0\11\51"+
    "\6\0\16\51\1\u02e8\12\51\4\0\17\51\1\u02e8\12\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\16\51"+
    "\1\u02e9\12\51\4\0\17\51\1\u02e9\12\51\2\0\1\51"+
    "\24\0\1\u02ea\17\0\1\u02ea\11\0\1\u02ea\6\0\1\u02ea"+
    "\3\0\1\u02ea\3\0\1\u02ea\4\0\1\u02ea\11\0\1\u02ea"+
    "\6\0\1\u02ea\3\0\1\u02ea\2\0\1\u02ea\24\0\1\u02eb"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\u02ec\1\0\11\51\6\0\31\51\4\0\32\51"+
    "\2\0\1\51\22\0\1\u02ed\1\0\11\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\31\51\4\0\1\u02ee\31\51\2\0\1\51\22\0"+
    "\1\176\1\0\2\51\1\u02ef\6\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\31\51\4\0\1\u02f0\31\51\2\0\1\51\22\0\1\u02f1"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\u02f2\1\0\11\51\6\0\31\51\4\0\32\51"+
    "\2\0\1\51\22\0\1\u02f3\1\0\11\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\24\0\1\u02f4\17\0\1\u02f4"+
    "\11\0\1\u02f4\6\0\1\u02f4\3\0\1\u02f4\3\0\1\u02f4"+
    "\4\0\1\u02f4\11\0\1\u02f4\6\0\1\u02f4\3\0\1\u02f4"+
    "\2\0\1\u02f4\24\0\1\u02f5\1\0\11\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\22\0\1\u02f6\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\u02f7"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\u02f8\1\0\11\51\6\0\31\51\4\0\32\51"+
    "\2\0\1\51\22\0\1\u02f9\1\0\11\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\22\0\1\u02fa\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\u02fb"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\u02fc\1\0\11\51\6\0\31\51\4\0\32\51"+
    "\2\0\1\51\22\0\1\u02fd\1\0\11\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\22\0\1\u02fe\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\u02ff"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\u0300\1\0\11\51\6\0\31\51\4\0\32\51"+
    "\2\0\1\51\24\0\1\u0301\17\0\1\u0301\11\0\1\u0301"+
    "\6\0\1\u0301\3\0\1\u0301\3\0\1\u0301\4\0\1\u0301"+
    "\11\0\1\u0301\6\0\1\u0301\3\0\1\u0301\2\0\1\u0301"+
    "\24\0\1\u0302\1\0\11\51\6\0\31\51\4\0\32\51"+
    "\2\0\1\51\22\0\1\u0303\1\0\11\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\24\0\1\u0304\17\0\1\u0304"+
    "\11\0\1\u0304\6\0\1\u0304\3\0\1\u0304\3\0\1\u0304"+
    "\4\0\1\u0304\11\0\1\u0304\6\0\1\u0304\3\0\1\u0304"+
    "\2\0\1\u0304\24\0\1\u0305\1\0\11\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\22\0\1\u0306\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\u0307"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\10\51\1\u0308\20\51"+
    "\4\0\11\51\1\u0308\20\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\10\51\1\u0309\20\51\4\0\11\51"+
    "\1\u0309\20\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\5\51\1\u030a\23\51\4\0\6\51\1\u030a\23\51"+
    "\2\0\1\51\24\0\1\u030b\17\0\1\u030b\11\0\1\u030b"+
    "\6\0\1\u030b\3\0\1\u030b\3\0\1\u030b\4\0\1\u030b"+
    "\11\0\1\u030b\6\0\1\u030b\3\0\1\u030b\2\0\1\u030b"+
    "\24\0\1\u030c\1\0\11\51\6\0\31\51\4\0\32\51"+
    "\2\0\1\51\24\0\1\u030d\17\0\1\u030d\11\0\1\u030d"+
    "\6\0\1\u030d\3\0\1\u030d\3\0\1\u030d\4\0\1\u030d"+
    "\11\0\1\u030d\6\0\1\u030d\3\0\1\u030d\2\0\1\u030d"+
    "\26\0\1\u030e\17\0\1\u030e\11\0\1\u030e\6\0\1\u030e"+
    "\3\0\1\u030e\3\0\1\u030e\4\0\1\u030e\11\0\1\u030e"+
    "\6\0\1\u030e\3\0\1\u030e\2\0\1\u030e\24\0\1\176"+
    "\1\0\11\51\6\0\2\51\1\u030f\26\51\4\0\3\51"+
    "\1\u030f\26\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\6\51\1\u0310\22\51\4\0\7\51\1\u0310\22\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\10\51"+
    "\1\u0311\20\51\4\0\11\51\1\u0311\20\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\10\51\1\u0312\20\51"+
    "\4\0\11\51\1\u0312\20\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\24\51\1\u0313\4\51\4\0\25\51"+
    "\1\u0313\4\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\15\51\1\u0314\13\51\4\0\16\51\1\u0314\13\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\15\51"+
    "\1\u0315\13\51\4\0\16\51\1\u0315\13\51\2\0\1\51"+
    "\24\0\1\u0316\17\0\1\u0316\11\0\1\u0316\6\0\1\u0316"+
    "\3\0\1\u0316\3\0\1\u0316\4\0\1\u0316\11\0\1\u0316"+
    "\6\0\1\u0316\3\0\1\u0316\2\0\1\u0316\24\0\1\176"+
    "\1\0\11\51\6\0\4\51\1\u0317\12\51\1\u0318\11\51"+
    "\4\0\5\51\1\u0317\12\51\1\u0318\11\51\2\0\1\51"+
    "\24\0\1\u0319\17\0\1\u0319\11\0\1\u0319\6\0\1\u0319"+
    "\3\0\1\u0319\3\0\1\u0319\4\0\1\u0319\11\0\1\u0319"+
    "\6\0\1\u0319\3\0\1\u0319\2\0\1\u0319\24\0\1\u031a"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\24\0\1\u031b\17\0\1\u031b\11\0\1\u031b\6\0\1\u031b"+
    "\3\0\1\u031b\3\0\1\u031b\4\0\1\u031b\11\0\1\u031b"+
    "\6\0\1\u031b\3\0\1\u031b\2\0\1\u031b\26\0\1\u031c"+
    "\17\0\1\u031c\11\0\1\u031c\6\0\1\u031c\3\0\1\u031c"+
    "\3\0\1\u031c\4\0\1\u031c\11\0\1\u031c\6\0\1\u031c"+
    "\3\0\1\u031c\2\0\1\u031c\24\0\1\176\1\0\11\51"+
    "\6\0\10\51\1\u031d\20\51\4\0\11\51\1\u031d\20\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\16\51"+
    "\1\u031e\12\51\4\0\17\51\1\u031e\12\51\2\0\1\51"+
    "\22\0\1\176\1\0\2\51\1\u031f\6\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\22\0\1\176\1\0\1\u0320"+
    "\10\51\6\0\31\51\4\0\32\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\23\51\1\u0321\5\51\4\0"+
    "\24\51\1\u0321\5\51\2\0\1\51\22\0\1\u0322\1\0"+
    "\11\51\6\0\1\u0323\1\51\1\u0324\11\51\1\u0325\2\51"+
    "\1\u0326\1\u0327\1\51\1\u0328\6\51\4\0\1\51\1\u0323"+
    "\1\51\1\u0324\11\51\1\u0325\2\51\1\u0326\1\u0327\1\51"+
    "\1\u0328\6\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\21\51\1\u0329\7\51\4\0\22\51\1\u0329\7\51"+
    "\2\0\1\51\22\0\1\u032a\1\0\11\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\22\0\1\u032b\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\u032c"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\1\0\1\u032d\2\0\1\u032d\15\0\1\176\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\24\0\1\u032e"+
    "\17\0\1\u032e\11\0\1\u032e\6\0\1\u032e\3\0\1\u032e"+
    "\3\0\1\u032e\4\0\1\u032e\11\0\1\u032e\6\0\1\u032e"+
    "\3\0\1\u032e\2\0\1\u032e\24\0\1\u032f\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\22\51\1\u0330\6\51\4\0\23\51"+
    "\1\u0330\6\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\6\51\1\u0331\22\51\4\0\7\51\1\u0331\22\51"+
    "\2\0\1\51\24\0\1\u0332\17\0\1\u0332\11\0\1\u0332"+
    "\6\0\1\u0332\3\0\1\u0332\3\0\1\u0332\4\0\1\u0332"+
    "\11\0\1\u0332\6\0\1\u0332\3\0\1\u0332\2\0\1\u0332"+
    "\24\0\1\176\1\0\11\51\6\0\4\51\1\u0333\24\51"+
    "\4\0\5\51\1\u0333\24\51\2\0\1\51\24\0\1\u0334"+
    "\17\0\1\u0334\11\0\1\u0334\6\0\1\u0334\3\0\1\u0334"+
    "\3\0\1\u0334\4\0\1\u0334\11\0\1\u0334\6\0\1\u0334"+
    "\3\0\1\u0334\2\0\1\u0334\24\0\1\176\1\0\11\51"+
    "\6\0\24\51\1\u0335\4\51\4\0\25\51\1\u0335\4\51"+
    "\2\0\1\51\24\0\1\u0336\17\0\1\u0336\11\0\1\u0336"+
    "\6\0\1\u0336\3\0\1\u0336\3\0\1\u0336\4\0\1\u0336"+
    "\11\0\1\u0336\6\0\1\u0336\3\0\1\u0336\2\0\1\u0336"+
    "\24\0\1\176\1\0\11\51\6\0\4\51\1\u0337\24\51"+
    "\4\0\5\51\1\u0337\24\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\23\51\1\u0338\5\51\4\0\24\51"+
    "\1\u0338\5\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\22\51\1\u0339\6\51\4\0\23\51\1\u0339\6\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\23\51"+
    "\1\u033a\5\51\4\0\24\51\1\u033a\5\51\2\0\1\51"+
    "\24\0\1\u033b\17\0\1\u033b\11\0\1\u033b\6\0\1\u033b"+
    "\3\0\1\u033b\3\0\1\u033b\4\0\1\u033b\11\0\1\u033b"+
    "\6\0\1\u033b\3\0\1\u033b\2\0\1\u033b\26\0\1\u033c"+
    "\17\0\1\u033c\11\0\1\u033c\6\0\1\u033c\3\0\1\u033c"+
    "\3\0\1\u033c\4\0\1\u033c\11\0\1\u033c\6\0\1\u033c"+
    "\3\0\1\u033c\2\0\1\u033c\24\0\1\u033d\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\u033e"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\22\51\1\u033f\6\51"+
    "\4\0\23\51\1\u033f\6\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\23\51\1\u0340\5\51\4\0\24\51"+
    "\1\u0340\5\51\2\0\1\51\22\0\1\u0341\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\24\0\1\u0342"+
    "\17\0\1\u0342\11\0\1\u0342\6\0\1\u0342\3\0\1\u0342"+
    "\3\0\1\u0342\4\0\1\u0342\11\0\1\u0342\6\0\1\u0342"+
    "\3\0\1\u0342\2\0\1\u0342\26\0\1\u0343\17\0\1\u0343"+
    "\11\0\1\u0343\6\0\1\u0343\3\0\1\u0343\3\0\1\u0343"+
    "\4\0\1\u0343\11\0\1\u0343\6\0\1\u0343\3\0\1\u0343"+
    "\2\0\1\u0343\24\0\1\176\1\0\11\51\6\0\10\51"+
    "\1\u0344\20\51\4\0\11\51\1\u0344\20\51\2\0\1\51"+
    "\24\0\1\u0345\17\0\1\u0345\11\0\1\u0345\6\0\1\u0345"+
    "\3\0\1\u0345\3\0\1\u0345\4\0\1\u0345\11\0\1\u0345"+
    "\6\0\1\u0345\3\0\1\u0345\2\0\1\u0345\24\0\1\176"+
    "\1\0\11\51\6\0\16\51\1\u0346\12\51\4\0\17\51"+
    "\1\u0346\12\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\16\51\1\u0347\12\51\4\0\17\51\1\u0347\12\51"+
    "\2\0\1\51\24\0\1\u0348\17\0\1\u0348\11\0\1\u0348"+
    "\6\0\1\u0348\3\0\1\u0348\3\0\1\u0348\4\0\1\u0348"+
    "\11\0\1\u0348\6\0\1\u0348\3\0\1\u0348\2\0\1\u0348"+
    "\26\0\1\u0349\17\0\1\u0349\11\0\1\u0349\6\0\1\u0349"+
    "\3\0\1\u0349\3\0\1\u0349\4\0\1\u0349\11\0\1\u0349"+
    "\6\0\1\u0349\3\0\1\u0349\2\0\1\u0349\26\0\1\u034a"+
    "\17\0\1\u034a\11\0\1\u034a\6\0\1\u034a\3\0\1\u034a"+
    "\3\0\1\u034a\4\0\1\u034a\11\0\1\u034a\6\0\1\u034a"+
    "\3\0\1\u034a\2\0\1\u034a\26\0\1\u034b\17\0\1\u034b"+
    "\11\0\1\u034b\6\0\1\u034b\3\0\1\u034b\3\0\1\u034b"+
    "\4\0\1\u034b\11\0\1\u034b\6\0\1\u034b\3\0\1\u034b"+
    "\2\0\1\u034b\26\0\1\u034c\17\0\1\u034c\11\0\1\u034c"+
    "\6\0\1\u034c\3\0\1\u034c\3\0\1\u034c\4\0\1\u034c"+
    "\11\0\1\u034c\6\0\1\u034c\3\0\1\u034c\2\0\1\u034c"+
    "\26\0\1\u034d\17\0\1\u034d\11\0\1\u034d\6\0\1\u034d"+
    "\3\0\1\u034d\3\0\1\u034d\4\0\1\u034d\11\0\1\u034d"+
    "\6\0\1\u034d\3\0\1\u034d\2\0\1\u034d\26\0\1\u034e"+
    "\17\0\1\u034e\11\0\1\u034e\6\0\1\u034e\3\0\1\u034e"+
    "\3\0\1\u034e\4\0\1\u034e\11\0\1\u034e\6\0\1\u034e"+
    "\3\0\1\u034e\2\0\1\u034e\26\0\1\u034f\17\0\1\u034f"+
    "\11\0\1\u034f\6\0\1\u034f\3\0\1\u034f\3\0\1\u034f"+
    "\4\0\1\u034f\11\0\1\u034f\6\0\1\u034f\3\0\1\u034f"+
    "\2\0\1\u034f\26\0\1\u0350\17\0\1\u0350\11\0\1\u0350"+
    "\6\0\1\u0350\3\0\1\u0350\3\0\1\u0350\4\0\1\u0350"+
    "\11\0\1\u0350\6\0\1\u0350\3\0\1\u0350\2\0\1\u0350"+
    "\26\0\1\u0351\17\0\1\u0351\11\0\1\u0351\6\0\1\u0351"+
    "\3\0\1\u0351\3\0\1\u0351\4\0\1\u0351\11\0\1\u0351"+
    "\6\0\1\u0351\3\0\1\u0351\2\0\1\u0351\26\0\1\u0352"+
    "\17\0\1\u0352\11\0\1\u0352\6\0\1\u0352\3\0\1\u0352"+
    "\3\0\1\u0352\4\0\1\u0352\11\0\1\u0352\6\0\1\u0352"+
    "\3\0\1\u0352\2\0\1\u0352\26\0\1\u0353\17\0\1\u0353"+
    "\11\0\1\u0353\6\0\1\u0353\3\0\1\u0353\3\0\1\u0353"+
    "\4\0\1\u0353\11\0\1\u0353\6\0\1\u0353\3\0\1\u0353"+
    "\2\0\1\u0353\24\0\1\u0354\1\0\11\51\6\0\31\51"+
    "\4\0\32\51\2\0\1\51\22\0\1\u0355\1\0\11\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\22\0\1\u0356"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\u0357\1\0\11\51\6\0\31\51\4\0\32\51"+
    "\2\0\1\51\24\0\1\u0358\17\0\1\u0358\11\0\1\u0358"+
    "\6\0\1\u0358\3\0\1\u0358\3\0\1\u0358\4\0\1\u0358"+
    "\11\0\1\u0358\6\0\1\u0358\3\0\1\u0358\2\0\1\u0358"+
    "\26\0\1\u0359\17\0\1\u0359\11\0\1\u0359\6\0\1\u0359"+
    "\3\0\1\u0359\3\0\1\u0359\4\0\1\u0359\11\0\1\u0359"+
    "\6\0\1\u0359\3\0\1\u0359\2\0\1\u0359\24\0\1\u035a"+
    "\1\0\11\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\24\0\1\u035b\17\0\1\u035b\11\0\1\u035b\6\0\1\u035b"+
    "\3\0\1\u035b\3\0\1\u035b\4\0\1\u035b\11\0\1\u035b"+
    "\6\0\1\u035b\3\0\1\u035b\2\0\1\u035b\24\0\1\176"+
    "\1\0\11\51\6\0\25\51\1\u035c\3\51\4\0\26\51"+
    "\1\u035c\3\51\2\0\1\51\24\0\1\u035d\17\0\1\u035d"+
    "\11\0\1\u035d\6\0\1\u035d\3\0\1\u035d\3\0\1\u035d"+
    "\4\0\1\u035d\11\0\1\u035d\6\0\1\u035d\3\0\1\u035d"+
    "\2\0\1\u035d\2\0\2\24\3\0\52\24\1\u035e\35\24"+
    "\1\u035e\17\24\57\0\1\u035f\35\0\1\u035f\62\0\1\u0360"+
    "\35\0\1\u0360\33\0\2\153\3\0\11\153\1\154\17\153"+
    "\1\154\20\153\1\154\35\153\1\154\17\153\10\0\1\u011b"+
    "\11\0\1\163\1\0\11\163\1\u011c\4\0\17\163\1\u0361"+
    "\12\163\1\0\1\163\2\0\17\163\1\u0361\12\163\2\0"+
    "\1\163\61\0\1\u02bb\35\0\1\u02bb\41\0\1\u0362\17\0"+
    "\1\u0362\11\0\1\u0362\6\0\1\u0362\3\0\1\u0362\3\0"+
    "\1\u0362\4\0\1\u0362\11\0\1\u0362\6\0\1\u0362\3\0"+
    "\1\u0362\2\0\1\u0362\24\0\1\176\1\0\7\51\1\u0363"+
    "\1\51\6\0\31\51\4\0\32\51\2\0\1\51\24\0"+
    "\1\u0364\17\0\1\u0364\11\0\1\u0364\6\0\1\u0364\3\0"+
    "\1\u0364\3\0\1\u0364\4\0\1\u0364\11\0\1\u0364\6\0"+
    "\1\u0364\3\0\1\u0364\2\0\1\u0364\26\0\1\u0365\17\0"+
    "\1\u0365\11\0\1\u0365\6\0\1\u0365\3\0\1\u0365\3\0"+
    "\1\u0365\4\0\1\u0365\11\0\1\u0365\6\0\1\u0365\3\0"+
    "\1\u0365\2\0\1\u0365\26\0\1\u0366\17\0\1\u0366\11\0"+
    "\1\u0366\6\0\1\u0366\3\0\1\u0366\3\0\1\u0366\4\0"+
    "\1\u0366\11\0\1\u0366\6\0\1\u0366\3\0\1\u0366\2\0"+
    "\1\u0366\24\0\1\176\1\0\11\51\6\0\23\51\1\u0367"+
    "\5\51\4\0\24\51\1\u0367\5\51\2\0\1\51\24\0"+
    "\1\u0368\17\0\1\u0368\11\0\1\u0368\6\0\1\u0368\3\0"+
    "\1\u0368\3\0\1\u0368\4\0\1\u0368\11\0\1\u0368\6\0"+
    "\1\u0368\3\0\1\u0368\2\0\1\u0368\26\0\1\u0369\17\0"+
    "\1\u0369\11\0\1\u0369\6\0\1\u0369\3\0\1\u0369\3\0"+
    "\1\u0369\4\0\1\u0369\11\0\1\u0369\6\0\1\u0369\3\0"+
    "\1\u0369\2\0\1\u0369\24\0\1\176\1\0\11\51\6\0"+
    "\23\51\1\u036a\5\51\4\0\24\51\1\u036a\5\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\4\51\1\u036b"+
    "\24\51\4\0\5\51\1\u036b\24\51\2\0\1\51\24\0"+
    "\1\u036c\17\0\1\u036c\11\0\1\u036c\6\0\1\u036c\3\0"+
    "\1\u036c\3\0\1\u036c\4\0\1\u036c\11\0\1\u036c\6\0"+
    "\1\u036c\3\0\1\u036c\2\0\1\u036c\26\0\1\u036d\17\0"+
    "\1\u036d\11\0\1\u036d\6\0\1\u036d\3\0\1\u036d\3\0"+
    "\1\u036d\4\0\1\u036d\11\0\1\u036d\6\0\1\u036d\3\0"+
    "\1\u036d\2\0\1\u036d\26\0\1\u036e\17\0\1\u036e\11\0"+
    "\1\u036e\6\0\1\u036e\3\0\1\u036e\3\0\1\u036e\4\0"+
    "\1\u036e\11\0\1\u036e\6\0\1\u036e\3\0\1\u036e\2\0"+
    "\1\u036e\26\0\1\u036f\17\0\1\u036f\11\0\1\u036f\6\0"+
    "\1\u036f\3\0\1\u036f\3\0\1\u036f\4\0\1\u036f\11\0"+
    "\1\u036f\6\0\1\u036f\3\0\1\u036f\2\0\1\u036f\26\0"+
    "\1\u0370\17\0\1\u0370\11\0\1\u0370\6\0\1\u0370\3\0"+
    "\1\u0370\3\0\1\u0370\4\0\1\u0370\11\0\1\u0370\6\0"+
    "\1\u0370\3\0\1\u0370\2\0\1\u0370\26\0\1\u0371\17\0"+
    "\1\u0371\11\0\1\u0371\6\0\1\u0371\3\0\1\u0371\3\0"+
    "\1\u0371\4\0\1\u0371\11\0\1\u0371\6\0\1\u0371\3\0"+
    "\1\u0371\2\0\1\u0371\26\0\1\u0372\17\0\1\u0372\11\0"+
    "\1\u0372\6\0\1\u0372\3\0\1\u0372\3\0\1\u0372\4\0"+
    "\1\u0372\11\0\1\u0372\6\0\1\u0372\3\0\1\u0372\2\0"+
    "\1\u0372\24\0\1\176\1\0\11\51\6\0\2\51\1\u0373"+
    "\2\51\1\u0374\23\51\4\0\3\51\1\u0373\2\51\1\u0374"+
    "\23\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\2\51\1\u0375\2\51\1\u0376\23\51\4\0\3\51\1\u0375"+
    "\2\51\1\u0376\23\51\2\0\1\51\24\0\1\u0377\17\0"+
    "\1\u0377\11\0\1\u0377\6\0\1\u0377\3\0\1\u0377\3\0"+
    "\1\u0377\4\0\1\u0377\11\0\1\u0377\6\0\1\u0377\3\0"+
    "\1\u0377\2\0\1\u0377\26\0\1\u0378\17\0\1\u0378\11\0"+
    "\1\u0378\6\0\1\u0378\3\0\1\u0378\3\0\1\u0378\4\0"+
    "\1\u0378\11\0\1\u0378\6\0\1\u0378\3\0\1\u0378\2\0"+
    "\1\u0378\26\0\1\u0379\17\0\1\u0379\11\0\1\u0379\6\0"+
    "\1\u0379\3\0\1\u0379\3\0\1\u0379\4\0\1\u0379\11\0"+
    "\1\u0379\6\0\1\u0379\3\0\1\u0379\2\0\1\u0379\26\0"+
    "\1\u037a\17\0\1\u037a\11\0\1\u037a\6\0\1\u037a\3\0"+
    "\1\u037a\3\0\1\u037a\4\0\1\u037a\11\0\1\u037a\6\0"+
    "\1\u037a\3\0\1\u037a\2\0\1\u037a\26\0\1\u037b\17\0"+
    "\1\u037b\11\0\1\u037b\6\0\1\u037b\3\0\1\u037b\3\0"+
    "\1\u037b\4\0\1\u037b\11\0\1\u037b\6\0\1\u037b\3\0"+
    "\1\u037b\2\0\1\u037b\26\0\1\u037c\17\0\1\u037c\11\0"+
    "\1\u037c\6\0\1\u037c\3\0\1\u037c\3\0\1\u037c\4\0"+
    "\1\u037c\11\0\1\u037c\6\0\1\u037c\3\0\1\u037c\2\0"+
    "\1\u037c\26\0\1\u037d\17\0\1\u037d\11\0\1\u037d\6\0"+
    "\1\u037d\3\0\1\u037d\3\0\1\u037d\4\0\1\u037d\11\0"+
    "\1\u037d\6\0\1\u037d\3\0\1\u037d\2\0\1\u037d\26\0"+
    "\1\u037e\17\0\1\u037e\11\0\1\u037e\6\0\1\u037e\3\0"+
    "\1\u037e\3\0\1\u037e\4\0\1\u037e\11\0\1\u037e\6\0"+
    "\1\u037e\3\0\1\u037e\2\0\1\u037e\26\0\1\u037f\17\0"+
    "\1\u037f\11\0\1\u037f\6\0\1\u037f\3\0\1\u037f\3\0"+
    "\1\u037f\4\0\1\u037f\11\0\1\u037f\6\0\1\u037f\3\0"+
    "\1\u037f\2\0\1\u037f\26\0\1\u0380\17\0\1\u0380\11\0"+
    "\1\u0380\6\0\1\u0380\3\0\1\u0380\3\0\1\u0380\4\0"+
    "\1\u0380\11\0\1\u0380\6\0\1\u0380\3\0\1\u0380\2\0"+
    "\1\u0380\26\0\1\u0381\17\0\1\u0381\11\0\1\u0381\6\0"+
    "\1\u0381\3\0\1\u0381\3\0\1\u0381\4\0\1\u0381\11\0"+
    "\1\u0381\6\0\1\u0381\3\0\1\u0381\2\0\1\u0381\26\0"+
    "\1\u0382\17\0\1\u0382\11\0\1\u0382\6\0\1\u0382\3\0"+
    "\1\u0382\3\0\1\u0382\4\0\1\u0382\11\0\1\u0382\6\0"+
    "\1\u0382\3\0\1\u0382\2\0\1\u0382\26\0\1\u0383\17\0"+
    "\1\u0383\11\0\1\u0383\6\0\1\u0383\3\0\1\u0383\3\0"+
    "\1\u0383\4\0\1\u0383\11\0\1\u0383\6\0\1\u0383\3\0"+
    "\1\u0383\2\0\1\u0383\26\0\1\u0384\17\0\1\u0384\11\0"+
    "\1\u0384\6\0\1\u0384\3\0\1\u0384\3\0\1\u0384\4\0"+
    "\1\u0384\11\0\1\u0384\6\0\1\u0384\3\0\1\u0384\2\0"+
    "\1\u0384\26\0\1\u0385\17\0\1\u0385\11\0\1\u0385\6\0"+
    "\1\u0385\3\0\1\u0385\3\0\1\u0385\4\0\1\u0385\11\0"+
    "\1\u0385\6\0\1\u0385\3\0\1\u0385\2\0\1\u0385\26\0"+
    "\1\u0386\17\0\1\u0386\11\0\1\u0386\6\0\1\u0386\3\0"+
    "\1\u0386\3\0\1\u0386\4\0\1\u0386\11\0\1\u0386\6\0"+
    "\1\u0386\3\0\1\u0386\2\0\1\u0386\26\0\1\u0387\17\0"+
    "\1\u0387\11\0\1\u0387\6\0\1\u0387\3\0\1\u0387\3\0"+
    "\1\u0387\4\0\1\u0387\11\0\1\u0387\6\0\1\u0387\3\0"+
    "\1\u0387\2\0\1\u0387\26\0\1\u0388\17\0\1\u0388\11\0"+
    "\1\u0388\6\0\1\u0388\3\0\1\u0388\3\0\1\u0388\4\0"+
    "\1\u0388\11\0\1\u0388\6\0\1\u0388\3\0\1\u0388\2\0"+
    "\1\u0388\26\0\1\u0389\17\0\1\u0389\11\0\1\u0389\6\0"+
    "\1\u0389\3\0\1\u0389\3\0\1\u0389\4\0\1\u0389\11\0"+
    "\1\u0389\6\0\1\u0389\3\0\1\u0389\2\0\1\u0389\26\0"+
    "\1\u038a\17\0\1\u038a\11\0\1\u038a\6\0\1\u038a\3\0"+
    "\1\u038a\3\0\1\u038a\4\0\1\u038a\11\0\1\u038a\6\0"+
    "\1\u038a\3\0\1\u038a\2\0\1\u038a\24\0\1\176\1\0"+
    "\11\51\6\0\15\51\1\u038b\13\51\4\0\16\51\1\u038b"+
    "\13\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\5\51\1\u038c\23\51\4\0\6\51\1\u038c\23\51\2\0"+
    "\1\51\24\0\1\u038d\17\0\1\u038d\11\0\1\u038d\6\0"+
    "\1\u038d\3\0\1\u038d\3\0\1\u038d\4\0\1\u038d\11\0"+
    "\1\u038d\6\0\1\u038d\3\0\1\u038d\2\0\1\u038d\24\0"+
    "\1\176\1\0\11\51\6\0\21\51\1\u038e\7\51\4\0"+
    "\22\51\1\u038e\7\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\1\u038f\30\51\4\0\1\51\1\u038f\30\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\15\51"+
    "\1\u0390\13\51\4\0\16\51\1\u0390\13\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\21\51\1\u0391\7\51"+
    "\4\0\22\51\1\u0391\7\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\3\51\1\u0392\25\51\4\0\4\51"+
    "\1\u0392\25\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\4\51\1\u0393\24\51\4\0\5\51\1\u0393\24\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\4\51"+
    "\1\u0394\24\51\4\0\5\51\1\u0394\24\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\21\51\1\u0395\7\51"+
    "\4\0\22\51\1\u0395\7\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\23\51\1\u0396\5\51\4\0\24\51"+
    "\1\u0396\5\51\2\0\1\51\24\0\1\u0397\17\0\1\u0397"+
    "\11\0\1\u0397\6\0\1\u0397\3\0\1\u0397\3\0\1\u0397"+
    "\4\0\1\u0397\11\0\1\u0397\6\0\1\u0397\3\0\1\u0397"+
    "\2\0\1\u0397\24\0\1\176\1\0\11\51\6\0\15\51"+
    "\1\u0398\13\51\4\0\16\51\1\u0398\13\51\2\0\1\51"+
    "\22\0\1\176\1\0\1\u0399\1\u039a\1\u039b\1\u039c\1\u039d"+
    "\1\51\1\u039e\2\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\24\0\1\u039f\17\0\1\u039f\11\0\1\u039f\6\0"+
    "\1\u039f\3\0\1\u039f\3\0\1\u039f\4\0\1\u039f\11\0"+
    "\1\u039f\6\0\1\u039f\3\0\1\u039f\2\0\1\u039f\24\0"+
    "\1\u03a0\1\0\11\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\u03a1\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\u03a2\1\0\11\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\u03a3\1\0"+
    "\11\51\6\0\31\51\4\0\32\51\2\0\1\51\22\0"+
    "\1\u03a4\1\0\11\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\u03a5\1\0\11\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\2\51\1\u03a6\26\51\4\0\3\51\1\u03a6\26\51\2\0"+
    "\1\51\24\0\1\u03a7\17\0\1\u03a7\11\0\1\u03a7\6\0"+
    "\1\u03a7\3\0\1\u03a7\3\0\1\u03a7\4\0\1\u03a7\11\0"+
    "\1\u03a7\6\0\1\u03a7\3\0\1\u03a7\2\0\1\u03a7\26\0"+
    "\1\u03a8\17\0\1\u03a8\11\0\1\u03a8\6\0\1\u03a8\3\0"+
    "\1\u03a8\3\0\1\u03a8\4\0\1\u03a8\11\0\1\u03a8\6\0"+
    "\1\u03a8\3\0\1\u03a8\2\0\1\u03a8\26\0\1\u03a9\17\0"+
    "\1\u03a9\11\0\1\u03a9\6\0\1\u03a9\3\0\1\u03a9\3\0"+
    "\1\u03a9\4\0\1\u03a9\11\0\1\u03a9\6\0\1\u03a9\3\0"+
    "\1\u03a9\2\0\1\u03a9\47\0\1\u03aa\35\0\1\u03aa\55\0"+
    "\1\u03ab\17\0\1\u03ab\11\0\1\u03ab\6\0\1\u03ab\3\0"+
    "\1\u03ab\3\0\1\u03ab\4\0\1\u03ab\11\0\1\u03ab\6\0"+
    "\1\u03ab\3\0\1\u03ab\2\0\1\u03ab\24\0\1\176\1\0"+
    "\11\51\6\0\23\51\1\u03ac\5\51\4\0\24\51\1\u03ac"+
    "\5\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\4\51\1\u03ad\24\51\4\0\5\51\1\u03ad\24\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\23\51\1\u03ae"+
    "\5\51\4\0\24\51\1\u03ae\5\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\23\51\1\u03af\5\51\4\0"+
    "\24\51\1\u03af\5\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\2\51\1\u03b0\26\51\4\0\3\51\1\u03b0"+
    "\26\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\23\51\1\u03b1\1\51\1\u03b2\3\51\4\0\24\51\1\u03b1"+
    "\1\51\1\u03b2\3\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\4\51\1\u03b3\24\51\4\0\5\51\1\u03b3"+
    "\24\51\2\0\1\51\24\0\1\u03b4\17\0\1\u03b4\11\0"+
    "\1\u03b4\6\0\1\u03b4\3\0\1\u03b4\3\0\1\u03b4\4\0"+
    "\1\u03b4\11\0\1\u03b4\6\0\1\u03b4\3\0\1\u03b4\2\0"+
    "\1\u03b4\26\0\1\u03b5\17\0\1\u03b5\11\0\1\u03b5\6\0"+
    "\1\u03b5\3\0\1\u03b5\3\0\1\u03b5\4\0\1\u03b5\11\0"+
    "\1\u03b5\6\0\1\u03b5\3\0\1\u03b5\2\0\1\u03b5\24\0"+
    "\1\176\1\0\11\51\6\0\4\51\1\u03b6\24\51\4\0"+
    "\5\51\1\u03b6\24\51\2\0\1\51\24\0\1\u03b7\17\0"+
    "\1\u03b7\11\0\1\u03b7\6\0\1\u03b7\3\0\1\u03b7\3\0"+
    "\1\u03b7\4\0\1\u03b7\11\0\1\u03b7\6\0\1\u03b7\3\0"+
    "\1\u03b7\2\0\1\u03b7\24\0\1\176\1\0\11\51\6\0"+
    "\16\51\1\u03b8\12\51\4\0\17\51\1\u03b8\12\51\2\0"+
    "\1\51\24\0\1\u03b9\17\0\1\u03b9\11\0\1\u03b9\6\0"+
    "\1\u03b9\3\0\1\u03b9\3\0\1\u03b9\4\0\1\u03b9\11\0"+
    "\1\u03b9\6\0\1\u03b9\3\0\1\u03b9\2\0\1\u03b9\26\0"+
    "\1\u03ba\17\0\1\u03ba\11\0\1\u03ba\6\0\1\u03ba\3\0"+
    "\1\u03ba\3\0\1\u03ba\4\0\1\u03ba\11\0\1\u03ba\6\0"+
    "\1\u03ba\3\0\1\u03ba\2\0\1\u03ba\26\0\1\u03bb\17\0"+
    "\1\u03bb\11\0\1\u03bb\6\0\1\u03bb\3\0\1\u03bb\3\0"+
    "\1\u03bb\4\0\1\u03bb\11\0\1\u03bb\6\0\1\u03bb\3\0"+
    "\1\u03bb\2\0\1\u03bb\26\0\1\u03bc\17\0\1\u03bc\11\0"+
    "\1\u03bc\6\0\1\u03bc\3\0\1\u03bc\3\0\1\u03bc\4\0"+
    "\1\u03bc\11\0\1\u03bc\6\0\1\u03bc\3\0\1\u03bc\2\0"+
    "\1\u03bc\26\0\1\u03bd\17\0\1\u03bd\11\0\1\u03bd\6\0"+
    "\1\u03bd\3\0\1\u03bd\3\0\1\u03bd\4\0\1\u03bd\11\0"+
    "\1\u03bd\6\0\1\u03bd\3\0\1\u03bd\2\0\1\u03bd\61\0"+
    "\1\u011a\35\0\1\u011a\20\0\1\u03be\2\0\1\u03be\3\0"+
    "\1\u011b\11\0\1\163\1\0\11\163\1\u011c\4\0\32\163"+
    "\1\0\1\163\2\0\32\163\2\0\1\163\22\0\1\176"+
    "\1\0\1\u03bf\10\51\6\0\31\51\4\0\32\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\2\51\1\u03c0"+
    "\26\51\4\0\3\51\1\u03c0\26\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\6\51\1\u03c1\22\51\4\0"+
    "\7\51\1\u03c1\22\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\4\51\1\u03c2\24\51\4\0\5\51\1\u03c2"+
    "\24\51\2\0\1\51\22\0\1\176\1\0\11\51\6\0"+
    "\16\51\1\u03c3\12\51\4\0\17\51\1\u03c3\12\51\2\0"+
    "\1\51\22\0\1\176\1\0\11\51\6\0\13\51\1\u03c4"+
    "\15\51\4\0\14\51\1\u03c4\15\51\2\0\1\51\22\0"+
    "\1\176\1\0\11\51\6\0\4\51\1\u03c5\24\51\4\0"+
    "\5\51\1\u03c5\24\51\2\0\1\51\22\0\1\176\1\0"+
    "\11\51\6\0\1\u03c6\30\51\4\0\1\51\1\u03c6\30\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\21\51"+
    "\1\u03c7\7\51\4\0\22\51\1\u03c7\7\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\21\51\1\u03c8\7\51"+
    "\4\0\22\51\1\u03c8\7\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\4\51\1\u03c9\24\51\4\0\5\51"+
    "\1\u03c9\24\51\2\0\1\51\22\0\1\176\1\0\1\u03ca"+
    "\10\51\6\0\31\51\4\0\32\51\2\0\1\51\22\0"+
    "\1\176\1\0\1\u03cb\10\51\6\0\31\51\4\0\32\51"+
    "\2\0\1\51\22\0\1\176\1\0\1\u03cc\10\51\6\0"+
    "\31\51\4\0\32\51\2\0\1\51\22\0\1\176\1\0"+
    "\1\u03cd\10\51\6\0\31\51\4\0\32\51\2\0\1\51"+
    "\22\0\1\176\1\0\1\u03ce\10\51\6\0\31\51\4\0"+
    "\32\51\2\0\1\51\22\0\1\176\1\0\1\u03cf\10\51"+
    "\6\0\31\51\4\0\32\51\2\0\1\51\24\0\1\u03d0"+
    "\17\0\1\u03d0\11\0\1\u03d0\6\0\1\u03d0\3\0\1\u03d0"+
    "\3\0\1\u03d0\4\0\1\u03d0\11\0\1\u03d0\6\0\1\u03d0"+
    "\3\0\1\u03d0\2\0\1\u03d0\26\0\1\u03d1\17\0\1\u03d1"+
    "\11\0\1\u03d1\6\0\1\u03d1\3\0\1\u03d1\3\0\1\u03d1"+
    "\4\0\1\u03d1\11\0\1\u03d1\6\0\1\u03d1\3\0\1\u03d1"+
    "\2\0\1\u03d1\26\0\1\u03d2\17\0\1\u03d2\11\0\1\u03d2"+
    "\6\0\1\u03d2\3\0\1\u03d2\3\0\1\u03d2\4\0\1\u03d2"+
    "\11\0\1\u03d2\6\0\1\u03d2\3\0\1\u03d2\2\0\1\u03d2"+
    "\26\0\1\u03d3\17\0\1\u03d3\11\0\1\u03d3\6\0\1\u03d3"+
    "\3\0\1\u03d3\3\0\1\u03d3\4\0\1\u03d3\11\0\1\u03d3"+
    "\6\0\1\u03d3\3\0\1\u03d3\2\0\1\u03d3\26\0\1\u03d4"+
    "\17\0\1\u03d4\11\0\1\u03d4\6\0\1\u03d4\3\0\1\u03d4"+
    "\3\0\1\u03d4\4\0\1\u03d4\11\0\1\u03d4\6\0\1\u03d4"+
    "\3\0\1\u03d4\2\0\1\u03d4\26\0\1\u03d5\17\0\1\u03d5"+
    "\11\0\1\u03d5\6\0\1\u03d5\3\0\1\u03d5\3\0\1\u03d5"+
    "\4\0\1\u03d5\11\0\1\u03d5\6\0\1\u03d5\3\0\1\u03d5"+
    "\2\0\1\u03d5\24\0\1\176\1\0\11\51\6\0\4\51"+
    "\1\u03d6\24\51\4\0\5\51\1\u03d6\24\51\2\0\1\51"+
    "\61\0\1\u03d7\35\0\1\u03d7\37\0\1\176\1\0\11\51"+
    "\6\0\23\51\1\u03d8\5\51\4\0\24\51\1\u03d8\5\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\2\51"+
    "\1\u03d9\26\51\4\0\3\51\1\u03d9\26\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\23\51\1\u03da\5\51"+
    "\4\0\24\51\1\u03da\5\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\15\51\1\u03db\13\51\4\0\16\51"+
    "\1\u03db\13\51\2\0\1\51\1\0\1\u03be\2\0\1\u03be"+
    "\152\0\1\176\1\0\11\51\6\0\7\51\1\u03dc\21\51"+
    "\4\0\10\51\1\u03dc\21\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\3\51\1\u03dd\11\51\1\u03de\13\51"+
    "\4\0\4\51\1\u03dd\11\51\1\u03de\13\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\21\51\1\u03df\7\51"+
    "\4\0\22\51\1\u03df\7\51\2\0\1\51\46\0\1\u03e0"+
    "\35\0\1\u03e0\52\0\1\176\1\0\11\51\6\0\10\51"+
    "\1\u03e1\20\51\4\0\11\51\1\u03e1\20\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\23\51\1\u03e2\5\51"+
    "\4\0\24\51\1\u03e2\5\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\3\51\1\u03e3\25\51\4\0\4\51"+
    "\1\u03e3\25\51\2\0\1\51\47\0\1\u03e4\35\0\1\u03e4"+
    "\51\0\1\176\1\0\11\51\6\0\16\51\1\u03e5\12\51"+
    "\4\0\17\51\1\u03e5\12\51\2\0\1\51\22\0\1\176"+
    "\1\0\11\51\6\0\10\51\1\u03e6\20\51\4\0\11\51"+
    "\1\u03e6\20\51\2\0\1\51\22\0\1\176\1\0\11\51"+
    "\6\0\15\51\1\u03e7\13\51\4\0\16\51\1\u03e7\13\51"+
    "\2\0\1\51\22\0\1\176\1\0\11\51\6\0\16\51"+
    "\1\u03e8\12\51\4\0\17\51\1\u03e8\12\51\2\0\1\51"+
    "\22\0\1\176\1\0\11\51\6\0\15\51\1\u03e9\13\51"+
    "\4\0\16\51\1\u03e9\13\51\2\0\1\51";

  private static int [] zzUnpacktrans() {
    int [] result = new int[64170];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\1\1\1\11\1\1\1\11\1\1\1\11\7\1"+
    "\3\11\26\1\1\11\12\1\1\11\4\1\6\11\17\1"+
    "\1\11\1\1\2\11\2\1\3\11\2\1\1\11\2\1"+
    "\3\0\1\1\3\0\1\1\6\0\2\1\6\0\152\1"+
    "\4\11\1\0\1\11\2\0\2\11\1\0\2\1\1\11"+
    "\2\0\4\1\7\11\1\1\1\11\13\1\1\11\1\0"+
    "\1\1\2\0\1\1\3\0\1\11\1\0\1\11\1\0"+
    "\1\1\2\0\1\1\1\0\1\11\67\1\1\0\2\1"+
    "\2\0\1\1\1\0\14\1\1\0\53\1\1\0\20\1"+
    "\1\0\14\1\1\0\12\1\1\0\2\1\1\0\27\1"+
    "\1\0\1\1\3\0\2\1\1\0\1\11\1\0\2\1"+
    "\1\0\6\1\1\0\1\1\2\0\3\1\1\0\2\1"+
    "\6\0\1\1\11\0\1\1\1\0\2\1\4\0\2\1"+
    "\1\0\13\1\1\0\14\1\1\0\2\1\1\11\1\0"+
    "\2\1\2\11\1\1\1\11\10\1\1\0\4\1\2\0"+
    "\1\1\1\11\24\1\1\0\1\1\1\0\4\1\2\0"+
    "\13\1\1\0\3\1\1\0\1\1\1\11\1\0\2\1"+
    "\1\0\6\1\2\0\2\1\1\11\3\1\2\0\1\1"+
    "\1\0\2\1\1\11\12\0\1\11\1\0\1\11\1\1"+
    "\1\0\4\1\2\0\1\1\1\0\2\1\1\0\4\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\4\0\1\1"+
    "\1\11\1\0\1\11\1\0\1\1\1\11\3\0\1\1"+
    "\1\0\1\1\1\11\1\0\2\11\2\1\1\11\2\0"+
    "\17\11\1\0\1\11\2\1\1\0\4\11\2\1\1\11"+
    "\3\0\3\1\3\0\1\11\14\0\1\11\2\0\1\11"+
    "\3\0\3\1\1\11\1\0\2\11\7\1\1\11\2\1"+
    "\1\11\1\0\2\11\5\1\1\0\7\1\4\0\1\11"+
    "\1\0\2\1\1\11\1\1\1\11\1\1\1\11\4\1"+
    "\2\11\2\0\2\1\1\0\2\11\1\1\1\11\2\1"+
    "\14\11\4\0\2\11\1\0\1\11\1\1\1\11\1\1"+
    "\1\11\2\0\1\11\1\1\3\11\1\1\2\11\2\1"+
    "\7\11\4\1\24\11\2\1\1\11\11\1\1\11\7\1"+
    "\1\11\6\0\1\1\3\11\1\0\1\11\10\1\2\11"+
    "\1\1\1\11\1\1\5\11\22\1\6\11\1\1\1\0"+
    "\10\1\1\0\3\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1001];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private BitSet zzFin = null;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _M68kLexer() {
    this((java.io.Reader)null);
  }

  private boolean afterSpaceOrComma() {
    char previousChar = charAt(-1);
    return Character.isSpaceChar(previousChar) || previousChar == ',';
  }

  /**
   * Whether given {@code '*'} is "current PC" symbol instead of {@link MUL}.
   */
  private boolean isCurrentPcSymbol(){
    if (afterSpaceOrComma()) return true;
    
    char previousChar = charAt(-1);
    return previousChar == '-' || previousChar == '+' || previousChar == '(';
  }

  /**
   * Push back DATA_SIZE token.
   */
  private void pushbackDataSize() {
    yypushback(2);
  }

  private char charAt(final int offset) {
    final int loc = getTokenStart() + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  int operandSpaceCount = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _M68kLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 330: break;
          case 2:
            { operandSpaceCount = 0; yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            }
          // fall through
          case 331: break;
          case 3:
            { operandSpaceCount = 0; yybegin(YYINITIAL); return LINEFEED;
            }
          // fall through
          case 332: break;
          case 4:
            { return COMMENT;
            }
          // fall through
          case 333: break;
          case 5:
            { operandSpaceCount = 0; return DOT;
            }
          // fall through
          case 334: break;
          case 6:
            { operandSpaceCount = 0; yybegin(AFTER_LABEL); return ID;
            }
          // fall through
          case 335: break;
          case 7:
            { return WHITE_SPACE;
            }
          // fall through
          case 336: break;
          case 8:
            { yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            }
          // fall through
          case 337: break;
          case 9:
            { return DOLLAR;
            }
          // fall through
          case 338: break;
          case 10:
            { yybegin(IN_INSTRUCTION); return COLON;
            }
          // fall through
          case 339: break;
          case 11:
            { yybegin(IN_OPERAND); return EQ_DIRECTIVE;
            }
          // fall through
          case 340: break;
          case 12:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 14;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 15;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yybegin(AFTER_INSTRUCTION); return MACRO_CALL_ID;
            }
          // fall through
          case 341: break;
          case 13:
            { yybegin(IN_OPERAND); return BACKSLASH;
            }
          // fall through
          case 342: break;
          case 14:
            { operandSpaceCount = 1; yybegin(IN_OPERAND); return WHITE_SPACE;
            }
          // fall through
          case 343: break;
          case 15:
            { yybegin(IN_OPERAND); return STRING;
            }
          // fall through
          case 344: break;
          case 16:
            { operandSpaceCount++; return WHITE_SPACE;
            }
          // fall through
          case 345: break;
          case 17:
            { if (operandSpaceCount++ == 1) { yybegin(AFTER_OPERAND); } return WHITE_SPACE;
            }
          // fall through
          case 346: break;
          case 18:
            { return EXCLAMATION;
            }
          // fall through
          case 347: break;
          case 19:
            { return STRING;
            }
          // fall through
          case 348: break;
          case 20:
            { return HASH;
            }
          // fall through
          case 349: break;
          case 21:
            { return PERCENT;
            }
          // fall through
          case 350: break;
          case 22:
            { return AMPERSAND;
            }
          // fall through
          case 351: break;
          case 23:
            { return L_PAREN;
            }
          // fall through
          case 352: break;
          case 24:
            { return R_PAREN;
            }
          // fall through
          case 353: break;
          case 25:
            { if (isCurrentPcSymbol()) { return ID; } return MUL;
            }
          // fall through
          case 354: break;
          case 26:
            { return PLUS;
            }
          // fall through
          case 355: break;
          case 27:
            { return COMMA;
            }
          // fall through
          case 356: break;
          case 28:
            { return MINUS;
            }
          // fall through
          case 357: break;
          case 29:
            { return DOT;
            }
          // fall through
          case 358: break;
          case 30:
            { return DIV;
            }
          // fall through
          case 359: break;
          case 31:
            { return DEC_NUMBER;
            }
          // fall through
          case 360: break;
          case 32:
            { return LT;
            }
          // fall through
          case 361: break;
          case 33:
            { return EQ;
            }
          // fall through
          case 362: break;
          case 34:
            { return GT;
            }
          // fall through
          case 363: break;
          case 35:
            { return ID;
            }
          // fall through
          case 364: break;
          case 36:
            { return L_BRACKET;
            }
          // fall through
          case 365: break;
          case 37:
            { yybegin(MACRO_PARAMETER); return BACKSLASH;
            }
          // fall through
          case 366: break;
          case 38:
            { return R_BRACKET;
            }
          // fall through
          case 367: break;
          case 39:
            { return POW;
            }
          // fall through
          case 368: break;
          case 40:
            { return PIPE;
            }
          // fall through
          case 369: break;
          case 41:
            { return TILDE;
            }
          // fall through
          case 370: break;
          case 42:
            { yybegin(IN_OPERAND); return DEC_NUMBER;
            }
          // fall through
          case 371: break;
          case 43:
            { yybegin(IN_OPERAND); return ID;
            }
          // fall through
          case 372: break;
          case 44:
            { return LINEFEED;
            }
          // fall through
          case 373: break;
          case 45:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 10;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 13;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return WHITE_SPACE;
            }
          // fall through
          case 374: break;
          case 46:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return DC;
            }
          // fall through
          case 375: break;
          case 47:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return DR;
            }
          // fall through
          case 376: break;
          case 48:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return DS;
            }
          // fall through
          case 377: break;
          case 49:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return DX;
            }
          // fall through
          case 378: break;
          case 50:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return FO;
            }
          // fall through
          case 379: break;
          case 51:
            { yybegin(IN_OPERAND); return IF;
            }
          // fall through
          case 380: break;
          case 52:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return OR;
            }
          // fall through
          case 381: break;
          case 53:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return RS;
            }
          // fall through
          case 382: break;
          case 54:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return SF;
            }
          // fall through
          case 383: break;
          case 55:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return SO;
            }
          // fall through
          case 384: break;
          case 56:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(AFTER_INSTRUCTION); return ST;
            }
          // fall through
          case 385: break;
          case 57:
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_B;
            }
          // fall through
          case 386: break;
          case 58:
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_L;
            }
          // fall through
          case 387: break;
          case 59:
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_S;
            }
          // fall through
          case 388: break;
          case 60:
            { operandSpaceCount = 0; yybegin(IN_OPERAND); return DOT_W;
            }
          // fall through
          case 389: break;
          case 61:
            { return EXCLAMATION_EQ;
            }
          // fall through
          case 390: break;
          case 62:
            { return HEX_NUMBER;
            }
          // fall through
          case 391: break;
          case 63:
            { return BIN_NUMBER;
            }
          // fall through
          case 392: break;
          case 64:
            { return AMPERSAND_AMPERSAND;
            }
          // fall through
          case 393: break;
          case 65:
            { if (afterSpaceOrComma()) { return ID; } return DOT_B;
            }
          // fall through
          case 394: break;
          case 66:
            { if (afterSpaceOrComma()) { return ID; } return DOT_L;
            }
          // fall through
          case 395: break;
          case 67:
            { if (afterSpaceOrComma()) { return ID; } return DOT_S;
            }
          // fall through
          case 396: break;
          case 68:
            { if (afterSpaceOrComma()) { return ID; } return DOT_W;
            }
          // fall through
          case 397: break;
          case 69:
            { return SLASH_SLASH;
            }
          // fall through
          case 398: break;
          case 70:
            { return LT_LT;
            }
          // fall through
          case 399: break;
          case 71:
            { return LT_EQ;
            }
          // fall through
          case 400: break;
          case 72:
            { return LT_GT;
            }
          // fall through
          case 401: break;
          case 73:
            { return EQ_EQ;
            }
          // fall through
          case 402: break;
          case 74:
            { return GT_EQ;
            }
          // fall through
          case 403: break;
          case 75:
            { return GT_GT;
            }
          // fall through
          case 404: break;
          case 76:
            { return OCT_NUMBER;
            }
          // fall through
          case 405: break;
          case 77:
            { return ADDRESS_REGISTER;
            }
          // fall through
          case 406: break;
          case 78:
            { return DATA_REGISTER;
            }
          // fall through
          case 407: break;
          case 79:
            { return PC;
            }
          // fall through
          case 408: break;
          case 80:
            { return SP;
            }
          // fall through
          case 409: break;
          case 81:
            { return SR;
            }
          // fall through
          case 410: break;
          case 82:
            { return PIPE_PIPE;
            }
          // fall through
          case 411: break;
          case 83:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 10;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 11;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return WHITE_SPACE;
            }
          // fall through
          case 412: break;
          case 84:
            { yybegin(IN_OPERAND); return EQU;
            }
          // fall through
          case 413: break;
          case 85:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ADD;
            }
          // fall through
          case 414: break;
          case 86:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return AND;
            }
          // fall through
          case 415: break;
          case 87:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ASL;
            }
          // fall through
          case 416: break;
          case 88:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ASR;
            }
          // fall through
          case 417: break;
          case 89:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BCC;
            }
          // fall through
          case 418: break;
          case 90:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BCS;
            }
          // fall through
          case 419: break;
          case 91:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BEQ;
            }
          // fall through
          case 420: break;
          case 92:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BGE;
            }
          // fall through
          case 421: break;
          case 93:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BGT;
            }
          // fall through
          case 422: break;
          case 94:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BHI;
            }
          // fall through
          case 423: break;
          case 95:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BHS;
            }
          // fall through
          case 424: break;
          case 96:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLE;
            }
          // fall through
          case 425: break;
          case 97:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLK;
            }
          // fall through
          case 426: break;
          case 98:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLO;
            }
          // fall through
          case 427: break;
          case 99:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLS;
            }
          // fall through
          case 428: break;
          case 100:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BLT;
            }
          // fall through
          case 429: break;
          case 101:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BMI;
            }
          // fall through
          case 430: break;
          case 102:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BNE;
            }
          // fall through
          case 431: break;
          case 103:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BPL;
            }
          // fall through
          case 432: break;
          case 104:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BRA;
            }
          // fall through
          case 433: break;
          case 105:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BSR;
            }
          // fall through
          case 434: break;
          case 106:
            { yybegin(AFTER_OPERAND); return BSS;
            }
          // fall through
          case 435: break;
          case 107:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BVC;
            }
          // fall through
          case 436: break;
          case 108:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return BVS;
            }
          // fall through
          case 437: break;
          case 109:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return CHK;
            }
          // fall through
          case 438: break;
          case 110:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return CLR;
            }
          // fall through
          case 439: break;
          case 111:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return CMP;
            }
          // fall through
          case 440: break;
          case 112:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return DBF;
            }
          // fall through
          case 441: break;
          case 113:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return DBT;
            }
          // fall through
          case 442: break;
          case 114:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return DCB;
            }
          // fall through
          case 443: break;
          case 115:
            { yybegin(AFTER_OPERAND); return END;
            }
          // fall through
          case 444: break;
          case 116:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return EOR;
            }
          // fall through
          case 445: break;
          case 117:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return EXG;
            }
          // fall through
          case 446: break;
          case 118:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return EXT;
            }
          // fall through
          case 447: break;
          case 119:
            { yybegin(AFTER_OPERAND); return FAR;
            }
          // fall through
          case 448: break;
          case 120:
            { yybegin(IN_OPERAND); return FPU;
            }
          // fall through
          case 449: break;
          case 121:
            { yybegin(IN_OPERAND); return IF1;
            }
          // fall through
          case 450: break;
          case 122:
            { yybegin(IN_OPERAND); return IF2;
            }
          // fall through
          case 451: break;
          case 123:
            { yybegin(IN_OPERAND); return IFB;
            }
          // fall through
          case 452: break;
          case 124:
            { yybegin(IN_OPERAND); return IFC;
            }
          // fall through
          case 453: break;
          case 125:
            { yybegin(IN_OPERAND); return IFD;
            }
          // fall through
          case 454: break;
          case 126:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return JMP;
            }
          // fall through
          case 455: break;
          case 127:
            { yybegin(IN_OPERAND); return JSR;
            }
          // fall through
          case 456: break;
          case 128:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return LEA;
            }
          // fall through
          case 457: break;
          case 129:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return LSL;
            }
          // fall through
          case 458: break;
          case 130:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return LSR;
            }
          // fall through
          case 459: break;
          case 131:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return NEG;
            }
          // fall through
          case 460: break;
          case 132:
            { yybegin(AFTER_OPERAND); return NOP;
            }
          // fall through
          case 461: break;
          case 133:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return NOT;
            }
          // fall through
          case 462: break;
          case 134:
            { yybegin(AFTER_OPERAND); return ODD;
            }
          // fall through
          case 463: break;
          case 135:
            { yybegin(IN_OPERAND); return OPT;
            }
          // fall through
          case 464: break;
          case 136:
            { yybegin(IN_OPERAND); return ORG;
            }
          // fall through
          case 465: break;
          case 137:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ORI;
            }
          // fall through
          case 466: break;
          case 138:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return PEA;
            }
          // fall through
          case 467: break;
          case 139:
            { yybegin(IN_OPERAND); return REG;
            }
          // fall through
          case 468: break;
          case 140:
            { yybegin(IN_REM); return REM;
            }
          // fall through
          case 469: break;
          case 141:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ROL;
            }
          // fall through
          case 470: break;
          case 142:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return ROR;
            }
          // fall through
          case 471: break;
          case 143:
            { yybegin(IN_OPERAND); return RTD;
            }
          // fall through
          case 472: break;
          case 144:
            { yybegin(AFTER_OPERAND); return RTE;
            }
          // fall through
          case 473: break;
          case 145:
            { yybegin(AFTER_OPERAND); return RTR;
            }
          // fall through
          case 474: break;
          case 146:
            { yybegin(AFTER_OPERAND); return RTS;
            }
          // fall through
          case 475: break;
          case 147:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SCC;
            }
          // fall through
          case 476: break;
          case 148:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SCS;
            }
          // fall through
          case 477: break;
          case 149:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SEQ;
            }
          // fall through
          case 478: break;
          case 150:
            { yybegin(IN_OPERAND); return SET;
            }
          // fall through
          case 479: break;
          case 151:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SGE;
            }
          // fall through
          case 480: break;
          case 152:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SGT;
            }
          // fall through
          case 481: break;
          case 153:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SHI;
            }
          // fall through
          case 482: break;
          case 154:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SHS;
            }
          // fall through
          case 483: break;
          case 155:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SLE;
            }
          // fall through
          case 484: break;
          case 156:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SLO;
            }
          // fall through
          case 485: break;
          case 157:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SLS;
            }
          // fall through
          case 486: break;
          case 158:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SLT;
            }
          // fall through
          case 487: break;
          case 159:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SMI;
            }
          // fall through
          case 488: break;
          case 160:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SNE;
            }
          // fall through
          case 489: break;
          case 161:
            { yybegin(IN_OPERAND); return SPC;
            }
          // fall through
          case 490: break;
          case 162:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SPL;
            }
          // fall through
          case 491: break;
          case 163:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SUB;
            }
          // fall through
          case 492: break;
          case 164:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SVC;
            }
          // fall through
          case 493: break;
          case 165:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return SVS;
            }
          // fall through
          case 494: break;
          case 166:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return TAS;
            }
          // fall through
          case 495: break;
          case 167:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(AFTER_INSTRUCTION); return TST;
            }
          // fall through
          case 496: break;
          case 168:
            { yybegin(STRING_DIRECTIVE); return TTL;
            }
          // fall through
          case 497: break;
          case 169:
            { return CCR;
            }
          // fall through
          case 498: break;
          case 170:
            { return DFC;
            }
          // fall through
          case 499: break;
          case 171:
            { return SFC;
            }
          // fall through
          case 500: break;
          case 172:
            { return SSP;
            }
          // fall through
          case 501: break;
          case 173:
            { return USP;
            }
          // fall through
          case 502: break;
          case 174:
            { return VBR;
            }
          // fall through
          case 503: break;
          case 175:
            { yybegin(IN_OPERAND); return EQUR;
            }
          // fall through
          case 504: break;
          case 176:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ABCD;
            }
          // fall through
          case 505: break;
          case 177:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ADDA;
            }
          // fall through
          case 506: break;
          case 178:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ADDI;
            }
          // fall through
          case 507: break;
          case 179:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ADDQ;
            }
          // fall through
          case 508: break;
          case 180:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ADDX;
            }
          // fall through
          case 509: break;
          case 181:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ANDI;
            }
          // fall through
          case 510: break;
          case 182:
            { yybegin(AFTER_OPERAND); return AUTO;
            }
          // fall through
          case 511: break;
          case 183:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return BCHG;
            }
          // fall through
          case 512: break;
          case 184:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return BCLR;
            }
          // fall through
          case 513: break;
          case 185:
            { yybegin(IN_OPERAND); return BKPT;
            }
          // fall through
          case 514: break;
          case 186:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return BSET;
            }
          // fall through
          case 515: break;
          case 187:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return BTST;
            }
          // fall through
          case 516: break;
          case 188:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return CMPA;
            }
          // fall through
          case 517: break;
          case 189:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return CMPI;
            }
          // fall through
          case 518: break;
          case 190:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return CMPM;
            }
          // fall through
          case 519: break;
          case 191:
            { yybegin(IN_OPERAND); return CNOP;
            }
          // fall through
          case 520: break;
          case 192:
            { yybegin(AFTER_OPERAND); return CODE;
            }
          // fall through
          case 521: break;
          case 193:
            { yybegin(AFTER_OPERAND); return CSEG;
            }
          // fall through
          case 522: break;
          case 194:
            { yybegin(AFTER_OPERAND); return DATA;
            }
          // fall through
          case 523: break;
          case 195:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBCC;
            }
          // fall through
          case 524: break;
          case 196:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBCS;
            }
          // fall through
          case 525: break;
          case 197:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBEQ;
            }
          // fall through
          case 526: break;
          case 198:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBGE;
            }
          // fall through
          case 527: break;
          case 199:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBGT;
            }
          // fall through
          case 528: break;
          case 200:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBHI;
            }
          // fall through
          case 529: break;
          case 201:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBHS;
            }
          // fall through
          case 530: break;
          case 202:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBLE;
            }
          // fall through
          case 531: break;
          case 203:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBLO;
            }
          // fall through
          case 532: break;
          case 204:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBLS;
            }
          // fall through
          case 533: break;
          case 205:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBLT;
            }
          // fall through
          case 534: break;
          case 206:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBMI;
            }
          // fall through
          case 535: break;
          case 207:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBNE;
            }
          // fall through
          case 536: break;
          case 208:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBPL;
            }
          // fall through
          case 537: break;
          case 209:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBRA;
            }
          // fall through
          case 538: break;
          case 210:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBVC;
            }
          // fall through
          case 539: break;
          case 211:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DBVS;
            }
          // fall through
          case 540: break;
          case 212:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DIVS;
            }
          // fall through
          case 541: break;
          case 213:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DIVU;
            }
          // fall through
          case 542: break;
          case 214:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return DSEG;
            }
          // fall through
          case 543: break;
          case 215:
            { yybegin(STRING_DIRECTIVE); return ECHO;
            }
          // fall through
          case 544: break;
          case 216:
            { yybegin(AFTER_OPERAND); return ELSE;
            }
          // fall through
          case 545: break;
          case 217:
            { yybegin(IN_OPERAND); return ENDB;
            }
          // fall through
          case 546: break;
          case 218:
            { yybegin(AFTER_OPERAND); return ENDC;
            }
          // fall through
          case 547: break;
          case 219:
            { yybegin(AFTER_OPERAND); return ENDM;
            }
          // fall through
          case 548: break;
          case 220:
            { yybegin(AFTER_OPERAND); return ENDR;
            }
          // fall through
          case 549: break;
          case 221:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return EORI;
            }
          // fall through
          case 550: break;
          case 222:
            { yybegin(AFTER_OPERAND); return EREM;
            }
          // fall through
          case 551: break;
          case 223:
            { yybegin(AFTER_OPERAND); return EVEN;
            }
          // fall through
          case 552: break;
          case 224:
            { yybegin(STRING_DIRECTIVE); return FAIL;
            }
          // fall through
          case 553: break;
          case 225:
            { yybegin(STRING_DIRECTIVE); return IDNT;
            }
          // fall through
          case 554: break;
          case 226:
            { yybegin(IN_OPERAND); return IFEQ;
            }
          // fall through
          case 555: break;
          case 227:
            { yybegin(IN_OPERAND); return IFGE;
            }
          // fall through
          case 556: break;
          case 228:
            { yybegin(IN_OPERAND); return IFGT;
            }
          // fall through
          case 557: break;
          case 229:
            { yybegin(IN_OPERAND); return IFLE;
            }
          // fall through
          case 558: break;
          case 230:
            { yybegin(IN_OPERAND); return IFLT;
            }
          // fall through
          case 559: break;
          case 231:
            { yybegin(IN_OPERAND); return IFMI;
            }
          // fall through
          case 560: break;
          case 232:
            { yybegin(IN_OPERAND); return IFNB;
            }
          // fall through
          case 561: break;
          case 233:
            { yybegin(IN_OPERAND); return IFNC;
            }
          // fall through
          case 562: break;
          case 234:
            { yybegin(IN_OPERAND); return IFND;
            }
          // fall through
          case 563: break;
          case 235:
            { yybegin(IN_OPERAND); return IFNE;
            }
          // fall through
          case 564: break;
          case 236:
            { yybegin(IN_OPERAND); return IFP1;
            }
          // fall through
          case 565: break;
          case 237:
            { yybegin(IN_OPERAND); return IFPL;
            }
          // fall through
          case 566: break;
          case 238:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return LINK;
            }
          // fall through
          case 567: break;
          case 239:
            { yybegin(AFTER_OPERAND); return LIST;
            }
          // fall through
          case 568: break;
          case 240:
            { yybegin(IN_OPERAND); return LLEN;
            }
          // fall through
          case 569: break;
          case 241:
            { yybegin(IN_OPERAND); return LOAD;
            }
          // fall through
          case 570: break;
          case 242:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return MOVE;
            }
          // fall through
          case 571: break;
          case 243:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return MULS;
            }
          // fall through
          case 572: break;
          case 244:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return MULU;
            }
          // fall through
          case 573: break;
          case 245:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return NBCD;
            }
          // fall through
          case 574: break;
          case 246:
            { yybegin(IN_OPERAND); return NEAR;
            }
          // fall through
          case 575: break;
          case 247:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return NEGX;
            }
          // fall through
          case 576: break;
          case 248:
            { yybegin(AFTER_OPERAND); return PAGE;
            }
          // fall through
          case 577: break;
          case 249:
            { yybegin(IN_OPERAND); return PLEN;
            }
          // fall through
          case 578: break;
          case 250:
            { yybegin(IN_OPERAND); return REPT;
            }
          // fall through
          case 579: break;
          case 251:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ROXL;
            }
          // fall through
          case 580: break;
          case 252:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return ROXR;
            }
          // fall through
          case 581: break;
          case 253:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SBCD;
            }
          // fall through
          case 582: break;
          case 254:
            { yybegin(IN_OPERAND); return STOP;
            }
          // fall through
          case 583: break;
          case 255:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SUBA;
            }
          // fall through
          case 584: break;
          case 256:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SUBI;
            }
          // fall through
          case 585: break;
          case 257:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SUBQ;
            }
          // fall through
          case 586: break;
          case 258:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SUBX;
            }
          // fall through
          case 587: break;
          case 259:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(AFTER_INSTRUCTION); return SWAP;
            }
          // fall through
          case 588: break;
          case 260:
            { yybegin(AFTER_OPERAND); return TEXT;
            }
          // fall through
          case 589: break;
          case 261:
            { yybegin(IN_OPERAND); return TRAP;
            }
          // fall through
          case 590: break;
          case 262:
            { yybegin(IN_OPERAND); return UNLK;
            }
          // fall through
          case 591: break;
          case 263:
            { yybegin(IN_OPERAND); return XDEF;
            }
          // fall through
          case 592: break;
          case 264:
            { yybegin(IN_OPERAND); return XREF;
            }
          // fall through
          case 593: break;
          case 265:
            { pushbackDataSize(); return ADDRESS_REGISTER;
            }
          // fall through
          case 594: break;
          case 266:
            { pushbackDataSize(); return DATA_REGISTER;
            }
          // fall through
          case 595: break;
          case 267:
            { pushbackDataSize(); return SP;
            }
          // fall through
          case 596: break;
          case 268:
            { return MACRO;
            }
          // fall through
          case 597: break;
          case 269:
            { yybegin(AFTER_OPERAND); return MACRO;
            }
          // fall through
          case 598: break;
          case 270:
            { yybegin(IN_OPERAND); return ALIGN;
            }
          // fall through
          case 599: break;
          case 271:
            { yybegin(AFTER_OPERAND); return BSS_C;
            }
          // fall through
          case 600: break;
          case 272:
            { yybegin(AFTER_OPERAND); return BSS_F;
            }
          // fall through
          case 601: break;
          case 273:
            { yybegin(IN_OPERAND); return CLRFO;
            }
          // fall through
          case 602: break;
          case 274:
            { yybegin(IN_OPERAND); return CLRSO;
            }
          // fall through
          case 603: break;
          case 275:
            { yybegin(AFTER_OPERAND); return CPU32;
            }
          // fall through
          case 604: break;
          case 276:
            { yybegin(AFTER_OPERAND); return ENDIF;
            }
          // fall through
          case 605: break;
          case 277:
            { yybegin(AFTER_OPERAND); return MASK2;
            }
          // fall through
          case 606: break;
          case 278:
            { yybegin(AFTER_OPERAND); return MEXIT;
            }
          // fall through
          case 607: break;
          case 279:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEA;
            }
          // fall through
          case 608: break;
          case 280:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEC;
            }
          // fall through
          case 609: break;
          case 281:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEM;
            }
          // fall through
          case 610: break;
          case 282:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEP;
            }
          // fall through
          case 611: break;
          case 283:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVEQ;
            }
          // fall through
          case 612: break;
          case 284:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { yybegin(AFTER_INSTRUCTION); return MOVES;
            }
          // fall through
          case 613: break;
          case 285:
            { yybegin(AFTER_OPERAND); return RESET;
            }
          // fall through
          case 614: break;
          case 286:
            { yybegin(IN_OPERAND); return RSSET;
            }
          // fall through
          case 615: break;
          case 287:
            { yybegin(IN_OPERAND); return SETFO;
            }
          // fall through
          case 616: break;
          case 288:
            { yybegin(IN_OPERAND); return SETSO;
            }
          // fall through
          case 617: break;
          case 289:
            { yybegin(AFTER_OPERAND); return TRAPV;
            }
          // fall through
          case 618: break;
          case 290:
            { yybegin(IN_OPERAND); return ASSERT;
            }
          // fall through
          case 619: break;
          case 291:
            { yybegin(AFTER_OPERAND); return CODE_C;
            }
          // fall through
          case 620: break;
          case 292:
            { yybegin(AFTER_OPERAND); return CODE_F;
            }
          // fall through
          case 621: break;
          case 293:
            { yybegin(AFTER_OPERAND); return DATA_C;
            }
          // fall through
          case 622: break;
          case 294:
            { yybegin(AFTER_OPERAND); return DATA_F;
            }
          // fall through
          case 623: break;
          case 295:
            { yybegin(AFTER_OPERAND); return ELSEIF;
            }
          // fall through
          case 624: break;
          case 296:
            { yybegin(STRING_DIRECTIVE); return INCBIN;
            }
          // fall through
          case 625: break;
          case 297:
            { yybegin(STRING_DIRECTIVE); return INCDIR;
            }
          // fall through
          case 626: break;
          case 298:
            { yybegin(AFTER_OPERAND); return INLINE;
            }
          // fall through
          case 627: break;
          case 299:
            { yybegin(AFTER_OPERAND); return NOLIST;
            }
          // fall through
          case 628: break;
          case 300:
            { yybegin(AFTER_OPERAND); return NOPAGE;
            }
          // fall through
          case 629: break;
          case 301:
            { yybegin(IN_OPERAND); return OFFSET;
            }
          // fall through
          case 630: break;
          case 302:
            { yybegin(STRING_DIRECTIVE); return OUTPUT;
            }
          // fall through
          case 631: break;
          case 303:
            { yybegin(STRING_DIRECTIVE); return PRINTT;
            }
          // fall through
          case 632: break;
          case 304:
            { yybegin(IN_OPERAND); return PRINTV;
            }
          // fall through
          case 633: break;
          case 305:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 10;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 12;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yybegin(MACRO_DECLARATION); return WHITE_SPACE;
            }
          // fall through
          case 634: break;
          case 306:
            { yybegin(AFTER_OPERAND); return AC68080;
            }
          // fall through
          case 635: break;
          case 307:
            { yybegin(IN_OPERAND); return BASEREG;
            }
          // fall through
          case 636: break;
          case 308:
            { yybegin(AFTER_OPERAND); return EINLINE;
            }
          // fall through
          case 637: break;
          case 309:
            { yybegin(AFTER_OPERAND); return ILLEGAL;
            }
          // fall through
          case 638: break;
          case 310:
            { yybegin(STRING_DIRECTIVE); return INCLUDE;
            }
          // fall through
          case 639: break;
          case 311:
            { yybegin(IN_OPERAND); return JUMPERR;
            }
          // fall through
          case 640: break;
          case 312:
            { yybegin(IN_OPERAND); return JUMPPTR;
            }
          // fall through
          case 641: break;
          case 313:
            { yybegin(IN_OPERAND); return MACHINE;
            }
          // fall through
          case 642: break;
          case 314:
            { yybegin(AFTER_OPERAND); return MC68000;
            }
          // fall through
          case 643: break;
          case 315:
            { yybegin(AFTER_OPERAND); return MC68010;
            }
          // fall through
          case 644: break;
          case 316:
            { yybegin(AFTER_OPERAND); return MC68020;
            }
          // fall through
          case 645: break;
          case 317:
            { yybegin(AFTER_OPERAND); return MC68030;
            }
          // fall through
          case 646: break;
          case 318:
            { yybegin(AFTER_OPERAND); return MC68040;
            }
          // fall through
          case 647: break;
          case 319:
            { yybegin(AFTER_OPERAND); return MC68060;
            }
          // fall through
          case 648: break;
          case 320:
            { yybegin(IN_OPERAND); return MSOURCE;
            }
          // fall through
          case 649: break;
          case 321:
            { yybegin(AFTER_OPERAND); return RSRESET;
            }
          // fall through
          case 650: break;
          case 322:
            { yybegin(IN_OPERAND); return SECTION;
            }
          // fall through
          case 651: break;
          case 323:
            { yybegin(IN_OPERAND); return ADDWATCH;
            }
          // fall through
          case 652: break;
          case 324:
            { yybegin(IN_OPERAND); return IFMACROD;
            }
          // fall through
          case 653: break;
          case 325:
            { yybegin(AFTER_OPERAND); return INITNEAR;
            }
          // fall through
          case 654: break;
          case 326:
            { yybegin(IN_OPERAND); return IFMACROND;
            }
          // fall through
          case 655: break;
          case 327:
            { yybegin(AFTER_OPERAND); return NEAR_CODE;
            }
          // fall through
          case 656: break;
          case 328:
            { yybegin(AFTER_OPERAND); return POPSECTION;
            }
          // fall through
          case 657: break;
          case 329:
            { yybegin(AFTER_OPERAND); return PUSHSECTION;
            }
          // fall through
          case 658: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
