/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * Copyright 2020 The Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.yanncebron.m68kplugin.lexer;

import com.intellij.psi.tree.IElementType;

import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.yanncebron.m68kplugin.lang.psi.M68kTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/yann/idea-ultimate/m68kplugin/grammar/_M68kLexer.flex</tt>
 */
public class _M68kLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_LABEL = 2;
  public static final int IN_INSTRUCTION = 4;
  public static final int IN_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 3968 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\17\5\1\6\1\7\11\5\1\10\1\11\1\5\1\12\1\13\11\5\1\14\14"+
    "\5\1\15\2\5\1\16\u01e2\5");

  /* The ZZ_CMAP_Y table has 960 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\56\5\1\6\3\5\1\7\6\5\1\6\14\5\1\10\3\5\1\10\3\5\1\10"+
    "\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\2\5\1\7\3"+
    "\5\1\7\2\5\1\6\10\5\1\6\1\5\1\7\72\5\1\6\1\7\11\5\1\10\3\5\1\7\5\5\1\11\5"+
    "\5\1\7\2\5\1\7\4\5\1\11\36\5\1\12\257\5\1\6\24\5\1\7\1\5\1\6\5\5\2\7\2\5\1"+
    "\7\14\5\1\7\130\5\1\7\2\13\52\5\1\6\35\5\1\10\3\5\1\7\1\5\1\14\4\5\1\7\10"+
    "\5\1\7\12\5\1\7\3\5\1\7\13\5\1\7\3\5\1\6\2\5\1\7\15\5\1\6\32\5\1\7\60\5\1"+
    "\6\6\5\1\7\143\5\1\15\1\16\12\5\1\7\65\5");

  /* The ZZ_CMAP_A table has 480 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\4\1\5\1\1\22\0\1\2\1\0\1\21\1\35\1\10\1\14\1\37\1\17\1\42"+
    "\1\43\1\6\1\30\1\27\1\31\1\22\1\32\2\16\6\13\2\7\1\26\1\3\1\40\1\33\1\41\1"+
    "\0\1\12\1\54\1\71\1\51\1\53\1\61\1\24\1\62\1\74\1\57\1\70\1\65\1\60\1\66\1"+
    "\55\1\56\1\47\1\67\1\52\1\46\1\63\1\50\1\64\1\73\1\72\2\23\1\44\1\20\1\45"+
    "\1\34\1\25\1\0\1\54\1\71\1\51\1\53\1\61\1\24\1\62\1\74\1\57\1\70\1\65\1\60"+
    "\1\66\1\55\1\56\1\47\1\67\1\52\1\46\1\63\1\50\1\64\1\73\1\72\2\23\1\0\1\15"+
    "\1\0\1\36\6\0\1\4\72\0\12\11\46\0\12\11\14\0\12\11\20\0\12\11\6\0\12\11\16"+
    "\0\2\4\27\0\6\11\57\0\12\11\16\0\62\11");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\2\1\1\15\1\16"+
    "\1\1\1\17\1\1\1\5\1\20\1\1\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\1\1\33\1\34\1\35\1\36\20\20\1\37\1\40"+
    "\1\41\1\0\1\42\4\0\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\20\1\52\2\20\1\53\4\20"+
    "\1\54\5\20\1\55\7\20\1\56\3\20\1\57\1\60"+
    "\1\61\2\20\1\62\10\20\1\63\1\20\1\64\37\20"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\20\1\102\1\103"+
    "\1\104\2\20\1\105\1\106\1\107\1\20\1\110\1\111"+
    "\1\112\1\113\2\20\1\114\1\115\2\20\1\116\1\117"+
    "\1\120\1\121\1\20\1\122\7\20\1\123\3\20\1\124"+
    "\1\125\1\126\1\127\1\20\1\130\1\131\1\132\1\20"+
    "\1\133\1\134\1\135\1\136\1\137\1\140\4\20\1\141"+
    "\2\20\1\142\1\143\1\20\1\144\1\145\1\146\2\20"+
    "\1\147\1\150\1\151\1\152\1\20\1\153\3\20\1\154"+
    "\1\155\1\156\1\20\1\157\1\160\1\161\2\20\1\162"+
    "\1\163\1\164\1\165\1\166\1\167\1\170\1\171\1\172"+
    "\1\173\1\20\1\174\1\175\1\176\1\177\1\200\1\201"+
    "\1\202\1\203\1\204\1\205\1\206\1\207\1\210\1\211"+
    "\1\212\1\213\2\20\1\214\1\215\1\20\1\216\1\217"+
    "\1\220\1\221\1\222\1\223\1\224\1\225\1\226\1\227"+
    "\1\230\1\231\1\232\1\233\1\234\1\235\1\236\1\237"+
    "\1\240\1\241\1\242\1\243\1\244\1\245\1\246\1\247"+
    "\1\250\1\251\1\252\1\253\1\254\1\255\1\256\1\257"+
    "\4\20\1\260\1\261\1\262\1\263\1\264\1\265\1\266"+
    "\1\267\1\270\1\271\1\20\1\272\1\273\1\274\1\275"+
    "\1\276\1\277\1\20\1\300\5\20\1\301\1\302\1\303"+
    "\1\304\1\305\1\306\1\20\1\307\1\20\1\310\1\20"+
    "\1\311\1\312\1\313\1\314";

  private static int [] zzUnpackAction() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\364\0\u0131\0\u016e"+
    "\0\364\0\u01ab\0\364\0\364\0\364\0\u01e8\0\364\0\u0225"+
    "\0\u0262\0\u029f\0\u02dc\0\364\0\u0319\0\364\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\364\0\364\0\364\0\364\0\364\0\364"+
    "\0\364\0\364\0\364\0\364\0\u044a\0\u0487\0\364\0\364"+
    "\0\364\0\364\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5"+
    "\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd"+
    "\0\u081a\0\u0857\0\u0262\0\u029f\0\u02dc\0\u0319\0\364\0\u0894"+
    "\0\u0356\0\u08d1\0\u040d\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\364"+
    "\0\364\0\u03d0\0\u090e\0\u094b\0\u0988\0\u09c5\0\u03d0\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\u03d0\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95"+
    "\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u03d0\0\u03d0\0\u0f03"+
    "\0\u0f40\0\u0f7d\0\u03d0\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296"+
    "\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666"+
    "\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u03d0\0\u03d0\0\u19bc"+
    "\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u03d0\0\u19f9\0\u03d0\0\u03d0\0\u03d0\0\u1a36\0\u1a73"+
    "\0\u03d0\0\u03d0\0\u03d0\0\u1ab0\0\u03d0\0\u03d0\0\u1aed\0\u03d0"+
    "\0\u1b2a\0\u1b67\0\u03d0\0\u03d0\0\u1ba4\0\u1be1\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u03d0\0\u1c1e\0\u03d0\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12"+
    "\0\u1d4f\0\u1d8c\0\u1dc9\0\u03d0\0\u1e06\0\u1e43\0\u1e80\0\u03d0"+
    "\0\u03d0\0\u1ebd\0\u1efa\0\u1f37\0\u03d0\0\u03d0\0\u1f74\0\u1fb1"+
    "\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u1fee\0\u202b"+
    "\0\u2068\0\u20a5\0\u03d0\0\u20e2\0\u211f\0\u03d0\0\u03d0\0\u215c"+
    "\0\u03d0\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u22ca\0\u03d0\0\u2307\0\u2344\0\u2381\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u23be\0\u03d0\0\u03d0\0\u03d0\0\u23fb\0\u2438\0\u03d0"+
    "\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u2475\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u03d0\0\u24b2\0\u24ef\0\u03d0\0\u03d0\0\u252c\0\u03d0"+
    "\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u03d0\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u265d\0\u03d0\0\u03d0\0\u269a\0\u03d0\0\u03d0\0\u26d7"+
    "\0\u2714\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u2751\0\u03d0"+
    "\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u03d0\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u03d0\0\u03d0\0\u28bf\0\u03d0\0\u28fc\0\u03d0\0\u2939"+
    "\0\u03d0\0\u03d0\0\u03d0\0\u03d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\5\1\7\1\10\13\5"+
    "\1\11\2\12\1\13\20\5\27\12\1\5\1\14\1\7"+
    "\2\5\1\7\20\5\1\15\47\5\1\14\1\16\1\10"+
    "\1\5\1\16\1\17\1\20\1\21\1\5\1\22\1\20"+
    "\1\23\1\24\1\20\1\25\1\26\1\27\1\30\2\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\31\1\67\2\31"+
    "\1\70\1\31\1\71\1\72\3\31\1\5\1\14\73\5"+
    "\77\0\1\7\1\10\1\0\1\7\1\10\66\0\1\10"+
    "\1\0\2\10\2\0\67\10\7\0\1\12\3\0\1\12"+
    "\2\0\1\12\4\0\3\12\20\0\27\12\2\0\1\16"+
    "\2\0\1\16\76\0\1\20\3\0\1\20\2\0\1\20"+
    "\65\0\1\73\1\0\1\73\1\0\1\73\2\0\1\73"+
    "\5\0\1\73\24\0\1\73\1\0\2\73\4\0\1\73"+
    "\7\0\1\73\16\0\1\74\2\0\1\74\73\0\2\75"+
    "\56\0\17\76\1\77\1\100\54\76\20\101\1\102\1\77"+
    "\53\101\22\0\1\103\2\31\1\103\20\0\1\104\11\31"+
    "\1\105\10\31\1\106\1\31\1\107\1\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\27\31"+
    "\22\0\1\103\2\31\1\103\20\0\27\31\40\0\1\110"+
    "\75\0\1\111\42\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\1\31\1\112\1\31\20\0\1\113\1\114\1\115"+
    "\1\116\1\117\2\31\1\120\2\31\1\121\1\122\1\123"+
    "\1\124\1\125\1\31\1\126\2\31\1\127\1\31\1\130"+
    "\1\131\7\0\1\31\3\0\1\31\2\0\1\31\4\0"+
    "\3\31\20\0\3\31\1\132\7\31\1\133\13\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\1\134\6\31\1\135\17\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\3\31\1\136\6\31"+
    "\1\137\5\31\1\140\5\31\1\141\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\1\142\7\31"+
    "\1\143\2\31\1\144\1\31\1\145\11\31\7\0\1\31"+
    "\3\0\1\146\2\0\1\146\4\0\3\31\20\0\1\147"+
    "\2\31\1\150\5\31\1\151\11\31\1\152\3\31\7\0"+
    "\1\31\3\0\1\153\2\0\1\153\4\0\3\31\20\0"+
    "\1\154\4\31\1\155\1\31\1\156\13\31\1\157\3\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\10\31\1\160\2\31\1\161\7\31\1\162\3\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\1\31\1\163\2\31\1\164\1\165\21\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\1\31\1\166"+
    "\1\31\20\0\7\31\1\167\2\31\1\170\14\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\1\171\10\31\1\172\1\31\1\173\13\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\7\31"+
    "\1\174\1\175\1\31\1\176\3\31\1\177\2\31\1\200"+
    "\2\31\1\201\2\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\1\202\3\31\1\203\1\31"+
    "\1\204\20\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\2\31\1\205\3\31\1\206\1\31"+
    "\1\207\16\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\1\210\17\31\1\211\6\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\1\212\1\213\1\31\1\214\1\215\2\31\1\216\2\31"+
    "\1\217\1\220\1\221\1\222\1\223\1\31\1\224\5\31"+
    "\1\225\1\76\1\0\2\76\2\0\67\76\1\101\1\0"+
    "\2\101\2\0\67\101\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\1\31\1\226\25\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\12\31\1\227\14\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\23\31\1\230\3\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\1\231\2\31\1\232\23\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\13\31\1\233\13\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\1\234\12\31\1\235\1\31\1\236\11\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\15\31\1\237\3\31\1\240\5\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\13\31\1\241"+
    "\1\31\1\242\11\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\10\31\1\243\16\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\1\244\2\31\1\245\23\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\11\31\1\246\15\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\3\31\1\247\23\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\6\31\1\250\20\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\11\31\1\251\15\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\6\31\1\252\20\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\1\31\1\253\25\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\12\31\1\254\14\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\4\31\1\255\22\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\4\31\1\256\22\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\1\31\1\257\25\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\17\31\1\260\7\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\1\261\3\31\1\262\22\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\4\31\1\263"+
    "\5\31\1\264\11\31\1\265\2\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\1\266\26\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\1\267\3\31\1\270\6\31\1\271\13\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\23\31\1\272\3\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\16\31\1\273\10\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\1\31\1\274"+
    "\1\31\20\0\1\31\1\275\1\31\1\276\1\277\2\31"+
    "\1\300\2\31\1\301\1\302\1\303\1\304\1\305\1\31"+
    "\1\306\5\31\1\307\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\4\31\1\310\5\31\1\311"+
    "\14\31\7\0\1\31\3\0\1\31\2\0\1\31\4\0"+
    "\3\31\20\0\5\31\1\312\21\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\5\31\1\313"+
    "\21\31\7\0\1\31\3\0\1\31\2\0\1\31\4\0"+
    "\3\31\20\0\3\31\1\314\23\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\1\31\1\315"+
    "\13\31\1\316\11\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\14\31\1\317\12\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\3\31\1\320\23\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\15\31\1\321\11\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\11\31\1\322\2\31\1\323\12\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\5\31\1\324"+
    "\21\31\7\0\1\31\3\0\1\31\2\0\1\31\4\0"+
    "\3\31\20\0\3\31\1\325\1\31\1\326\1\31\1\327"+
    "\2\31\1\330\1\331\1\332\6\31\1\333\3\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\3\31\1\334\23\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\12\31\1\335\14\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\4\31\1\336\5\31\1\337\14\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\7\31\1\340"+
    "\17\31\7\0\1\31\3\0\1\31\2\0\1\31\4\0"+
    "\3\31\20\0\6\31\1\341\20\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\5\31\1\342"+
    "\21\31\7\0\1\31\3\0\1\31\2\0\1\31\4\0"+
    "\3\31\20\0\4\31\1\343\22\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\1\344\26\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\13\31\1\345\13\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\2\31\1\346\24\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\14\31\1\347\1\350\11\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\15\31\1\351"+
    "\11\31\7\0\1\31\3\0\1\31\2\0\1\31\4\0"+
    "\3\31\20\0\6\31\1\352\20\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\1\353\26\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\12\31\1\354\14\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\3\31\1\355\23\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\16\31\1\356\10\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\4\31\1\357\22\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\1\31\1\360\25\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\4\31\1\361\6\31"+
    "\1\362\13\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\12\31\1\363\14\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\1\364"+
    "\2\31\1\365\6\31\1\366\13\31\1\367\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\6\31"+
    "\1\370\20\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\13\31\1\371\13\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\1\372"+
    "\7\31\1\373\2\31\1\374\1\31\1\375\1\31\1\376"+
    "\7\31\7\0\1\31\3\0\1\31\2\0\1\31\4\0"+
    "\3\31\20\0\21\31\1\377\5\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\13\31\1\u0100"+
    "\1\31\1\u0101\11\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\1\u0102\26\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\1\u0103"+
    "\2\31\1\u0104\23\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\11\31\1\u0105\15\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\1\u0106\10\31\1\u0107\15\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\6\31\1\u0108\2\31"+
    "\1\u0109\7\31\1\u010a\2\31\1\u010b\2\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\1\31"+
    "\1\u010c\25\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\5\31\1\u010d\21\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\1\31"+
    "\1\u010e\25\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\17\31\1\u010f\7\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\6\31"+
    "\1\u0110\2\31\1\u0111\6\31\1\u0112\6\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\13\31"+
    "\1\u0113\13\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\13\31\1\u0114\13\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\4\31"+
    "\1\u0115\5\31\1\u0116\14\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\13\31\1\u0117\13\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\1\u0118\1\31\1\u0119\24\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\12\31\1\u011a"+
    "\14\31\7\0\1\31\3\0\1\31\2\0\1\31\4\0"+
    "\3\31\20\0\1\u011b\2\31\1\u011c\23\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\6\31"+
    "\1\u011d\20\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\13\31\1\u011e\13\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\1\u011f"+
    "\12\31\1\u0120\1\31\1\u0121\11\31\7\0\1\31\3\0"+
    "\1\31\2\0\1\31\4\0\3\31\20\0\21\31\1\u0122"+
    "\5\31\7\0\1\31\3\0\1\31\2\0\1\31\4\0"+
    "\3\31\20\0\13\31\1\u0123\1\31\1\u0124\11\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\1\u0125\2\31\1\u0126\23\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\11\31\1\u0127\15\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\11\31\1\u0128\15\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\6\31\1\u0129\2\31"+
    "\1\u012a\7\31\1\u012b\2\31\1\u012c\2\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\11\31"+
    "\1\u012d\15\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\5\31\1\u012e\21\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\24\31"+
    "\1\u012f\2\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\5\31\1\u0130\21\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\3\31"+
    "\1\u0131\1\31\1\u0132\5\31\1\u0133\7\31\1\u0134\3\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\13\31\1\u0135\1\31\1\u0136\11\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\21\31"+
    "\1\u0137\5\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\13\31\1\u0138\1\31\1\u0139\11\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\5\31\1\u013a\4\31\1\u013b\10\31\1\u013c\3\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\13\31\1\u013d\13\31\7\0\1\31\3\0\1\31"+
    "\2\0\1\31\4\0\3\31\20\0\17\31\1\u013e\7\31"+
    "\7\0\1\31\3\0\1\31\2\0\1\31\4\0\3\31"+
    "\20\0\3\31\1\u013f\14\31\1\u0140\6\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\11\31"+
    "\1\u0141\15\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\13\31\1\u0142\13\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\7\31"+
    "\1\u0143\17\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\4\31\1\u0144\22\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\1\31"+
    "\1\u0145\25\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\1\u0146\1\31\1\u0147\24\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\4\31\1\u0148\22\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\13\31\1\u0149\13\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\15\31\1\u014a\11\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\4\31\1\u014b\22\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\14\31\1\u014c\12\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\15\31\1\u014d\11\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\15\31\1\u014e\11\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\1\u014f\26\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\15\31"+
    "\1\u0150\11\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\11\31\1\u0151\15\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\2\31"+
    "\1\u0152\24\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\11\31\1\u0153\15\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\14\31"+
    "\1\u0154\12\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\11\31\1\u0155\15\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\16\31"+
    "\1\u0156\10\31\7\0\1\31\3\0\1\31\2\0\1\31"+
    "\4\0\3\31\20\0\10\31\1\u0157\16\31\7\0\1\31"+
    "\3\0\1\31\2\0\1\31\4\0\3\31\20\0\1\31"+
    "\1\u0158\4\31\1\u0159\11\31\1\u015a\1\u015b\5\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\13\31\1\u015c\13\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\4\31\1\u015d\22\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\5\31\1\u015e\21\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\7\31\1\u015f\17\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\6\31\1\u0160\20\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\1\31\1\u0161\1\31\20\0\27\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\15\31\1\u0162\11\31\7\0\1\31\3\0\1\31\2\0"+
    "\1\31\4\0\3\31\20\0\13\31\1\u0163\13\31\7\0"+
    "\1\31\3\0\1\31\2\0\1\31\4\0\3\31\20\0"+
    "\12\31\1\u0164\14\31";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10614];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\2\1\1\11\1\1\3\11\1\1\1\11"+
    "\4\1\1\11\1\1\1\11\4\1\12\11\2\1\4\11"+
    "\23\1\1\0\1\11\4\0\4\1\2\11\u011b\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int branchIdMode;

  public _M68kLexer() {
    this((java.io.Reader)null);
  }

  public boolean isBranchIdMode() {
    return branchIdMode > 1;
  }

  public void clearBranchIdMode(){
    branchIdMode = 0;
  }

  public void incBranchIdMode() {
    branchIdMode++;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _M68kLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 205: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 206: break;
          case 3: 
            { clearBranchIdMode(); yybegin(IN_INSTRUCTION); return WHITE_SPACE;
            } 
            // fall through
          case 207: break;
          case 4: 
            { yybegin(IN_COMMENT); return COMMENT;
            } 
            // fall through
          case 208: break;
          case 5: 
            { return DOT;
            } 
            // fall through
          case 209: break;
          case 6: 
            { yybegin(IN_LABEL); return ID;
            } 
            // fall through
          case 210: break;
          case 7: 
            { return UNDERSCORE;
            } 
            // fall through
          case 211: break;
          case 8: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 212: break;
          case 9: 
            { clearBranchIdMode(); yybegin(IN_INSTRUCTION); return COLON;
            } 
            // fall through
          case 213: break;
          case 10: 
            { incBranchIdMode();  return WHITE_SPACE;
            } 
            // fall through
          case 214: break;
          case 11: 
            { return MUL;
            } 
            // fall through
          case 215: break;
          case 12: 
            { clearBranchIdMode(); return DEC_NUMBER;
            } 
            // fall through
          case 216: break;
          case 13: 
            { return PERCENT;
            } 
            // fall through
          case 217: break;
          case 14: 
            { return PIPE;
            } 
            // fall through
          case 218: break;
          case 15: 
            { return BACKSLASH;
            } 
            // fall through
          case 219: break;
          case 16: 
            { return ID;
            } 
            // fall through
          case 220: break;
          case 17: 
            { return COLON;
            } 
            // fall through
          case 221: break;
          case 18: 
            { return COMMA;
            } 
            // fall through
          case 222: break;
          case 19: 
            { return PLUS;
            } 
            // fall through
          case 223: break;
          case 20: 
            { return MINUS;
            } 
            // fall through
          case 224: break;
          case 21: 
            { return DIV;
            } 
            // fall through
          case 225: break;
          case 22: 
            { return EQ;
            } 
            // fall through
          case 226: break;
          case 23: 
            { return POW;
            } 
            // fall through
          case 227: break;
          case 24: 
            { clearBranchIdMode(); return HASH;
            } 
            // fall through
          case 228: break;
          case 25: 
            { return TILDE;
            } 
            // fall through
          case 229: break;
          case 26: 
            { return AMPERSAND;
            } 
            // fall through
          case 230: break;
          case 27: 
            { clearBranchIdMode(); return L_PAREN;
            } 
            // fall through
          case 231: break;
          case 28: 
            { return R_PAREN;
            } 
            // fall through
          case 232: break;
          case 29: 
            { clearBranchIdMode(); return L_BRACKET;
            } 
            // fall through
          case 233: break;
          case 30: 
            { return R_BRACKET;
            } 
            // fall through
          case 234: break;
          case 31: 
            { clearBranchIdMode(); return HEX_NUMBER;
            } 
            // fall through
          case 235: break;
          case 32: 
            { clearBranchIdMode(); return OCT_NUMBER;
            } 
            // fall through
          case 236: break;
          case 33: 
            { clearBranchIdMode(); return BIN_NUMBER;
            } 
            // fall through
          case 237: break;
          case 34: 
            { return STRING;
            } 
            // fall through
          case 238: break;
          case 35: 
            { if (isBranchIdMode()) return ID; incBranchIdMode(); return DOT_S;
            } 
            // fall through
          case 239: break;
          case 36: 
            { if (isBranchIdMode()) return ID; incBranchIdMode(); return DOT_L;
            } 
            // fall through
          case 240: break;
          case 37: 
            { if (isBranchIdMode()) return ID; incBranchIdMode(); return DOT_B;
            } 
            // fall through
          case 241: break;
          case 38: 
            { if (isBranchIdMode()) return ID; incBranchIdMode(); return DOT_W;
            } 
            // fall through
          case 242: break;
          case 39: 
            { return SHIFT_L;
            } 
            // fall through
          case 243: break;
          case 40: 
            { return SHIFT_R;
            } 
            // fall through
          case 244: break;
          case 41: 
            { return SF;
            } 
            // fall through
          case 245: break;
          case 42: 
            { return SP;
            } 
            // fall through
          case 246: break;
          case 43: 
            { return SR;
            } 
            // fall through
          case 247: break;
          case 44: 
            { return ST;
            } 
            // fall through
          case 248: break;
          case 45: 
            { return PC;
            } 
            // fall through
          case 249: break;
          case 46: 
            { return RS;
            } 
            // fall through
          case 250: break;
          case 47: 
            { return DATA_REGISTER;
            } 
            // fall through
          case 251: break;
          case 48: 
            { return DS;
            } 
            // fall through
          case 252: break;
          case 49: 
            { return DC;
            } 
            // fall through
          case 253: break;
          case 50: 
            { return ADDRESS_REGISTER;
            } 
            // fall through
          case 254: break;
          case 51: 
            { return OR;
            } 
            // fall through
          case 255: break;
          case 52: 
            { return IF;
            } 
            // fall through
          case 256: break;
          case 53: 
            { return SSP;
            } 
            // fall through
          case 257: break;
          case 54: 
            { return SPL;
            } 
            // fall through
          case 258: break;
          case 55: 
            { return SUB;
            } 
            // fall through
          case 259: break;
          case 56: 
            { return SCS;
            } 
            // fall through
          case 260: break;
          case 57: 
            { return SCC;
            } 
            // fall through
          case 261: break;
          case 58: 
            { return SNE;
            } 
            // fall through
          case 262: break;
          case 59: 
            { return SLS;
            } 
            // fall through
          case 263: break;
          case 60: 
            { return SLE;
            } 
            // fall through
          case 264: break;
          case 61: 
            { return SLT;
            } 
            // fall through
          case 265: break;
          case 62: 
            { return SET;
            } 
            // fall through
          case 266: break;
          case 63: 
            { return SEQ;
            } 
            // fall through
          case 267: break;
          case 64: 
            { return SGE;
            } 
            // fall through
          case 268: break;
          case 65: 
            { return SGT;
            } 
            // fall through
          case 269: break;
          case 66: 
            { return SVS;
            } 
            // fall through
          case 270: break;
          case 67: 
            { return SVC;
            } 
            // fall through
          case 271: break;
          case 68: 
            { return SMI;
            } 
            // fall through
          case 272: break;
          case 69: 
            { return SHI;
            } 
            // fall through
          case 273: break;
          case 70: 
            { return PEA;
            } 
            // fall through
          case 274: break;
          case 71: 
            { return USP;
            } 
            // fall through
          case 275: break;
          case 72: 
            { return CCR;
            } 
            // fall through
          case 276: break;
          case 73: 
            { return CLR;
            } 
            // fall through
          case 277: break;
          case 74: 
            { return CMP;
            } 
            // fall through
          case 278: break;
          case 75: 
            { return CHK;
            } 
            // fall through
          case 279: break;
          case 76: 
            { return ROR;
            } 
            // fall through
          case 280: break;
          case 77: 
            { return ROL;
            } 
            // fall through
          case 281: break;
          case 78: 
            { return RTS;
            } 
            // fall through
          case 282: break;
          case 79: 
            { return RTR;
            } 
            // fall through
          case 283: break;
          case 80: 
            { return RTE;
            } 
            // fall through
          case 284: break;
          case 81: 
            { return DCB;
            } 
            // fall through
          case 285: break;
          case 82: 
            { incBranchIdMode(); return DBF;
            } 
            // fall through
          case 286: break;
          case 83: 
            { incBranchIdMode(); return DBT;
            } 
            // fall through
          case 287: break;
          case 84: 
            { return ASR;
            } 
            // fall through
          case 288: break;
          case 85: 
            { return ASL;
            } 
            // fall through
          case 289: break;
          case 86: 
            { return ADD;
            } 
            // fall through
          case 290: break;
          case 87: 
            { return AND;
            } 
            // fall through
          case 291: break;
          case 88: 
            { return NOP;
            } 
            // fall through
          case 292: break;
          case 89: 
            { return NOT;
            } 
            // fall through
          case 293: break;
          case 90: 
            { return NEG;
            } 
            // fall through
          case 294: break;
          case 91: 
            { return OPT;
            } 
            // fall through
          case 295: break;
          case 92: 
            { return ORI;
            } 
            // fall through
          case 296: break;
          case 93: 
            { return ORG;
            } 
            // fall through
          case 297: break;
          case 94: 
            { return ODD;
            } 
            // fall through
          case 298: break;
          case 95: 
            { return IFC;
            } 
            // fall through
          case 299: break;
          case 96: 
            { return IFD;
            } 
            // fall through
          case 300: break;
          case 97: 
            { return IFB;
            } 
            // fall through
          case 301: break;
          case 98: 
            { return LSR;
            } 
            // fall through
          case 302: break;
          case 99: 
            { return LSL;
            } 
            // fall through
          case 303: break;
          case 100: 
            { return LEA;
            } 
            // fall through
          case 304: break;
          case 101: 
            { return END;
            } 
            // fall through
          case 305: break;
          case 102: 
            { return EOR;
            } 
            // fall through
          case 306: break;
          case 103: 
            { return EQU;
            } 
            // fall through
          case 307: break;
          case 104: 
            { return EXG;
            } 
            // fall through
          case 308: break;
          case 105: 
            { return EXT;
            } 
            // fall through
          case 309: break;
          case 106: 
            { return TST;
            } 
            // fall through
          case 310: break;
          case 107: 
            { return TAS;
            } 
            // fall through
          case 311: break;
          case 108: 
            { return JSR;
            } 
            // fall through
          case 312: break;
          case 109: 
            { return JMP;
            } 
            // fall through
          case 313: break;
          case 110: 
            { return BSR;
            } 
            // fall through
          case 314: break;
          case 111: 
            { incBranchIdMode(); return BPL;
            } 
            // fall through
          case 315: break;
          case 112: 
            { incBranchIdMode(); return BCS;
            } 
            // fall through
          case 316: break;
          case 113: 
            { incBranchIdMode(); return BCC;
            } 
            // fall through
          case 317: break;
          case 114: 
            { incBranchIdMode(); return BRA;
            } 
            // fall through
          case 318: break;
          case 115: 
            { incBranchIdMode(); return BNE;
            } 
            // fall through
          case 319: break;
          case 116: 
            { incBranchIdMode(); return BLS;
            } 
            // fall through
          case 320: break;
          case 117: 
            { incBranchIdMode(); return BLO;
            } 
            // fall through
          case 321: break;
          case 118: 
            { incBranchIdMode(); return BLE;
            } 
            // fall through
          case 322: break;
          case 119: 
            { incBranchIdMode(); return BLT;
            } 
            // fall through
          case 323: break;
          case 120: 
            { return BLK;
            } 
            // fall through
          case 324: break;
          case 121: 
            { incBranchIdMode(); return BEQ;
            } 
            // fall through
          case 325: break;
          case 122: 
            { incBranchIdMode(); return BGE;
            } 
            // fall through
          case 326: break;
          case 123: 
            { incBranchIdMode(); return BGT;
            } 
            // fall through
          case 327: break;
          case 124: 
            { incBranchIdMode(); return BVS;
            } 
            // fall through
          case 328: break;
          case 125: 
            { incBranchIdMode(); return BVC;
            } 
            // fall through
          case 329: break;
          case 126: 
            { incBranchIdMode(); return BMI;
            } 
            // fall through
          case 330: break;
          case 127: 
            { incBranchIdMode(); return BHS;
            } 
            // fall through
          case 331: break;
          case 128: 
            { incBranchIdMode(); return BHI;
            } 
            // fall through
          case 332: break;
          case 129: 
            { return SUBA;
            } 
            // fall through
          case 333: break;
          case 130: 
            { return SUBI;
            } 
            // fall through
          case 334: break;
          case 131: 
            { return SUBQ;
            } 
            // fall through
          case 335: break;
          case 132: 
            { return SUBX;
            } 
            // fall through
          case 336: break;
          case 133: 
            { return STOP;
            } 
            // fall through
          case 337: break;
          case 134: 
            { return SBCD;
            } 
            // fall through
          case 338: break;
          case 135: 
            { return SWAP;
            } 
            // fall through
          case 339: break;
          case 136: 
            { return UNLK;
            } 
            // fall through
          case 340: break;
          case 137: 
            { return CMPA;
            } 
            // fall through
          case 341: break;
          case 138: 
            { return CMPI;
            } 
            // fall through
          case 342: break;
          case 139: 
            { return CMPM;
            } 
            // fall through
          case 343: break;
          case 140: 
            { return ROXR;
            } 
            // fall through
          case 344: break;
          case 141: 
            { return ROXL;
            } 
            // fall through
          case 345: break;
          case 142: 
            { return DIVS;
            } 
            // fall through
          case 346: break;
          case 143: 
            { return DIVU;
            } 
            // fall through
          case 347: break;
          case 144: 
            { incBranchIdMode(); return DBPL;
            } 
            // fall through
          case 348: break;
          case 145: 
            { incBranchIdMode(); return DBCS;
            } 
            // fall through
          case 349: break;
          case 146: 
            { incBranchIdMode(); return DBCC;
            } 
            // fall through
          case 350: break;
          case 147: 
            { incBranchIdMode(); return DBRA;
            } 
            // fall through
          case 351: break;
          case 148: 
            { incBranchIdMode(); return DBNE;
            } 
            // fall through
          case 352: break;
          case 149: 
            { incBranchIdMode(); return DBLS;
            } 
            // fall through
          case 353: break;
          case 150: 
            { incBranchIdMode(); return DBLE;
            } 
            // fall through
          case 354: break;
          case 151: 
            { incBranchIdMode(); return DBLT;
            } 
            // fall through
          case 355: break;
          case 152: 
            { incBranchIdMode(); return DBEQ;
            } 
            // fall through
          case 356: break;
          case 153: 
            { incBranchIdMode(); return DBGE;
            } 
            // fall through
          case 357: break;
          case 154: 
            { incBranchIdMode(); return DBGT;
            } 
            // fall through
          case 358: break;
          case 155: 
            { incBranchIdMode(); return DBVS;
            } 
            // fall through
          case 359: break;
          case 156: 
            { incBranchIdMode(); return DBVC;
            } 
            // fall through
          case 360: break;
          case 157: 
            { incBranchIdMode(); return DBMI;
            } 
            // fall through
          case 361: break;
          case 158: 
            { incBranchIdMode(); return DBHI;
            } 
            // fall through
          case 362: break;
          case 159: 
            { return ADDA;
            } 
            // fall through
          case 363: break;
          case 160: 
            { return ADDI;
            } 
            // fall through
          case 364: break;
          case 161: 
            { return ADDQ;
            } 
            // fall through
          case 365: break;
          case 162: 
            { return ADDX;
            } 
            // fall through
          case 366: break;
          case 163: 
            { return ANDI;
            } 
            // fall through
          case 367: break;
          case 164: 
            { return ABCD;
            } 
            // fall through
          case 368: break;
          case 165: 
            { return NEGX;
            } 
            // fall through
          case 369: break;
          case 166: 
            { return NBCD;
            } 
            // fall through
          case 370: break;
          case 167: 
            { return IFNC;
            } 
            // fall through
          case 371: break;
          case 168: 
            { return IFND;
            } 
            // fall through
          case 372: break;
          case 169: 
            { return IFNE;
            } 
            // fall through
          case 373: break;
          case 170: 
            { return IFNB;
            } 
            // fall through
          case 374: break;
          case 171: 
            { return IFLE;
            } 
            // fall through
          case 375: break;
          case 172: 
            { return IFLT;
            } 
            // fall through
          case 376: break;
          case 173: 
            { return IFEQ;
            } 
            // fall through
          case 377: break;
          case 174: 
            { return IFGE;
            } 
            // fall through
          case 378: break;
          case 175: 
            { return IFGT;
            } 
            // fall through
          case 379: break;
          case 176: 
            { return LINK;
            } 
            // fall through
          case 380: break;
          case 177: 
            { return ENDC;
            } 
            // fall through
          case 381: break;
          case 178: 
            { return ENDM;
            } 
            // fall through
          case 382: break;
          case 179: 
            { return EORI;
            } 
            // fall through
          case 383: break;
          case 180: 
            { return ELSE;
            } 
            // fall through
          case 384: break;
          case 181: 
            { return EVEN;
            } 
            // fall through
          case 385: break;
          case 182: 
            { return EQUR;
            } 
            // fall through
          case 386: break;
          case 183: 
            { return TRAP;
            } 
            // fall through
          case 387: break;
          case 184: 
            { return MULS;
            } 
            // fall through
          case 388: break;
          case 185: 
            { return MULU;
            } 
            // fall through
          case 389: break;
          case 186: 
            { return MOVE;
            } 
            // fall through
          case 390: break;
          case 187: 
            { return BSET;
            } 
            // fall through
          case 391: break;
          case 188: 
            { return BCLR;
            } 
            // fall through
          case 392: break;
          case 189: 
            { return BCHG;
            } 
            // fall through
          case 393: break;
          case 190: 
            { return BTST;
            } 
            // fall through
          case 394: break;
          case 191: 
            { return RSSET;
            } 
            // fall through
          case 395: break;
          case 192: 
            { return RESET;
            } 
            // fall through
          case 396: break;
          case 193: 
            { return TRAPV;
            } 
            // fall through
          case 397: break;
          case 194: 
            { return MACRO;
            } 
            // fall through
          case 398: break;
          case 195: 
            { return MOVEP;
            } 
            // fall through
          case 399: break;
          case 196: 
            { return MOVEA;
            } 
            // fall through
          case 400: break;
          case 197: 
            { return MOVEM;
            } 
            // fall through
          case 401: break;
          case 198: 
            { return MOVEQ;
            } 
            // fall through
          case 402: break;
          case 199: 
            { return INCDIR;
            } 
            // fall through
          case 403: break;
          case 200: 
            { return INCBIN;
            } 
            // fall through
          case 404: break;
          case 201: 
            { return ELSEIF;
            } 
            // fall through
          case 405: break;
          case 202: 
            { return RSRESET;
            } 
            // fall through
          case 406: break;
          case 203: 
            { return INCLUDE;
            } 
            // fall through
          case 407: break;
          case 204: 
            { return ILLEGAL;
            } 
            // fall through
          case 408: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
